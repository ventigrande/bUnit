{
  "api/Bunit.Asserting.ActualExpectedAssertException.html": {
    "href": "api/Bunit.Asserting.ActualExpectedAssertException.html",
    "title": "Class ActualExpectedAssertException | bUnit",
    "keywords": "Class ActualExpectedAssertException Represents a generic assert exception used when an actual result does not match an expected result. Inheritance System.Object System.Exception ActualExpectedAssertException DiffChangeAssertException HtmlEqualException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Asserting Assembly : Bunit.Core.dll Syntax [Serializable] public class ActualExpectedAssertException : Exception, ISerializable Constructors | Improve this Doc View Source ActualExpectedAssertException(SerializationInfo, StreamingContext) Declaration protected ActualExpectedAssertException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context | Improve this Doc View Source ActualExpectedAssertException(String, String, String, String, String) Creates an instance of the ActualExpectedAssertException . Declaration public ActualExpectedAssertException(string actual, string expected, string actualText, string expectedText, string message) Parameters Type Name Description System.String actual The actual result System.String expected The expected result System.String actualText A text explaining the actual result System.String expectedText A text explaining the expected result System.String message An error message explaining the context of the assertion Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Asserting.AssertionMethodAttribute.html": {
    "href": "api/Bunit.Asserting.AssertionMethodAttribute.html",
    "title": "Class AssertionMethodAttribute | bUnit",
    "keywords": "Class AssertionMethodAttribute Add this attribute to assertion methods to indicate to 3rd party analyzers that the method is an assertion method. See more here: https://rules.sonarsource.com/csharp/RSPEC-2699 Inheritance System.Object System.Attribute AssertionMethodAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Asserting Assembly : Bunit.Core.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class AssertionMethodAttribute : Attribute Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Asserting.html": {
    "href": "api/Bunit.Asserting.html",
    "title": "Namespace Bunit.Asserting | bUnit",
    "keywords": "Namespace Bunit.Asserting Classes ActualExpectedAssertException Represents a generic assert exception used when an actual result does not match an expected result. AssertionMethodAttribute Add this attribute to assertion methods to indicate to 3rd party analyzers that the method is an assertion method. See more here: https://rules.sonarsource.com/csharp/RSPEC-2699"
  },
  "api/Bunit.BlazorExtensions.html": {
    "href": "api/Bunit.BlazorExtensions.html",
    "title": "Class BlazorExtensions | bUnit",
    "keywords": "Class BlazorExtensions Extensions for Blazor types. Inheritance System.Object BlazorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class BlazorExtensions Methods | Improve this Doc View Source ToMarkupRenderFragment(String) Creates a Microsoft.AspNetCore.Components.RenderFragment that will render the markup . Declaration public static RenderFragment ToMarkupRenderFragment(this string markup) Parameters Type Name Description System.String markup Markup to render Returns Type Description Microsoft.AspNetCore.Components.RenderFragment The Microsoft.AspNetCore.Components.RenderFragment ."
  },
  "api/Bunit.BunitJSInterop.html": {
    "href": "api/Bunit.BunitJSInterop.html",
    "title": "Class BunitJSInterop | bUnit",
    "keywords": "Class BunitJSInterop Represents an bUnit's implementation of Blazor's JSInterop. Inheritance System.Object BunitJSInterop Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class BunitJSInterop Constructors | Improve this Doc View Source BunitJSInterop() Creates a BunitJSInterop . Declaration public BunitJSInterop() Properties | Improve this Doc View Source Invocations Gets a dictionary of all System.Collections.Generic.List`1 this mock has observed. Declaration public JSRuntimeInvocationDictionary Invocations { get; } Property Value Type Description JSRuntimeInvocationDictionary | Improve this Doc View Source JSRuntime Gets the mocked Microsoft.JSInterop.IJSRuntime instance. Declaration public IJSRuntime JSRuntime { get; } Property Value Type Description Microsoft.JSInterop.IJSRuntime | Improve this Doc View Source Mode Gets or sets whether the mock is running in Loose or Strict . Declaration public virtual JSRuntimeMode Mode { get; set; } Property Value Type Description JSRuntimeMode Methods | Improve this Doc View Source AddInvocationHandler<TResult>(JSRuntimeInvocationHandlerBase<TResult>) Adds an invocation handler to bUnit's JSInterop. Can be used to register custom invocation handlers. Declaration public void AddInvocationHandler<TResult>(JSRuntimeInvocationHandlerBase<TResult> handler) Parameters Type Name Description JSRuntimeInvocationHandlerBase <TResult> handler Type Parameters Name Description TResult Extension Methods JSRuntimeAssertExtensions.VerifyNotInvoke(BunitJSInterop, String, String) JSRuntimeAssertExtensions.VerifyInvoke(BunitJSInterop, String, String) JSRuntimeAssertExtensions.VerifyInvoke(BunitJSInterop, String, Int32, String) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) BunitJSInteropSetupExtensions.Setup<TResult>(BunitJSInterop, String, InvocationMatcher) BunitJSInteropSetupExtensions.Setup<TResult>(BunitJSInterop, String, Object[]) BunitJSInteropSetupExtensions.Setup<TResult>(BunitJSInterop) BunitJSInteropSetupExtensions.SetupVoid(BunitJSInterop, String, InvocationMatcher) BunitJSInteropSetupExtensions.SetupVoid(BunitJSInterop, String, Object[]) BunitJSInteropSetupExtensions.SetupVoid(BunitJSInterop) BunitJSInteropSetupExtensions.TryGetInvokeHandler<TResult>(BunitJSInterop, String, Object[]) BunitJSInteropSetupExtensions.TryGetInvokeVoidHandler(BunitJSInterop, String, Object[])"
  },
  "api/Bunit.ClipboardEventDispatchExtensions.html": {
    "href": "api/Bunit.ClipboardEventDispatchExtensions.html",
    "title": "Class ClipboardEventDispatchExtensions | bUnit",
    "keywords": "Class ClipboardEventDispatchExtensions Clipboard event dispatch helper extension methods. Inheritance System.Object ClipboardEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ClipboardEventDispatchExtensions Methods | Improve this Doc View Source BeforeCopy(IElement) Raises the @onbeforecopy event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeCopy(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeCut(IElement) Raises the @onbeforecut event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeCut(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforePaste(IElement) Raises the @onbeforepaste event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforePaste(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Copy(IElement, ClipboardEventArgs) Raises the @oncopy event on element , passing the provided eventArgs to the event handler. Declaration public static void Copy(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Copy(IElement, String) Raises the @oncopy event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ClipboardEventArgs object. Declaration public static void Copy(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source Cut(IElement, ClipboardEventArgs) Raises the @oncut event on element , passing the provided eventArgs to the event handler. Declaration public static void Cut(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Cut(IElement, String) Raises the @oncut event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ClipboardEventArgs object. Declaration public static void Cut(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source Paste(IElement, ClipboardEventArgs) Raises the @onpaste event on element , passing the provided eventArgs to the event handler. Declaration public static void Paste(this IElement element, ClipboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ClipboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Paste(IElement, String) Raises the @onpaste event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ClipboardEventArgs object. Declaration public static void Paste(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event."
  },
  "api/Bunit.CompareToExtensions.html": {
    "href": "api/Bunit.CompareToExtensions.html",
    "title": "Class CompareToExtensions | bUnit",
    "keywords": "Class CompareToExtensions Extension methods that allows different rendered fragments to be compared to others or strings. Inheritance System.Object CompareToExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class CompareToExtensions Methods | Improve this Doc View Source CompareTo(INode, INodeList) Compares an actual AngleSharp.Dom.INode with an expected AngleSharp.Dom.INodeList . Declaration public static IReadOnlyList<IDiff> CompareTo(this INode actual, INodeList expected) Parameters Type Name Description AngleSharp.Dom.INode actual The node to check. AngleSharp.Dom.INodeList expected The node list to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(INodeList, INode) Compares an actual AngleSharp.Dom.INodeList with an expected AngleSharp.Dom.INode . Declaration public static IReadOnlyList<IDiff> CompareTo(this INodeList actual, INode expected) Parameters Type Name Description AngleSharp.Dom.INodeList actual The node list to check. AngleSharp.Dom.INode expected The node to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(INodeList, INodeList) Compares an actual AngleSharp.Dom.INodeList with an expected AngleSharp.Dom.INodeList . Declaration public static IReadOnlyList<IDiff> CompareTo(this INodeList actual, INodeList expected) Parameters Type Name Description AngleSharp.Dom.INodeList actual The node list to check. AngleSharp.Dom.INodeList expected The node list to compare with Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(IRenderedFragment, IRenderedFragment) Compare the rendered markup in the actual IRenderedFragmentBase to the rendered markup in the expected IRenderedFragmentBase Declaration public static IReadOnlyList<IDiff> CompareTo(this IRenderedFragment actual, IRenderedFragment expected) Parameters Type Name Description IRenderedFragment actual Source of rendered markup to check. IRenderedFragment expected Source of rendered markup to compare with. Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found. | Improve this Doc View Source CompareTo(IRenderedFragment, String) Compare the rendered markup in the actual IRenderedFragmentBase with that in the expected markup string. Declaration public static IReadOnlyList<IDiff> CompareTo(this IRenderedFragment actual, string expected) Parameters Type Name Description IRenderedFragment actual Source of rendered markup to check. System.String expected Markup to compare with. Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > Any differences found."
  },
  "api/Bunit.ComponentParameter.html": {
    "href": "api/Bunit.ComponentParameter.html",
    "title": "Struct ComponentParameter | bUnit",
    "keywords": "Struct ComponentParameter Represents a single parameter supplied to an Microsoft.AspNetCore.Components.IComponent component under test. Implements System.IEquatable < ComponentParameter > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Core.dll Syntax public struct ComponentParameter : IEquatable<ComponentParameter> Properties | Improve this Doc View Source IsCascadingValue Gets a value to indicate whether the parameter is for use by a Microsoft.AspNetCore.Components.CascadingValue`1 . Declaration public bool IsCascadingValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Gets the name of the parameter. Can be null if the parameter is for an unnamed cascading value. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Value Gets the value being supplied to the component. Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source CreateCascadingValue(String, Object) Create a Cascading Value parameter for a component under test. Declaration public static ComponentParameter CreateCascadingValue(string name, object value) Parameters Type Name Description System.String name A optional name for the cascading value System.Object value The cascading value Returns Type Description ComponentParameter | Improve this Doc View Source CreateParameter(String, Object) Create a parameter for a component under test. Declaration public static ComponentParameter CreateParameter(string name, object value) Parameters Type Name Description System.String name Name of the parameter to pass to the component System.Object value Value or null to pass the component Returns Type Description ComponentParameter | Improve this Doc View Source Equals(ComponentParameter) Declaration public bool Equals(ComponentParameter other) Parameters Type Name Description ComponentParameter other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(ComponentParameter, ComponentParameter) Declaration public static bool operator ==(ComponentParameter left, ComponentParameter right) Parameters Type Name Description ComponentParameter left ComponentParameter right Returns Type Description System.Boolean | Improve this Doc View Source Implicit((String name, Object value, Boolean isCascadingValue) to ComponentParameter) Create a parameter or cascading value for a component under test. Declaration public static implicit operator ComponentParameter((string name, object value, bool isCascadingValue) input) Parameters Type Name Description System.ValueTuple < System.String , System.Object , System.Boolean > input A name/value/isCascadingValue triple for the parameter Returns Type Description ComponentParameter | Improve this Doc View Source Implicit((String name, Object value) to ComponentParameter) Create a parameter for a component under test. Declaration public static implicit operator ComponentParameter((string name, object value) input) Parameters Type Name Description System.ValueTuple < System.String , System.Object > input A name/value pair for the parameter Returns Type Description ComponentParameter | Improve this Doc View Source Inequality(ComponentParameter, ComponentParameter) Declaration public static bool operator !=(ComponentParameter left, ComponentParameter right) Parameters Type Name Description ComponentParameter left ComponentParameter right Returns Type Description System.Boolean Implements System.IEquatable<T> Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentParameterCollection.html": {
    "href": "api/Bunit.ComponentParameterCollection.html",
    "title": "Class ComponentParameterCollection | bUnit",
    "keywords": "Class ComponentParameterCollection A collection for ComponentParameter Inheritance System.Object ComponentParameterCollection Implements System.Collections.Generic.ICollection < ComponentParameter > System.Collections.Generic.IReadOnlyCollection < ComponentParameter > System.Collections.Generic.IEnumerable < ComponentParameter > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public class ComponentParameterCollection : ICollection<ComponentParameter>, IReadOnlyCollection<ComponentParameter>, IEnumerable<ComponentParameter>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of ComponentParameter in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Add(ComponentParameter) Adds a parameter to the collection. Declaration public void Add(ComponentParameter parameter) Parameters Type Name Description ComponentParameter parameter Parameter to add to the collection. | Improve this Doc View Source Add(IEnumerable<ComponentParameter>) Adds an enumerable of parameters to the collection. Declaration public void Add(IEnumerable<ComponentParameter> parameters) Parameters Type Name Description System.Collections.Generic.IEnumerable < ComponentParameter > parameters Parameters to add. | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(ComponentParameter) Checks if the parameter is in the collection. Declaration public bool Contains(ComponentParameter parameter) Parameters Type Name Description ComponentParameter parameter Parameter to check with. Returns Type Description System.Boolean True if parameter is in the collection, false otherwise. | Improve this Doc View Source CopyTo(ComponentParameter[], Int32) Declaration public void CopyTo(ComponentParameter[] array, int arrayIndex) Parameters Type Name Description ComponentParameter [] array System.Int32 arrayIndex | Improve this Doc View Source Remove(ComponentParameter) Declaration public bool Remove(ComponentParameter item) Parameters Type Name Description ComponentParameter item Returns Type Description System.Boolean | Improve this Doc View Source ToRenderFragment<TComponent>() Creates a Microsoft.AspNetCore.Components.RenderFragment that will render a component of type TComponent with the parameters in the collection passed to it. Declaration public RenderFragment ToRenderFragment<TComponent>() where TComponent : IComponent Returns Type Description Microsoft.AspNetCore.Components.RenderFragment Type Parameters Name Description TComponent Type of component to render. Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentParameterCollectionBuilder-1.html": {
    "href": "api/Bunit.ComponentParameterCollectionBuilder-1.html",
    "title": "Class ComponentParameterCollectionBuilder<TComponent> | bUnit",
    "keywords": "Class ComponentParameterCollectionBuilder<TComponent> A ComponentParameterCollection builder for a specific TComponent component under test. Inheritance System.Object ComponentParameterCollectionBuilder<TComponent> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public sealed class ComponentParameterCollectionBuilder<TComponent> where TComponent : IComponent Type Parameters Name Description TComponent The type of component under test to add the parameters Constructors | Improve this Doc View Source ComponentParameterCollectionBuilder() Creates an instance of the ComponentParameterCollectionBuilder<TComponent> . Declaration public ComponentParameterCollectionBuilder() | Improve this Doc View Source ComponentParameterCollectionBuilder(Action<ComponentParameterCollectionBuilder<TComponent>>) Creates an instance of the ComponentParameterCollectionBuilder<TComponent> and invokes the parameterAdder with it as the argument. Declaration public ComponentParameterCollectionBuilder(Action<ComponentParameterCollectionBuilder<TComponent>> parameterAdder) Parameters Type Name Description System.Action < ComponentParameterCollectionBuilder <TComponent>> parameterAdder Methods | Improve this Doc View Source Add(Expression<Func<TComponent, EventCallback>>, Action) Adds a component parameter for an Microsoft.AspNetCore.Components.EventCallback parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback>> parameterSelector, Action callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback >> parameterSelector A lambda function that selects the parameter. System.Action callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add(Expression<Func<TComponent, EventCallback>>, Action<Object>) Adds a component parameter for an Microsoft.AspNetCore.Components.EventCallback parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback>> parameterSelector, Action<object> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback >> parameterSelector A lambda function that selects the parameter. System.Action < System.Object > callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add(Expression<Func<TComponent, EventCallback>>, Func<Task>) Adds a component parameter for an Microsoft.AspNetCore.Components.EventCallback parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback>> parameterSelector, Func<Task> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback >> parameterSelector A lambda function that selects the parameter. System.Func < System.Threading.Tasks.Task > callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add(Expression<Func<TComponent, RenderFragment>>, String) Adds a component parameter for a Microsoft.AspNetCore.Components.RenderFragment parameter selected with parameterSelector , where the Microsoft.AspNetCore.Components.RenderFragment value is the markup passed in through the markup argument. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, RenderFragment>> parameterSelector, string markup) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment >> parameterSelector A lambda function that selects the parameter. System.String markup The markup string to pass to the Microsoft.AspNetCore.Components.RenderFragment . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add(Expression<Func<TComponent, Nullable<EventCallback>>>, Action) Adds a component parameter for a nullable Microsoft.AspNetCore.Components.EventCallback parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback?>> parameterSelector, Action callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, System.Nullable < Microsoft.AspNetCore.Components.EventCallback >>> parameterSelector A lambda function that selects the parameter. System.Action callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add(Expression<Func<TComponent, Nullable<EventCallback>>>, Action<Object>) Adds a component parameter for a nullable Microsoft.AspNetCore.Components.EventCallback parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback?>> parameterSelector, Action<object> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, System.Nullable < Microsoft.AspNetCore.Components.EventCallback >>> parameterSelector A lambda function that selects the parameter. System.Action < System.Object > callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add(Expression<Func<TComponent, Nullable<EventCallback>>>, Func<Task>) Adds a component parameter for a nullable Microsoft.AspNetCore.Components.EventCallback parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add(Expression<Func<TComponent, EventCallback?>> parameterSelector, Func<Task> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, System.Nullable < Microsoft.AspNetCore.Components.EventCallback >>> parameterSelector A lambda function that selects the parameter. System.Func < System.Threading.Tasks.Task > callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, TValue>>, TValue) Adds a component parameter for the parameter selected with parameterSelector with the value value . Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, TValue>> parameterSelector, TValue value) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, TValue>> parameterSelector A lambda function that selects the parameter. TValue value The value to pass to TComponent . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue Type of value . | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>>, Action) Adds a component parameter for an Microsoft.AspNetCore.Components.EventCallback`1 parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>> parameterSelector, Action callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback <TValue>>> parameterSelector A lambda function that selects the parameter. System.Action callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>>, Action<TValue>) Adds a component parameter for an Microsoft.AspNetCore.Components.EventCallback`1 parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>> parameterSelector, Action<TValue> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback <TValue>>> parameterSelector A lambda function that selects the parameter. System.Action <TValue> callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>>, Func<Task>) Adds a component parameter for an Microsoft.AspNetCore.Components.EventCallback`1 parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>>> parameterSelector, Func<Task> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.EventCallback <TValue>>> parameterSelector A lambda function that selects the parameter. System.Func < System.Threading.Tasks.Task > callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, RenderFragment<TValue>>>, Func<TValue, String>) Adds a component parameter for a Microsoft.AspNetCore.Components.RenderFragment<TValue> template parameter selected with parameterSelector , where the Microsoft.AspNetCore.Components.RenderFragment<TValue> template is based on the markupFactory argument. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, RenderFragment<TValue>>> parameterSelector, Func<TValue, string> markupFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment <TValue>>> parameterSelector A lambda function that selects the parameter. System.Func <TValue, System.String > markupFactory A markup factory used to create the Microsoft.AspNetCore.Components.RenderFragment<TValue> template with. Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue The context type of the Microsoft.AspNetCore.Components.RenderFragment<TValue> . | Improve this Doc View Source Add<TChildComponent>(Expression<Func<TComponent, RenderFragment>>, Action<ComponentParameterCollectionBuilder<TChildComponent>>) Adds a component parameter for a Microsoft.AspNetCore.Components.RenderFragment parameter selected with parameterSelector , where the Microsoft.AspNetCore.Components.RenderFragment value is created through the childParameterBuilder argument. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TChildComponent>(Expression<Func<TComponent, RenderFragment>> parameterSelector, Action<ComponentParameterCollectionBuilder<TChildComponent>> childParameterBuilder = null) where TChildComponent : IComponent Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment >> parameterSelector A lambda function that selects the parameter. System.Action < ComponentParameterCollectionBuilder <TChildComponent>> childParameterBuilder A parameter builder for the TChildComponent . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TChildComponent The type of component to create a Microsoft.AspNetCore.Components.RenderFragment for. | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, Nullable<EventCallback<TValue>>>>, Action) Adds a component parameter for a nullable Microsoft.AspNetCore.Components.EventCallback`1 parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>?>> parameterSelector, Action callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, System.Nullable < Microsoft.AspNetCore.Components.EventCallback <TValue>>>> parameterSelector A lambda function that selects the parameter. System.Action callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, Nullable<EventCallback<TValue>>>>, Action<TValue>) Adds a component parameter for a nullable Microsoft.AspNetCore.Components.EventCallback`1 parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>?>> parameterSelector, Action<TValue> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, System.Nullable < Microsoft.AspNetCore.Components.EventCallback <TValue>>>> parameterSelector A lambda function that selects the parameter. System.Action <TValue> callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue | Improve this Doc View Source Add<TValue>(Expression<Func<TComponent, Nullable<EventCallback<TValue>>>>, Func<Task>) Adds a component parameter for a nullable Microsoft.AspNetCore.Components.EventCallback`1 parameter selected with parameterSelector , where the callback is used as value. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TValue>(Expression<Func<TComponent, EventCallback<TValue>?>> parameterSelector, Func<Task> callback) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, System.Nullable < Microsoft.AspNetCore.Components.EventCallback <TValue>>>> parameterSelector A lambda function that selects the parameter. System.Func < System.Threading.Tasks.Task > callback The callback to pass to the Microsoft.AspNetCore.Components.EventCallback . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue | Improve this Doc View Source Add<TChildComponent, TValue>(Expression<Func<TComponent, RenderFragment<TValue>>>, Func<TValue, Action<ComponentParameterCollectionBuilder<TChildComponent>>>) Adds a component parameter for a Microsoft.AspNetCore.Components.RenderFragment<TValue> template parameter selected with parameterSelector , where the Microsoft.AspNetCore.Components.RenderFragment<TValue> template is based on the templateFactory , which is used to create a Microsoft.AspNetCore.Components.RenderFragment<TValue> that renders a TChildComponent inside the template. Declaration public ComponentParameterCollectionBuilder<TComponent> Add<TChildComponent, TValue>(Expression<Func<TComponent, RenderFragment<TValue>>> parameterSelector, Func<TValue, Action<ComponentParameterCollectionBuilder<TChildComponent>>> templateFactory) where TChildComponent : IComponent Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TComponent, Microsoft.AspNetCore.Components.RenderFragment <TValue>>> parameterSelector A lambda function that selects the parameter. System.Func <TValue, System.Action < ComponentParameterCollectionBuilder <TChildComponent>>> templateFactory A template factory used to create the parameters being passed to the TChildComponent . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TChildComponent The type of component to create a Microsoft.AspNetCore.Components.RenderFragment<TValue> for. TValue The context type of the Microsoft.AspNetCore.Components.RenderFragment<TValue> . | Improve this Doc View Source AddCascadingValue<TValue>(TValue) Adds an UNNAMED cascading value around the TComponent when it is rendered. Used to pass cascading values to child components of TComponent . Declaration public ComponentParameterCollectionBuilder<TComponent> AddCascadingValue<TValue>(TValue cascadingValue) Parameters Type Name Description TValue cascadingValue The cascading value. Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue The type of cascading value. | Improve this Doc View Source AddCascadingValue<TValue>(String, TValue) Adds an NAMED cascading value around the TComponent when it is rendered. Used to pass cascading values to child components of TComponent . Declaration public ComponentParameterCollectionBuilder<TComponent> AddCascadingValue<TValue>(string name, TValue cascadingValue) Parameters Type Name Description System.String name The name of the cascading value. TValue cascadingValue The cascading value. Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TValue The type of cascading value. | Improve this Doc View Source AddChildContent(RenderFragment) Adds a ChildContent Microsoft.AspNetCore.Components.RenderFragment type parameter with the childContent as value. Note, this is equivalent to Add(p => p.ChildContent, childContent) . Declaration public ComponentParameterCollectionBuilder<TComponent> AddChildContent(RenderFragment childContent) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment childContent The Microsoft.AspNetCore.Components.RenderFragment to pass the ChildContent parameter. Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source AddChildContent(String) Adds a ChildContent Microsoft.AspNetCore.Components.RenderFragment type parameter with the markup as value wrapped in a Microsoft.AspNetCore.Components.RenderFragment . Note, this is equivalent to Add(p => p.ChildContent, \"...\") . Declaration public ComponentParameterCollectionBuilder<TComponent> AddChildContent(string markup) Parameters Type Name Description System.String markup The markup string to pass the ChildContent parameter wrapped in a Microsoft.AspNetCore.Components.RenderFragment . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source AddChildContent<TChildComponent>(Action<ComponentParameterCollectionBuilder<TChildComponent>>) Adds a ChildContent Microsoft.AspNetCore.Components.RenderFragment type parameter, that is passed a Microsoft.AspNetCore.Components.RenderFragment , which will render the TChildComponent with the parameters passed to childParameterBuilder . Declaration public ComponentParameterCollectionBuilder<TComponent> AddChildContent<TChildComponent>(Action<ComponentParameterCollectionBuilder<TChildComponent>> childParameterBuilder = null) where TChildComponent : IComponent Parameters Type Name Description System.Action < ComponentParameterCollectionBuilder <TChildComponent>> childParameterBuilder A parameter builder for the TChildComponent . Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TChildComponent Type of child component to pass to the ChildContent parameter. | Improve this Doc View Source AddUnmatched(String, Object) Adds an unmatched attribute value to TComponent . Declaration public ComponentParameterCollectionBuilder<TComponent> AddUnmatched(string name, object value = null) Parameters Type Name Description System.String name The name of the unmatched attribute. System.Object value The value of the unmatched attribute. Returns Type Description ComponentParameterCollectionBuilder <TComponent> This ComponentParameterCollectionBuilder<TComponent> . | Improve this Doc View Source Build() Builds the ComponentParameterCollection . Declaration public ComponentParameterCollection Build() Returns Type Description ComponentParameterCollection | Improve this Doc View Source TryAdd<TValue>(String, TValue) Try to add a value for a parameter with the name , if TComponent has a property with that name, AND that property has a Microsoft.AspNetCore.Components.ParameterAttribute or a Microsoft.AspNetCore.Components.CascadingParameterAttribute . Declaration public bool TryAdd<TValue>(string name, TValue value) Parameters Type Name Description System.String name Name of the property for the parameter. TValue value Value to assign to the parameter Returns Type Description System.Boolean True if parameter with the name exists and value was set, false otherwise. Type Parameters Name Description TValue Value type. Remarks This is an untyped version of the Add<TValue>(Expression<Func<TComponent, TValue>>, TValue) method. Always prefer the strongly typed Add methods whenever possible. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ComponentParameterFactory.html": {
    "href": "api/Bunit.ComponentParameterFactory.html",
    "title": "Class ComponentParameterFactory | bUnit",
    "keywords": "Class ComponentParameterFactory ComponentParameter factory methods. Inheritance System.Object ComponentParameterFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class ComponentParameterFactory Methods | Improve this Doc View Source CascadingValue(Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration public static ComponentParameter CascadingValue(object value) Parameters Type Name Description System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source CascadingValue(String, Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration public static ComponentParameter CascadingValue(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent(RenderFragment) Creates a ChildContent parameter that will pass the provided renderFragment to the parameter in the component. Declaration public static ComponentParameter ChildContent(RenderFragment renderFragment) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment The Microsoft.AspNetCore.Components.RenderFragment to pass to the ChildContent parameter. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent(String) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output. Declaration public static ComponentParameter ChildContent(string markup) Parameters Type Name Description System.String markup Markup to pass to the child content parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent<TComponent>(ComponentParameter[]) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input. Declaration public static ComponentParameter ChildContent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source EventCallback(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Action<Object>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Action<object> callback) Parameters Type Name Description System.String name Parameter name. System.Action < System.Object > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Object, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Func<object, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Object , System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback<TValue>(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Action<TValue>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Action<TValue> callback) Parameters Type Name Description System.String name Parameter name. System.Action <TValue> callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<TValue, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Func<TValue, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback that will call the provided callback . Declaration public static ComponentParameter EventCallback<TValue>(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source Parameter(String, Object) Creates a component parameter which can be passed to a test contexts render methods. Declaration public static ComponentParameter Parameter(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value or null of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment(String, String) Creates a Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output and passes it to the parameter specified in name . Declaration public static ComponentParameter RenderFragment(string name, string markup) Parameters Type Name Description System.String name Parameter name. System.String markup Markup to pass to the render fragment parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment<TComponent>(String, ComponentParameter[]) Creates a Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input, and passes it to the parameter specified in name . Declaration public static ComponentParameter RenderFragment<TComponent>(string name, params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description System.String name Parameter name. ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source Template<TValue>(String, RenderFragment<TValue>) Creates a template component parameter which will pass the template Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . Declaration public static ComponentParameter Template<TValue>(string name, RenderFragment<TValue> template) Parameters Type Name Description System.String name Parameter name. Microsoft.AspNetCore.Components.RenderFragment <TValue> template Microsoft.AspNetCore.Components.RenderFragment<TValue> to pass to the parameter. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source Template<TValue>(String, Func<TValue, String>) Creates a template component parameter which will pass the a Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . The markupFactory will be used to generate the markup inside the template. Declaration public static ComponentParameter Template<TValue>(string name, Func<TValue, string> markupFactory) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.String > markupFactory A markup factory that takes a TValue as input and returns markup/HTML. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source Template<TComponent, TValue>(String, Func<TValue, ComponentParameter[]>) Creates a template component parameter which will pass the a Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameterCollectionBuilder at runtime. The parameters returned from it will be passed to the TComponent and it will be rendered as the template. Declaration public static ComponentParameter Template<TComponent, TValue>(string name, Func<TValue, ComponentParameter[]> parameterCollectionBuilder) where TComponent : IComponent Parameters Type Name Description System.String name Parameter name. System.Func <TValue, ComponentParameter []> parameterCollectionBuilder The parameter collection builder function that will be passed the template TValue . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of component to render in template. TValue The value used to build the content."
  },
  "api/Bunit.ComponentTestFixture.html": {
    "href": "api/Bunit.ComponentTestFixture.html",
    "title": "Class ComponentTestFixture | bUnit",
    "keywords": "Class ComponentTestFixture Base class for test classes that contains Razor component tests. Inheritance System.Object TestContextBase TestContext ComponentTestFixture Implements System.IDisposable Inherited Members TestContext.JSInterop TestContext.RenderComponent<TComponent>(ComponentParameter[]) TestContext.RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) TestContext.Render<TComponent>(RenderFragment) TestContext.Render(RenderFragment) TestContext.BuildRenderTree(RenderTreeBuilder) TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.Dispose() TestContextBase.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Obsolete(\"Inherit from TestContext instead, and add a 'using static Bunit.ComponentParameterFactory' to your test class to keep using the component parameter factories/helpers, provided in this class. Alternatively, you can switch to using the RenderComponent overload that takes an ComponentParameterBuilder as input. This class will be removed in a later release.\")] public abstract class ComponentTestFixture : TestContext, IDisposable Methods | Improve this Doc View Source CascadingValue(Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration protected static ComponentParameter CascadingValue(object value) Parameters Type Name Description System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source CascadingValue(String, Object) Creates a cascading value which can be passed to a test contexts render methods. Declaration protected static ComponentParameter CascadingValue(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent(String) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output. Declaration protected static ComponentParameter ChildContent(string markup) Parameters Type Name Description System.String markup Markup to pass to the child content parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source ChildContent<TComponent>(ComponentParameter[]) Creates a ChildContent Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input. Declaration protected static ComponentParameter ChildContent<TComponent>(params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source EventCallback(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Action<Object>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Action<object> callback) Parameters Type Name Description System.String name Parameter name. System.Action < System.Object > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Object, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Func<object, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Object , System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source EventCallback<TValue>(String, Action) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Action callback) Parameters Type Name Description System.String name Parameter name. System.Action callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Action<TValue>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Action<TValue> callback) Parameters Type Name Description System.String name Parameter name. System.Action <TValue> callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<TValue, Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Func<TValue, Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source EventCallback<TValue>(String, Func<Task>) Creates a ComponentParameter with an Microsoft.AspNetCore.Components.EventCallback as parameter value for this TestContext and callback . Declaration protected static ComponentParameter EventCallback<TValue>(string name, Func<Task> callback) Parameters Type Name Description System.String name Parameter name. System.Func < System.Threading.Tasks.Task > callback The event callback. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue | Improve this Doc View Source Parameter(String, Object) Creates a component parameter which can be passed to a test contexts render methods. Declaration protected static ComponentParameter Parameter(string name, object value) Parameters Type Name Description System.String name Parameter name System.Object value Value or null of the parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment(String, String) Creates a Microsoft.AspNetCore.Components.RenderFragment with the provided markup as rendered output and passes it to the parameter specified in name . Declaration protected static ComponentParameter RenderFragment(string name, string markup) Parameters Type Name Description System.String name Parameter name. System.String markup Markup to pass to the render fragment parameter Returns Type Description ComponentParameter The ComponentParameter . | Improve this Doc View Source RenderFragment<TComponent>(String, ComponentParameter[]) Creates a Microsoft.AspNetCore.Components.RenderFragment which will render a TComponent component with the provided parameters as input, and passes it to the parameter specified in name . Declaration protected static ComponentParameter RenderFragment<TComponent>(string name, params ComponentParameter[] parameters) where TComponent : class, IComponent Parameters Type Name Description System.String name Parameter name. ComponentParameter [] parameters Parameters to pass to the TComponent . Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TComponent The type of the component to render with the Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source Template<TValue>(String, RenderFragment<TValue>) Creates a template component parameter which will pass the template Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . Declaration protected static ComponentParameter Template<TValue>(string name, RenderFragment<TValue> template) Parameters Type Name Description System.String name Parameter name. Microsoft.AspNetCore.Components.RenderFragment <TValue> template Microsoft.AspNetCore.Components.RenderFragment<TValue> to pass to the parameter. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. | Improve this Doc View Source Template<TValue>(String, Func<TValue, String>) Creates a template component parameter which will pass the a Microsoft.AspNetCore.Components.RenderFragment<TValue> to the parameter with the name name . The markupFactory will be used to generate the markup inside the template. Declaration protected static ComponentParameter Template<TValue>(string name, Func<TValue, string> markupFactory) Parameters Type Name Description System.String name Parameter name. System.Func <TValue, System.String > markupFactory A markup factory that takes a TValue as input and returns markup/HTML. Returns Type Description ComponentParameter The ComponentParameter . Type Parameters Name Description TValue The value used to build the content. Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.ComponentUnderTest.html": {
    "href": "api/Bunit.ComponentUnderTest.html",
    "title": "Class ComponentUnderTest | bUnit",
    "keywords": "Class ComponentUnderTest Represents a component that can be added inside a RazorTestBase , where a component under test can be defined as the child content. Inheritance System.Object FragmentBase ComponentUnderTest Implements Microsoft.AspNetCore.Components.IComponent Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public class ComponentUnderTest : FragmentBase, IComponent Methods | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides FragmentBase.SetParametersAsync(ParameterView) Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.DiffAssertExtensions.html": {
    "href": "api/Bunit.DiffAssertExtensions.html",
    "title": "Class DiffAssertExtensions | bUnit",
    "keywords": "Class DiffAssertExtensions A collection of AngleSharp.Diffing.Core.IDiff assert extensions and generic assert extensions Inheritance System.Object DiffAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class DiffAssertExtensions Methods | Improve this Doc View Source ShouldHaveChanges(IEnumerable<IDiff>, Action<IDiff>[]) Verifies that a collection of AngleSharp.Diffing.Core.IDiff s contains exactly a given number of elements, which meet the criteria provided by the AngleSharp.Diffing.Core.IDiff inspectors Declaration public static void ShouldHaveChanges(this IEnumerable<IDiff> diffs, params Action<IDiff>[] diffInspectors) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs The collection to be inspected System.Action < AngleSharp.Diffing.Core.IDiff >[] diffInspectors The AngleSharp.Diffing.Core.IDiff inspectors, which inspect each AngleSharp.Diffing.Core.IDiff in turn. The total number of AngleSharp.Diffing.Core.IDiff inspectors must exactly match the number of AngleSharp.Diffing.Core.IDiff s in the collection | Improve this Doc View Source ShouldHaveSingleChange(IEnumerable<IDiff>) Verifies that a collection of AngleSharp.Diffing.Core.IDiff s contains exactly one AngleSharp.Diffing.Core.IDiff . Declaration public static IDiff ShouldHaveSingleChange(this IEnumerable<IDiff> diffs) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs The collection to be inspected Returns Type Description AngleSharp.Diffing.Core.IDiff The expected single AngleSharp.Diffing.Core.IDiff in the collection."
  },
  "api/Bunit.DiffChangeAssertException.html": {
    "href": "api/Bunit.DiffChangeAssertException.html",
    "title": "Class DiffChangeAssertException | bUnit",
    "keywords": "Class DiffChangeAssertException Represents an diff change assertion that has failed. Inheritance System.Object System.Exception ActualExpectedAssertException DiffChangeAssertException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class DiffChangeAssertException : ActualExpectedAssertException, ISerializable Constructors | Improve this Doc View Source DiffChangeAssertException(DiffResult, DiffResult, String) Creates an instance of the DiffChangeAssertException . Declaration public DiffChangeAssertException(DiffResult actual, DiffResult expected, string message) Parameters Type Name Description AngleSharp.Diffing.Core.DiffResult actual The actual change AngleSharp.Diffing.Core.DiffResult expected The expected change System.String message An error message explaining the context of the assertion Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.BlazorDiffingHelpers.html": {
    "href": "api/Bunit.Diffing.BlazorDiffingHelpers.html",
    "title": "Class BlazorDiffingHelpers | bUnit",
    "keywords": "Class BlazorDiffingHelpers Blazor Diffing Helpers Inheritance System.Object BlazorDiffingHelpers Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public static class BlazorDiffingHelpers Methods | Improve this Doc View Source BlazorAttributeFilter(AttributeComparisonSource, FilterDecision) Represents a diffing filter that removes all special Blazor attributes added by the / Bunit.Htmlizer . Declaration public static FilterDecision BlazorAttributeFilter(in AttributeComparisonSource attrSource, FilterDecision currentDecision) Parameters Type Name Description AngleSharp.Diffing.Core.AttributeComparisonSource attrSource AngleSharp.Diffing.Core.FilterDecision currentDecision Returns Type Description AngleSharp.Diffing.Core.FilterDecision"
  },
  "api/Bunit.Diffing.DiffMarkupFormatter.html": {
    "href": "api/Bunit.Diffing.DiffMarkupFormatter.html",
    "title": "Class DiffMarkupFormatter | bUnit",
    "keywords": "Class DiffMarkupFormatter A markup formatter, that skips any special Blazor attributes added by the Bunit.Htmlizer . Inheritance System.Object AngleSharp.Html.HtmlMarkupFormatter AngleSharp.Html.PrettyMarkupFormatter DiffMarkupFormatter Implements AngleSharp.IMarkupFormatter Inherited Members AngleSharp.Html.PrettyMarkupFormatter.Comment(AngleSharp.Dom.IComment) AngleSharp.Html.PrettyMarkupFormatter.Doctype(AngleSharp.Dom.IDocumentType) AngleSharp.Html.PrettyMarkupFormatter.Processing(AngleSharp.Dom.IProcessingInstruction) AngleSharp.Html.PrettyMarkupFormatter.Text(AngleSharp.Dom.ICharacterData) AngleSharp.Html.PrettyMarkupFormatter.OpenTag(AngleSharp.Dom.IElement, System.Boolean) AngleSharp.Html.PrettyMarkupFormatter.CloseTag(AngleSharp.Dom.IElement, System.Boolean) AngleSharp.Html.PrettyMarkupFormatter.Indentation AngleSharp.Html.PrettyMarkupFormatter.NewLine AngleSharp.Html.HtmlMarkupFormatter.LiteralText(AngleSharp.Dom.ICharacterData) AngleSharp.Html.HtmlMarkupFormatter.EscapeText(System.String) AngleSharp.Html.HtmlMarkupFormatter.GetIds(System.String, System.String) AngleSharp.Html.HtmlMarkupFormatter.XmlNamespaceLocalName(System.String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public class DiffMarkupFormatter : PrettyMarkupFormatter, IMarkupFormatter Constructors | Improve this Doc View Source DiffMarkupFormatter() Creates an instance of the DiffMarkupFormatter . Declaration public DiffMarkupFormatter() Fields | Improve this Doc View Source Instance Gets an instance of the DiffMarkupFormatter . Declaration public static readonly DiffMarkupFormatter Instance Field Value Type Description DiffMarkupFormatter Methods | Improve this Doc View Source Attribute(IAttr) Creates the string representation of the attribute. If it is a special Blazor renderer attribute, then it is ignored. Declaration protected override string Attribute(IAttr attr) Parameters Type Name Description AngleSharp.Dom.IAttr attr The attribute to serialize. Returns Type Description System.String The string representation. Overrides AngleSharp.Html.HtmlMarkupFormatter.Attribute(AngleSharp.Dom.IAttr) | Improve this Doc View Source ConvertToString(IAttr) Creates the string representation of the attribute. Declaration public string ConvertToString(IAttr attr) Parameters Type Name Description AngleSharp.Dom.IAttr attr The attribute to serialize. Returns Type Description System.String The string representation. Implements AngleSharp.IMarkupFormatter Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Diffing.html": {
    "href": "api/Bunit.Diffing.html",
    "title": "Namespace Bunit.Diffing | bUnit",
    "keywords": "Namespace Bunit.Diffing Classes BlazorDiffingHelpers Blazor Diffing Helpers DiffMarkupFormatter A markup formatter, that skips any special Blazor attributes added by the Bunit.Htmlizer . HtmlComparer Represents a test HTML comparer, that is configured to work with markup generated by the ITestRenderer and Bunit.Htmlizer classes."
  },
  "api/Bunit.Diffing.HtmlComparer.html": {
    "href": "api/Bunit.Diffing.HtmlComparer.html",
    "title": "Class HtmlComparer | bUnit",
    "keywords": "Class HtmlComparer Represents a test HTML comparer, that is configured to work with markup generated by the ITestRenderer and Bunit.Htmlizer classes. Inheritance System.Object HtmlComparer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Diffing Assembly : Bunit.Web.dll Syntax public sealed class HtmlComparer Constructors | Improve this Doc View Source HtmlComparer() Initializes a new instance of the HtmlComparer class. Declaration public HtmlComparer() Methods | Improve this Doc View Source Compare(INode, INode) Compares the controlHtml with the testHtml and returns any differences found. Declaration public IEnumerable<IDiff> Compare(INode controlHtml, INode testHtml) Parameters Type Name Description AngleSharp.Dom.INode controlHtml AngleSharp.Dom.INode testHtml Returns Type Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > | Improve this Doc View Source Compare(IEnumerable<INode>, IEnumerable<INode>) Compares the controlHtml with the testHtml and returns any differences found. Declaration public IEnumerable<IDiff> Compare(IEnumerable<INode> controlHtml, IEnumerable<INode> testHtml) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > controlHtml System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > testHtml Returns Type Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.DragEventDispatchExtensions.html": {
    "href": "api/Bunit.DragEventDispatchExtensions.html",
    "title": "Class DragEventDispatchExtensions | bUnit",
    "keywords": "Class DragEventDispatchExtensions Drag event dispatch helper extension methods. Inheritance System.Object DragEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class DragEventDispatchExtensions Methods | Improve this Doc View Source Drag(IElement, DragEventArgs) Raises the @ondrag event on element , passing the provided eventArgs to the event handler. Declaration public static void Drag(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Drag(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondrag event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void Drag(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragEnd(IElement, DragEventArgs) Raises the @ondragend event on element , passing the provided eventArgs to the event handler. Declaration public static void DragEnd(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragEnd(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragend event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragEnd(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragEnter(IElement, DragEventArgs) Raises the @ondragenter event on element , passing the provided eventArgs to the event handler. Declaration public static void DragEnter(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragEnter(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragenter event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragEnter(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragLeave(IElement, DragEventArgs) Raises the @ondragleave event on element , passing the provided eventArgs to the event handler. Declaration public static void DragLeave(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragLeave(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragleave event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragLeave(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragOver(IElement, DragEventArgs) Raises the @ondragover event on element , passing the provided eventArgs to the event handler. Declaration public static void DragOver(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragover event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source DragStart(IElement, DragEventArgs) Raises the @ondragstart event on element , passing the provided eventArgs to the event handler. Declaration public static void DragStart(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DragStart(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondragstart event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void DragStart(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer . | Improve this Doc View Source Drop(IElement, DragEventArgs) Raises the @ondrop event on element , passing the provided eventArgs to the event handler. Declaration public static void Drop(this IElement element, DragEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.DragEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Drop(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, DataTransfer) Raises the @ondrop event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.DragEventArgs object. Declaration public static void Drop(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, DataTransfer dataTransfer = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. Microsoft.AspNetCore.Components.Web.DataTransfer dataTransfer The data that underlies a drag-and-drop operation, known as the drag data store. See Microsoft.AspNetCore.Components.Web.DataTransfer ."
  },
  "api/Bunit.ElementNotFoundException.html": {
    "href": "api/Bunit.ElementNotFoundException.html",
    "title": "Class ElementNotFoundException | bUnit",
    "keywords": "Class ElementNotFoundException Represents a failure to find an element in the searched target using a css selector. Inheritance System.Object System.Exception ElementNotFoundException ElementRemovedFromDomException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Serializable] public class ElementNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ElementNotFoundException(SerializationInfo, StreamingContext) Declaration protected ElementNotFoundException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo System.Runtime.Serialization.StreamingContext streamingContext | Improve this Doc View Source ElementNotFoundException(String) Declaration public ElementNotFoundException(string cssSelector) Parameters Type Name Description System.String cssSelector | Improve this Doc View Source ElementNotFoundException(String, String) Declaration protected ElementNotFoundException(string message, string cssSelector) Parameters Type Name Description System.String message System.String cssSelector Properties | Improve this Doc View Source CssSelector The CSS selector used to search with. Declaration public string CssSelector { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.ElementRemovedFromDomException.html": {
    "href": "api/Bunit.ElementRemovedFromDomException.html",
    "title": "Class ElementRemovedFromDomException | bUnit",
    "keywords": "Class ElementRemovedFromDomException Represents an exception that is thrown when trying to access an element that was previous found in the DOM. Inheritance System.Object System.Exception ElementNotFoundException ElementRemovedFromDomException Implements System.Runtime.Serialization.ISerializable Inherited Members ElementNotFoundException.CssSelector ElementNotFoundException.GetObjectData(SerializationInfo, StreamingContext) System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class ElementRemovedFromDomException : ElementNotFoundException, ISerializable Constructors | Improve this Doc View Source ElementRemovedFromDomException(String) Declaration public ElementRemovedFromDomException(string cssSelector) Parameters Type Name Description System.String cssSelector Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.EnumerableExtensions.html": {
    "href": "api/Bunit.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | bUnit",
    "keywords": "Class EnumerableExtensions Helper methods for working with System.Collections.Generic.IEnumerable<T> Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions Assembly : Bunit.Core.dll Syntax public static class EnumerableExtensions Methods | Improve this Doc View Source IsNullOrEmpty<T>(IEnumerable<T>) Returns true if the numerable is null or empty. Declaration public static bool IsNullOrEmpty<T>(this IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> enumerable Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "api/Bunit.Extensions.html": {
    "href": "api/Bunit.Extensions.html",
    "title": "Namespace Bunit.Extensions | bUnit",
    "keywords": "Namespace Bunit.Extensions Classes EnumerableExtensions Helper methods for working with System.Collections.Generic.IEnumerable<T> LoggerHelperExtensions Helper extension methods for getting a logger. TestRendererExtensions Helper methods that make it easier to work directly with a ITestRenderer in bUnit web. TestServiceProviderExtensions Helper methods for correctly registering test dependencies"
  },
  "api/Bunit.Extensions.LoggerHelperExtensions.html": {
    "href": "api/Bunit.Extensions.LoggerHelperExtensions.html",
    "title": "Class LoggerHelperExtensions | bUnit",
    "keywords": "Class LoggerHelperExtensions Helper extension methods for getting a logger. Inheritance System.Object LoggerHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions Assembly : Bunit.Core.dll Syntax public static class LoggerHelperExtensions Methods | Improve this Doc View Source CreateLogger<TCategoryName>(IServiceProvider) Creates a logger from the Microsoft.Extensions.Logging.ILoggerFactory registered in the System.IServiceProvider . Declaration public static ILogger<TCategoryName> CreateLogger<TCategoryName>(this IServiceProvider services) Parameters Type Name Description System.IServiceProvider services The service to get the Microsoft.Extensions.Logging.ILoggerFactory from. Returns Type Description Microsoft.Extensions.Logging.ILogger <TCategoryName> The Microsoft.Extensions.Logging.ILogger<TCategoryName> Type Parameters Name Description TCategoryName The category for the logger."
  },
  "api/Bunit.Extensions.TestRendererExtensions.html": {
    "href": "api/Bunit.Extensions.TestRendererExtensions.html",
    "title": "Class TestRendererExtensions | bUnit",
    "keywords": "Class TestRendererExtensions Helper methods that make it easier to work directly with a ITestRenderer in bUnit web. Inheritance System.Object TestRendererExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions Assembly : Bunit.Web.dll Syntax public static class TestRendererExtensions Methods | Improve this Doc View Source RenderComponent<TComponent>(ITestRenderer, ComponentParameter[]) Renders a TComponent with the parameters parameters passed to it. Declaration public static IRenderedComponent<TComponent> RenderComponent<TComponent>(this ITestRenderer renderer, params ComponentParameter[] parameters) where TComponent : IComponent Parameters Type Name Description ITestRenderer renderer The renderer to use. ComponentParameter [] parameters The parameters to pass to the component. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> that provides access to the rendered component. Type Parameters Name Description TComponent The type of component to render. | Improve this Doc View Source RenderComponent<TComponent>(ITestRenderer, Action<ComponentParameterCollectionBuilder<TComponent>>) Renders a TComponent with the parameters build with the parameterBuilder passed to it. Declaration public static IRenderedComponent<TComponent> RenderComponent<TComponent>(this ITestRenderer renderer, Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder) where TComponent : IComponent Parameters Type Name Description ITestRenderer renderer The renderer to use. System.Action < ComponentParameterCollectionBuilder <TComponent>> parameterBuilder The a builder to create parameters to pass to the component. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponent<TComponent> that provides access to the rendered component. Type Parameters Name Description TComponent The type of component to render."
  },
  "api/Bunit.Extensions.TestServiceProviderExtensions.html": {
    "href": "api/Bunit.Extensions.TestServiceProviderExtensions.html",
    "title": "Class TestServiceProviderExtensions | bUnit",
    "keywords": "Class TestServiceProviderExtensions Helper methods for correctly registering test dependencies Inheritance System.Object TestServiceProviderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions Assembly : Bunit.Web.dll Syntax public static class TestServiceProviderExtensions Methods | Improve this Doc View Source AddDefaultTestContextServices(IServiceCollection, TestContextBase, BunitJSInterop) Registers the default services required by the web TestContext . Declaration public static IServiceCollection AddDefaultTestContextServices(this IServiceCollection services, TestContextBase testContext, BunitJSInterop jsInterop) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services TestContextBase testContext BunitJSInterop jsInterop Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/Bunit.Extensions.WaitForHelpers.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.html",
    "title": "Namespace Bunit.Extensions.WaitForHelpers | bUnit",
    "keywords": "Namespace Bunit.Extensions.WaitForHelpers Classes WaitForAssertionHelper Represents an async wait helper, that will wait for a specified time for an assertion to pass. WaitForFailedException Represents an exception thrown when the WaitForHelper does not complete successfully. WaitForHelper Represents a helper class that can wait for a render notifications from a IRenderedFragmentBase type, until a specific timeout is reached. WaitForStateHelper Represents an async wait helper, that will wait for a specified time for a state predicate to pass."
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForAssertionHelper.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForAssertionHelper.html",
    "title": "Class WaitForAssertionHelper | bUnit",
    "keywords": "Class WaitForAssertionHelper Represents an async wait helper, that will wait for a specified time for an assertion to pass. Inheritance System.Object WaitForHelper WaitForAssertionHelper Implements System.IDisposable Inherited Members WaitForHelper.CheckThrowErrorMessage WaitForHelper.WaitTask WaitForHelper.Dispose() WaitForHelper.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public class WaitForAssertionHelper : WaitForHelper, IDisposable Constructors | Improve this Doc View Source WaitForAssertionHelper(IRenderedFragmentBase, Action, Nullable<TimeSpan>) Creates an instance of the WaitForAssertionHelper type, which will until the provided assertion passes (i.e. does not throw an exception), or the timeout is reached (default is one second). The assertion is attempted initially, and then each time the renderedFragment renders. Declaration public WaitForAssertionHelper(IRenderedFragmentBase renderedFragment, Action assertion, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The rendered fragment to wait for renders from and assert against. System.Action assertion The verification or assertion to perform. System.Nullable < System.TimeSpan > timeout The maximum time to attempt the verification. Properties | Improve this Doc View Source StopWaitingOnCheckException Declaration protected override bool StopWaitingOnCheckException { get; } Property Value Type Description System.Boolean Overrides WaitForHelper.StopWaitingOnCheckException | Improve this Doc View Source TimeoutErrorMessage Declaration protected override string TimeoutErrorMessage { get; } Property Value Type Description System.String Overrides WaitForHelper.TimeoutErrorMessage Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForFailedException.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForFailedException.html",
    "title": "Class WaitForFailedException | bUnit",
    "keywords": "Class WaitForFailedException Represents an exception thrown when the WaitForHelper does not complete successfully. Inheritance System.Object System.Exception WaitForFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax [Serializable] public sealed class WaitForFailedException : Exception, ISerializable Constructors | Improve this Doc View Source WaitForFailedException(String, Exception) Creates an instance of the WaitForFailedException . Declaration public WaitForFailedException(string errorMessage, Exception innerException = null) Parameters Type Name Description System.String errorMessage System.Exception innerException Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForHelper.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForHelper.html",
    "title": "Class WaitForHelper | bUnit",
    "keywords": "Class WaitForHelper Represents a helper class that can wait for a render notifications from a IRenderedFragmentBase type, until a specific timeout is reached. Inheritance System.Object WaitForHelper WaitForAssertionHelper WaitForStateHelper Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public abstract class WaitForHelper : IDisposable Constructors | Improve this Doc View Source WaitForHelper(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) Creates an instance of the WaitForHelper type. Declaration protected WaitForHelper(IRenderedFragmentBase renderedFragment, Func<bool> completeChecker, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment System.Func < System.Boolean > completeChecker System.Nullable < System.TimeSpan > timeout Properties | Improve this Doc View Source CheckThrowErrorMessage Gets the error message passed to the user when the wait for checker throws an exception. Only used if StopWaitingOnCheckException is true. Declaration protected virtual string CheckThrowErrorMessage { get; } Property Value Type Description System.String | Improve this Doc View Source StopWaitingOnCheckException Gets whether to continue waiting if the wait condition checker throws. Declaration protected abstract bool StopWaitingOnCheckException { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TimeoutErrorMessage Gets the error message passed to the user when the wait for helper times out. Declaration protected virtual string TimeoutErrorMessage { get; } Property Value Type Description System.String | Improve this Doc View Source WaitTask Gets the task that will complete successfully if the check passed before the timeout was reached. The task will complete with an WaitForFailedException exception if the timeout was reached without the check passing. Declaration public Task WaitTask { get; } Property Value Type Description System.Threading.Tasks.Task Methods | Improve this Doc View Source Dispose() Disposes the wait helper and sets the WaitTask to canceled, if it is not already in one of the other completed states. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes of the wait task and related logic. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Set to true if called from Dispose() , false if called from a finalizer.f Remarks The disposing parameter should be false when called from a finalizer, and true when called from the Dispose() method. In other words, it is true when deterministically called and false when non-deterministically called. Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Extensions.WaitForHelpers.WaitForStateHelper.html": {
    "href": "api/Bunit.Extensions.WaitForHelpers.WaitForStateHelper.html",
    "title": "Class WaitForStateHelper | bUnit",
    "keywords": "Class WaitForStateHelper Represents an async wait helper, that will wait for a specified time for a state predicate to pass. Inheritance System.Object WaitForHelper WaitForStateHelper Implements System.IDisposable Inherited Members WaitForHelper.WaitTask WaitForHelper.Dispose() WaitForHelper.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Extensions.WaitForHelpers Assembly : Bunit.Core.dll Syntax public class WaitForStateHelper : WaitForHelper, IDisposable Constructors | Improve this Doc View Source WaitForStateHelper(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) Creates an instance of the WaitForStateHelper type, which will wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderedFragment renders. Declaration public WaitForStateHelper(IRenderedFragmentBase renderedFragment, Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The render fragment or component to attempt to verify state against. System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which must returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition WaitForFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details. Properties | Improve this Doc View Source CheckThrowErrorMessage Declaration protected override string CheckThrowErrorMessage { get; } Property Value Type Description System.String Overrides WaitForHelper.CheckThrowErrorMessage | Improve this Doc View Source StopWaitingOnCheckException Declaration protected override bool StopWaitingOnCheckException { get; } Property Value Type Description System.Boolean Overrides WaitForHelper.StopWaitingOnCheckException | Improve this Doc View Source TimeoutErrorMessage Declaration protected override string TimeoutErrorMessage { get; } Property Value Type Description System.String Overrides WaitForHelper.TimeoutErrorMessage Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Fixture.html": {
    "href": "api/Bunit.Fixture.html",
    "title": "Class Fixture | bUnit",
    "keywords": "Class Fixture Inheritance System.Object TestContextBase RazorTestBase FixtureBase < Fixture > Fixture Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members FixtureBase<Fixture>.DisplayName FixtureBase<Fixture>.ChildContent FixtureBase<Fixture>.Setup FixtureBase<Fixture>.SetupAsync FixtureBase<Fixture>.Test FixtureBase<Fixture>.TestAsync FixtureBase<Fixture>.SetParametersAsync(ParameterView) FixtureBase<Fixture>.Validate() FixtureBase<Fixture>.Run(Fixture) RazorTestBase.IsRunning RazorTestBase.Description RazorTestBase.Skip RazorTestBase.Timeout RazorTestBase.RunTest() RazorTestBase.IComponent.Attach(RenderHandle) RazorTestBase.TryRun<T>(Action<T>, T) RazorTestBase.TryRunAsync<T>(Func<T, Task>, T) TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.Dispose() TestContextBase.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class Fixture : FixtureBase<Fixture>, IDisposable, IComponent Constructors | Improve this Doc View Source Fixture() Creates an instance of the Fixture type. Declaration public Fixture() Properties | Improve this Doc View Source JSInterop Gets bUnits JSInterop, that allows setting up handlers for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) invocations that components under tests will issue during testing. It also makes it possible to verify that the invocations has happened as expected. Declaration public BunitJSInterop JSInterop { get; } Property Value Type Description BunitJSInterop Methods | Improve this Doc View Source GetComponentUnderTest() Gets (and renders) the markup/component defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetComponentUnderTest() Returns Type Description IRenderedFragment A IRenderedFragmentBase | Improve this Doc View Source GetComponentUnderTest<TComponent>() Gets (and renders) the component of type TComponent defined in the <Fixture><ComponentUnderTest>...<ComponentUnderTest/><Fixture/> element. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetComponentUnderTest<TComponent>() where TComponent : IComponent Returns Type Description IRenderedComponent <TComponent> A IRenderedComponentBase<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source GetFragment(String) Gets (and renders) the markup/component defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedFragment GetFragment(string id = null) Parameters Type Name Description System.String id The id of the fragment where the HTML/component is defined in Razor syntax. Returns Type Description IRenderedFragment A IRenderedFragmentBase | Improve this Doc View Source GetFragment<TComponent>(String) Gets (and renders) the component of type TComponent defined in the <Fixture><Fragment id=\" id \" >...<Fragment/><Fixture/> element. If id is null/not provided, the component defined in the first <Fragment/> in the <Fixture/> element is returned. The HTML/component is only rendered the first this method is called. Declaration public IRenderedComponent<TComponent> GetFragment<TComponent>(string id = null) where TComponent : IComponent Parameters Type Name Description System.String id The id of the fragment where the component is defined in Razor syntax. Returns Type Description IRenderedComponent <TComponent> A IRenderedComponentBase<TComponent> Type Parameters Name Description TComponent The type of component to render | Improve this Doc View Source Run() Declaration protected override Task Run() Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.Run() Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.FocusEventDispatchExtensions.html": {
    "href": "api/Bunit.FocusEventDispatchExtensions.html",
    "title": "Class FocusEventDispatchExtensions | bUnit",
    "keywords": "Class FocusEventDispatchExtensions Focus event dispatch helper extension methods. Inheritance System.Object FocusEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class FocusEventDispatchExtensions Methods | Improve this Doc View Source Blur(IElement, FocusEventArgs) Raises the @onblur event on element , passing the provided event arguments to the event handler. Declaration public static void Blur(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to pass the event handler. | Improve this Doc View Source Blur(IElement, String) Raises the @onblur event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void Blur(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source Focus(IElement, FocusEventArgs) Raises the @onfocus event on element , passing the provided event arguments to the event handler. Declaration public static void Focus(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to pass the event handler. | Improve this Doc View Source Focus(IElement, String) Raises the @onfocus event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void Focus(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusIn(IElement, FocusEventArgs) Raises the @onfocusin event on element , passing the provided event arguments to the event handler. Declaration public static void FocusIn(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to pass the event handler. | Improve this Doc View Source FocusIn(IElement, String) Raises the @onfocusin event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void FocusIn(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event. | Improve this Doc View Source FocusOut(IElement, FocusEventArgs) Raises the @onfocusout event on element , passing the provided event arguments to the event handler. Declaration public static void FocusOut(this IElement element, FocusEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.FocusEventArgs eventArgs The event arguments to pass the event handler. | Improve this Doc View Source FocusOut(IElement, String) Raises the @onfocusout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.FocusEventArgs object Declaration public static void FocusOut(this IElement element, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String type The type of the event."
  },
  "api/Bunit.Fragment.html": {
    "href": "api/Bunit.Fragment.html",
    "title": "Class Fragment | bUnit",
    "keywords": "Class Fragment Represents a component that can be added inside a fixture, whose content can be accessed in Razor-based test. Inheritance System.Object FragmentBase Fragment Implements Microsoft.AspNetCore.Components.IComponent Inherited Members FragmentBase.ChildContent FragmentBase.Attach(RenderHandle) FragmentBase.SetParametersAsync(ParameterView) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public class Fragment : FragmentBase, IComponent Properties | Improve this Doc View Source Id Gets or sets the id of the fragment. Declaration [Parameter] public string Id { get; set; } Property Value Type Description System.String Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.GeneralEventDispatchExtensions.html": {
    "href": "api/Bunit.GeneralEventDispatchExtensions.html",
    "title": "Class GeneralEventDispatchExtensions | bUnit",
    "keywords": "Class GeneralEventDispatchExtensions General event dispatch helper extension methods. Inheritance System.Object GeneralEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class GeneralEventDispatchExtensions Methods | Improve this Doc View Source Activate(IElement) Raises the @onactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Activate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeActivate(IElement) Raises the @onbeforeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeActivate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source BeforeDeactivate(IElement) Raises the @onbeforedeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void BeforeDeactivate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Deactivate(IElement) Raises the @ondeactivate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Deactivate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Ended(IElement) Raises the @onended event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Ended(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source FullscreenChange(IElement) Raises the @onfullscreenchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void FullscreenChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source FullscreenError(IElement) Raises the @onfullscreenerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void FullscreenError(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source LoadedData(IElement) Raises the @onloadeddata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void LoadedData(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source LoadedMetadata(IElement) Raises the @onloadedmetadata event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void LoadedMetadata(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PointerlockChange(IElement) Raises the @onpointerlockchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void PointerlockChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source PointerlockError(IElement) Raises the @onpointerlockerror event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void PointerlockError(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source ReadystateChange(IElement) Raises the @onreadystatechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void ReadystateChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Scroll(IElement) Raises the @onscroll event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Scroll(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on."
  },
  "api/Bunit.html": {
    "href": "api/Bunit.html",
    "title": "Namespace Bunit | bUnit",
    "keywords": "Namespace Bunit Classes BlazorExtensions Extensions for Blazor types. BunitJSInterop Represents an bUnit's implementation of Blazor's JSInterop. ClipboardEventDispatchExtensions Clipboard event dispatch helper extension methods. CompareToExtensions Extension methods that allows different rendered fragments to be compared to others or strings. ComponentParameterCollection A collection for ComponentParameter ComponentParameterCollectionBuilder<TComponent> A ComponentParameterCollection builder for a specific TComponent component under test. ComponentParameterFactory ComponentParameter factory methods. ComponentTestFixture Base class for test classes that contains Razor component tests. ComponentUnderTest Represents a component that can be added inside a RazorTestBase , where a component under test can be defined as the child content. DiffAssertExtensions A collection of AngleSharp.Diffing.Core.IDiff assert extensions and generic assert extensions DiffChangeAssertException Represents an diff change assertion that has failed. DragEventDispatchExtensions Drag event dispatch helper extension methods. ElementNotFoundException Represents a failure to find an element in the searched target using a css selector. ElementRemovedFromDomException Represents an exception that is thrown when trying to access an element that was previous found in the DOM. Fixture FocusEventDispatchExtensions Focus event dispatch helper extension methods. Fragment Represents a component that can be added inside a fixture, whose content can be accessed in Razor-based test. GeneralEventDispatchExtensions General event dispatch helper extension methods. HtmlEqualException Represents an differences between pieces of markup. InputEventDispatchExtensions Input event dispatch helper extension methods. JSInvokeCountExpectedException Represents a number of unexpected invocation to a BunitJSInterop . JSRuntimeAssertExtensions Assert extensions for JSRuntimeMock JSRuntimeUnhandledInvocationException Exception use to indicate that an invocation was received by the BunitJSInterop running in Strict mode, which didn't contain a matching invocation handler. Key Representation of keyboard key that can be argument of keyboard events. KeyboardEventDispatchExtensions Keyboard event dispatch helper extension methods. MarkupMatchesAssertExtensions Assert helpers for comparing markup MediaEventDispatchExtensions Media event dispatch helper extension methods. MissingEventHandlerException Represents an exception that is thrown when triggering an event handler failed because it wasn't available on the targeted AngleSharp.Dom.IElement . MockJSRuntimeExtensions Helper methods for registering the MockJSRuntime with a TestServiceProvider . MouseEventDispatchExtensions Mouse event dispatch helper extension methods. NodePrintExtensions Helper methods for pretty printing markup from AngleSharp.Dom.INode and AngleSharp.Dom.INodeList . PointerEventDispatchExtensions Pointer event dispatch helper extension methods. ProgressEventDispatchExtensions Pointer event dispatch helper extension methods. RenderedComponentInvokeAsyncExtensions InvokeAsync extensions methods on IRenderedComponentBase<TComponent> . RenderedComponentRenderExtensions Re-render extension methods, optionally with new parameters, for IRenderedComponentBase<TComponent> . RenderedFragmentExtensions Helper methods for querying IRenderedFragment . RenderedFragmentWaitForHelperExtensions Helper methods dealing with async rendering during testing. ShouldBeAdditionAssertExtensions A set of addition diff assert extensions ShouldBeRemovalAssertExtensions A set of removal diff assert extensions ShouldBeTextChangeAssertExtensions Verification helpers for text SnapshotTest A component used to create snapshot tests. Snapshot tests takes two child inputs, a TestInput section and a ExpectedOutput section. It then compares the result of rendering both using semantic HTML comparison. TestComponentBase Base test class/test runner, that runs Fixtures defined in razor files. TestContext A test context is a factory that makes it possible to create components under tests. TestContextBase A test context is a factory that makes it possible to create components under tests. TestServiceProvider Represents a System.IServiceProvider and Microsoft.Extensions.DependencyInjection.IServiceCollection as a single type used for test purposes. TouchEventDispatchExtensions Pointer event dispatch helper extension methods. TriggerEventDispatchExtensions General event dispatch helper extension methods. XunitLoggerExtensions Helper method for registering the xUnit test logger. Structs ComponentParameter Represents a single parameter supplied to an Microsoft.AspNetCore.Components.IComponent component under test. JSRuntimeInvocation Represents an invocation of JavaScript via the JSRuntime Mock Interfaces IRefreshableElementCollection<T> Represents a AngleSharp.Dom.IElement collection, which queries and finds its elements in an IRenderedFragmentBase , based on a CSS selector. The collection can be refreshed either manually or automatically. IRenderedComponent<TComponent> IRenderedComponentBase<TComponent> Represents a rendered component-under-test. IRenderedFragment Represents a rendered fragment. IRenderedFragmentBase Represents a rendered Microsoft.AspNetCore.Components.RenderFragment . Enums JSRuntimeMode The execution mode of the BunitJSInterop . Delegates InvocationMatcher Represents a invocation matcher / predicate, that is used to determine if a JSRuntimeInvocationHandler<TResult> matches a specific JSRuntimeInvocation ."
  },
  "api/Bunit.HtmlEqualException.html": {
    "href": "api/Bunit.HtmlEqualException.html",
    "title": "Class HtmlEqualException | bUnit",
    "keywords": "Class HtmlEqualException Represents an differences between pieces of markup. Inheritance System.Object System.Exception ActualExpectedAssertException HtmlEqualException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class HtmlEqualException : ActualExpectedAssertException, ISerializable Constructors | Improve this Doc View Source HtmlEqualException(IEnumerable<IDiff>, IMarkupFormattable, IMarkupFormattable, String) Creates an instance of the HtmlEqualException type. Declaration public HtmlEqualException(IEnumerable<IDiff> diffs, IMarkupFormattable expected, IMarkupFormattable actual, string userMessage) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs AngleSharp.IMarkupFormattable expected AngleSharp.IMarkupFormattable actual System.String userMessage Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.InputEventDispatchExtensions.html": {
    "href": "api/Bunit.InputEventDispatchExtensions.html",
    "title": "Class InputEventDispatchExtensions | bUnit",
    "keywords": "Class InputEventDispatchExtensions Input event dispatch helper extension methods. Inheritance System.Object InputEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class InputEventDispatchExtensions Methods | Improve this Doc View Source Change(IElement, ChangeEventArgs) Raises the @onchange event on element , passing the provided eventArgs to the event handler. Declaration public static void Change(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Change(IElement, Object) Raises the @onchange event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.ChangeEventArgs object Declaration public static void Change(this IElement element, object value) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Object value The new value | Improve this Doc View Source Input(IElement) Raises the @oninput event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Input(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Input(IElement, ChangeEventArgs) Raises the @oninput event on element , passing the provided eventArgs to the event handler. Declaration public static void Input(this IElement element, ChangeEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Input(IElement, String) Raises the @oninput event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.ChangeEventArgs object Declaration public static void Input(this IElement element, string value) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String value The new value | Improve this Doc View Source Invalid(IElement) Raises the @oninvalid event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Invalid(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Reset(IElement) Raises the @onreset event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Reset(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Select(IElement) Raises the @onselect event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Select(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SelectionChange(IElement) Raises the @onselectionchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void SelectionChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source SelectStart(IElement) Raises the @onselectstart event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void SelectStart(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Submit(IElement) Raises the @onsubmit event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Submit(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on."
  },
  "api/Bunit.InvocationMatcher.html": {
    "href": "api/Bunit.InvocationMatcher.html",
    "title": "Delegate InvocationMatcher | bUnit",
    "keywords": "Delegate InvocationMatcher Represents a invocation matcher / predicate, that is used to determine if a JSRuntimeInvocationHandler<TResult> matches a specific JSRuntimeInvocation . Namespace : Bunit Assembly : Bunit.Web.dll Syntax public delegate bool InvocationMatcher(JSRuntimeInvocation invocation); Parameters Type Name Description JSRuntimeInvocation invocation The invocation to match against. Returns Type Description System.Boolean True if the JSRuntimeInvocationHandler<TResult> can handle the invocation, false otherwise. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRefreshableElementCollection-1.html": {
    "href": "api/Bunit.IRefreshableElementCollection-1.html",
    "title": "Interface IRefreshableElementCollection<T> | bUnit",
    "keywords": "Interface IRefreshableElementCollection<T> Represents a AngleSharp.Dom.IElement collection, which queries and finds its elements in an IRenderedFragmentBase , based on a CSS selector. The collection can be refreshed either manually or automatically. Inherited Members System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32] System.Collections.Generic.IReadOnlyCollection<T>.Count System.Collections.Generic.IEnumerable<T>.GetEnumerator() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public interface IRefreshableElementCollection<out T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : IElement Type Parameters Name Description T The type of AngleSharp.Dom.IElement in the collection. Properties | Improve this Doc View Source EnableAutoRefresh Gets or sets whether the collection automatically refreshes when the IRenderedFragmentBase changes. Declaration bool EnableAutoRefresh { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Refresh() Trigger a refresh of the elements in the collection, by querying the rendered fragments DOM tree. Declaration void Refresh() Extension Methods EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedComponent-1.html": {
    "href": "api/Bunit.IRenderedComponent-1.html",
    "title": "Interface IRenderedComponent<TComponent> | bUnit",
    "keywords": "Interface IRenderedComponent<TComponent> Inherited Members IRenderedComponentBase<TComponent>.Instance IRenderedFragment.OnMarkupUpdated IRenderedFragment.Markup IRenderedFragment.Nodes IRenderedFragment.GetChangesSinceFirstRender() IRenderedFragment.GetChangesSinceSnapshot() IRenderedFragment.SaveSnapshot() IRenderedFragmentBase.RenderCount IRenderedFragmentBase.IsDisposed IRenderedFragmentBase.ComponentId IRenderedFragmentBase.OnRender(RenderEvent) IRenderedFragmentBase.Services IRenderedFragmentBase.OnAfterRender System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public interface IRenderedComponent<out TComponent> : IRenderedComponentBase<TComponent>, IRenderedFragment, IRenderedFragmentBase, IDisposable where TComponent : IComponent Type Parameters Name Description TComponent Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, RenderFragment, String) RenderedFragmentExtensions.Find(IRenderedFragment, String) RenderedFragmentExtensions.FindAll(IRenderedFragment, String, Boolean) RenderedFragmentExtensions.FindComponent<TComponent>(IRenderedFragment) RenderedFragmentExtensions.FindComponents<TComponent>(IRenderedFragment)"
  },
  "api/Bunit.IRenderedComponentBase-1.html": {
    "href": "api/Bunit.IRenderedComponentBase-1.html",
    "title": "Interface IRenderedComponentBase<TComponent> | bUnit",
    "keywords": "Interface IRenderedComponentBase<TComponent> Represents a rendered component-under-test. Inherited Members IRenderedFragmentBase.RenderCount IRenderedFragmentBase.IsDisposed IRenderedFragmentBase.ComponentId IRenderedFragmentBase.OnRender(RenderEvent) IRenderedFragmentBase.Services IRenderedFragmentBase.OnAfterRender System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public interface IRenderedComponentBase<out TComponent> : IRenderedFragmentBase, IDisposable where TComponent : IComponent Type Parameters Name Description TComponent The type of the component under test Properties | Improve this Doc View Source Instance Gets the component under test Declaration TComponent Instance { get; } Property Value Type Description TComponent Extension Methods RenderedComponentInvokeAsyncExtensions.InvokeAsync<TComponent>(IRenderedComponentBase<TComponent>, Action) RenderedComponentInvokeAsyncExtensions.InvokeAsync<TComponent>(IRenderedComponentBase<TComponent>, Func<Task>) RenderedComponentRenderExtensions.Render<TComponent>(IRenderedComponentBase<TComponent>) RenderedComponentRenderExtensions.SetParametersAndRender<TComponent>(IRenderedComponentBase<TComponent>, ParameterView) RenderedComponentRenderExtensions.SetParametersAndRender<TComponent>(IRenderedComponentBase<TComponent>, ComponentParameter[]) RenderedComponentRenderExtensions.SetParametersAndRender<TComponent>(IRenderedComponentBase<TComponent>, Action<ComponentParameterCollectionBuilder<TComponent>>) RenderedFragmentWaitForHelperExtensions.WaitForState(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.IRenderedFragment.html": {
    "href": "api/Bunit.IRenderedFragment.html",
    "title": "Interface IRenderedFragment | bUnit",
    "keywords": "Interface IRenderedFragment Represents a rendered fragment. Inherited Members IRenderedFragmentBase.RenderCount IRenderedFragmentBase.IsDisposed IRenderedFragmentBase.ComponentId IRenderedFragmentBase.OnRender(RenderEvent) IRenderedFragmentBase.Services IRenderedFragmentBase.OnAfterRender System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public interface IRenderedFragment : IRenderedFragmentBase, IDisposable Properties | Improve this Doc View Source Markup Gets the HTML markup from the rendered fragment/component. Declaration string Markup { get; } Property Value Type Description System.String | Improve this Doc View Source Nodes Gets the AngleSharp AngleSharp.Dom.INodeList based on the HTML markup from the rendered fragment/component. Declaration INodeList Nodes { get; } Property Value Type Description AngleSharp.Dom.INodeList Methods | Improve this Doc View Source GetChangesSinceFirstRender() Performs a comparison of the markup produced by the initial rendering of the fragment or component under test with the current rendering of the fragment or component under test. Declaration IReadOnlyList<IDiff> GetChangesSinceFirstRender() Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > A list of differences found. | Improve this Doc View Source GetChangesSinceSnapshot() Performs a comparison of the markup produced by the rendering of the fragment or component under test at the time the SaveSnapshot() was called with the current rendering of the fragment or component under test. Declaration IReadOnlyList<IDiff> GetChangesSinceSnapshot() Returns Type Description System.Collections.Generic.IReadOnlyList < AngleSharp.Diffing.Core.IDiff > A list of differences found. | Improve this Doc View Source SaveSnapshot() Saves the markup from the current rendering of the fragment or component under test. Use the method GetChangesSinceSnapshot() later to get the difference between the snapshot and the rendered markup at that time. Declaration void SaveSnapshot() Events | Improve this Doc View Source OnMarkupUpdated An event that is raised after the markup of the IRenderedFragmentBase is updated. Declaration event Action OnMarkupUpdated Event Type Type Description System.Action Extension Methods CompareToExtensions.CompareTo(IRenderedFragment, String) CompareToExtensions.CompareTo(IRenderedFragment, IRenderedFragment) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, String, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, IRenderedFragment, String) MarkupMatchesAssertExtensions.MarkupMatches(IRenderedFragment, RenderFragment, String) RenderedFragmentExtensions.Find(IRenderedFragment, String) RenderedFragmentExtensions.FindAll(IRenderedFragment, String, Boolean) RenderedFragmentExtensions.FindComponent<TComponent>(IRenderedFragment) RenderedFragmentExtensions.FindComponents<TComponent>(IRenderedFragment)"
  },
  "api/Bunit.IRenderedFragmentBase.html": {
    "href": "api/Bunit.IRenderedFragmentBase.html",
    "title": "Interface IRenderedFragmentBase | bUnit",
    "keywords": "Interface IRenderedFragmentBase Represents a rendered Microsoft.AspNetCore.Components.RenderFragment . Inherited Members System.IDisposable.Dispose() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public interface IRenderedFragmentBase : IDisposable Properties | Improve this Doc View Source ComponentId Gets the id of the rendered component or fragment. Declaration int ComponentId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsDisposed Gets whether the rendered component or fragment has been disposed by the ITestRenderer . Declaration bool IsDisposed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source RenderCount Gets the total number times the fragment has been through its render life-cycle. Declaration int RenderCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Services Gets the System.IServiceProvider used when rendering the component. Declaration IServiceProvider Services { get; } Property Value Type Description System.IServiceProvider Methods | Improve this Doc View Source OnRender(RenderEvent) Called by the owning ITestRenderer when it finishes a render. Declaration void OnRender(RenderEvent renderEvent) Parameters Type Name Description RenderEvent renderEvent A RenderEvent that represents a render. Events | Improve this Doc View Source OnAfterRender Adds or removes an event handler that will be triggered after each render of this IRenderedFragmentBase . Declaration event Action OnAfterRender Event Type Type Description System.Action Extension Methods RenderedFragmentWaitForHelperExtensions.WaitForState(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSInterop.BunitJSInteropSetupExtensions.html": {
    "href": "api/Bunit.JSInterop.BunitJSInteropSetupExtensions.html",
    "title": "Class BunitJSInteropSetupExtensions | bUnit",
    "keywords": "Class BunitJSInteropSetupExtensions Helper methods for creating invocation handlers and adding the to a BunitJSInterop . Inheritance System.Object BunitJSInteropSetupExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.JSInterop Assembly : Bunit.Web.dll Syntax public static class BunitJSInteropSetupExtensions Methods | Improve this Doc View Source Setup<TResult>(BunitJSInterop) Configure a catch all JSInterop invocation handler for a specific return type. This will match only on the TResult , and any arguments passed to Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) . Declaration public static JSRuntimeInvocationHandler<TResult> Setup<TResult>(this BunitJSInterop jsInterop) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. Returns Type Description JSRuntimeInvocationHandler <TResult> A JSRuntimeInvocationHandler<TResult> . Type Parameters Name Description TResult The result type of the invocation. | Improve this Doc View Source Setup<TResult>(BunitJSInterop, String, InvocationMatcher) Configure a JSInterop invocation handler with the identifier and arguments passing the invocationMatcher test. Declaration public static JSRuntimeInvocationHandler<TResult> Setup<TResult>(this BunitJSInterop jsInterop, string identifier, InvocationMatcher invocationMatcher) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. System.String identifier The identifier to setup a response for. InvocationMatcher invocationMatcher A matcher that is passed an JSRuntimeInvocation associated with the identifier . If it returns true the invocation is matched. Returns Type Description JSRuntimeInvocationHandler <TResult> A JSRuntimeInvocationHandler<TResult> . Type Parameters Name Description TResult The result type of the invocation. | Improve this Doc View Source Setup<TResult>(BunitJSInterop, String, Object[]) Configure a JSInterop invocation handler with the identifier and arguments . Declaration public static JSRuntimeInvocationHandler<TResult> Setup<TResult>(this BunitJSInterop jsInterop, string identifier, params object[] arguments) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. System.String identifier The identifier to setup a response for. System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JSRuntimeInvocationHandler <TResult> A JSRuntimeInvocationHandler<TResult> . Type Parameters Name Description TResult | Improve this Doc View Source SetupVoid(BunitJSInterop) Configure a catch all JSInterop invocation handler, that should not receive any result. Declaration public static JSRuntimeInvocationHandler SetupVoid(this BunitJSInterop jsInterop) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. Returns Type Description JSRuntimeInvocationHandler A JSRuntimeInvocationHandler . | Improve this Doc View Source SetupVoid(BunitJSInterop, String, InvocationMatcher) Configure a JSInterop invocation handler with the identifier and arguments passing the invocationMatcher test, that should not receive any result. Declaration public static JSRuntimeInvocationHandler SetupVoid(this BunitJSInterop jsInterop, string identifier, InvocationMatcher invocationMatcher) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. System.String identifier The identifier to setup a response for. InvocationMatcher invocationMatcher A matcher that is passed an JSRuntimeInvocation associated with the identifier . If it returns true the invocation is matched. Returns Type Description JSRuntimeInvocationHandler A JSRuntimeInvocationHandler . | Improve this Doc View Source SetupVoid(BunitJSInterop, String, Object[]) Configure a JSInterop invocation handler with the identifier and arguments , that should not receive any result. Declaration public static JSRuntimeInvocationHandler SetupVoid(this BunitJSInterop jsInterop, string identifier, params object[] arguments) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. System.String identifier The identifier to setup a response for. System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JSRuntimeInvocationHandler A JSRuntimeInvocationHandler . | Improve this Doc View Source TryGetInvokeHandler<TResult>(BunitJSInterop, String, Object[]) Looks through the registered handlers and returns the latest registered that can handle the provided identifier and arguments , and that will return TResult . Declaration public static JSRuntimeInvocationHandler<TResult> TryGetInvokeHandler<TResult>(this BunitJSInterop jsInterop, string identifier, params object[] arguments) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. System.String identifier The identifier the handler should match with. System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JSRuntimeInvocationHandler <TResult> Returns the JSRuntimeInvocationHandler<TResult> or null if no one is found. Type Parameters Name Description TResult | Improve this Doc View Source TryGetInvokeVoidHandler(BunitJSInterop, String, Object[]) Looks through the registered handlers and returns the latest registered that can handle the provided identifier and arguments , and that returns a \"void\" result. Declaration public static JSRuntimeInvocationHandler TryGetInvokeVoidHandler(this BunitJSInterop jsInterop, string identifier, params object[] arguments) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to setup the invocation handling with. System.String identifier The identifier the handler should match with. System.Object [] arguments The arguments that an invocation to identifier should match. Returns Type Description JSRuntimeInvocationHandler Returns the JSRuntimeInvocationHandler or null if no one is found."
  },
  "api/Bunit.JSInterop.html": {
    "href": "api/Bunit.JSInterop.html",
    "title": "Namespace Bunit.JSInterop | bUnit",
    "keywords": "Namespace Bunit.JSInterop Classes BunitJSInteropSetupExtensions Helper methods for creating invocation handlers and adding the to a BunitJSInterop . JSRuntimeInvocationDictionary Represents a dictionary of JSRuntimeInvocation , keyed by their identifier."
  },
  "api/Bunit.JSInterop.InvocationHandlers.html": {
    "href": "api/Bunit.JSInterop.InvocationHandlers.html",
    "title": "Namespace Bunit.JSInterop.InvocationHandlers | bUnit",
    "keywords": "Namespace Bunit.JSInterop.InvocationHandlers Classes JSRuntimeInvocationHandler Represents a handler for an invocation of a JavaScript function which returns nothing, with specific arguments. JSRuntimeInvocationHandler<TResult> Represents a handler for an invocation of a JavaScript function with specific arguments and returns TResult . JSRuntimeInvocationHandlerBase<TResult> Represents an invocation handler for JSRuntimeInvocation instances."
  },
  "api/Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandler.html": {
    "href": "api/Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandler.html",
    "title": "Class JSRuntimeInvocationHandler | bUnit",
    "keywords": "Class JSRuntimeInvocationHandler Represents a handler for an invocation of a JavaScript function which returns nothing, with specific arguments. Inheritance System.Object JSRuntimeInvocationHandlerBase < System.Object > JSRuntimeInvocationHandler Inherited Members JSRuntimeInvocationHandlerBase<Object>.CatchAllIdentifier JSRuntimeInvocationHandlerBase<Object>.IsCatchAllHandler JSRuntimeInvocationHandlerBase<Object>.Identifier JSRuntimeInvocationHandlerBase<Object>.Invocations JSRuntimeInvocationHandlerBase<Object>.SetCanceledBase() JSRuntimeInvocationHandlerBase<Object>.SetExceptionBase<TException>(TException) JSRuntimeInvocationHandlerBase<Object>.SetResultBase(Object) JSRuntimeInvocationHandlerBase<Object>.Handle(JSRuntimeInvocation) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.JSInterop.InvocationHandlers Assembly : Bunit.Web.dll Syntax public class JSRuntimeInvocationHandler : JSRuntimeInvocationHandlerBase<object> Constructors | Improve this Doc View Source JSRuntimeInvocationHandler(String, InvocationMatcher) Creates an instance of a JSRuntimeInvocationHandler type. Declaration protected JSRuntimeInvocationHandler(string identifier, InvocationMatcher matcher) Parameters Type Name Description System.String identifier InvocationMatcher matcher Properties | Improve this Doc View Source IsVoidResultHandler Declaration public override sealed bool IsVoidResultHandler { get; } Property Value Type Description System.Boolean Overrides Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandlerBase<System.Object>.IsVoidResultHandler Methods | Improve this Doc View Source SetCanceled() Marks the System.Threading.Tasks.Task that invocations will receive as canceled. Declaration public JSRuntimeInvocationHandler SetCanceled() Returns Type Description JSRuntimeInvocationHandler This handler to allow calls to be chained. | Improve this Doc View Source SetException<TException>(TException) Sets the TException exception that invocations will receive. Declaration public JSRuntimeInvocationHandler SetException<TException>(TException exception) where TException : Exception Parameters Type Name Description TException exception The exception to set. Returns Type Description JSRuntimeInvocationHandler This handler to allow calls to be chained. Type Parameters Name Description TException | Improve this Doc View Source SetVoidResult() Completes the current awaiting void invocation requests. Declaration public JSRuntimeInvocationHandler SetVoidResult() Returns Type Description JSRuntimeInvocationHandler This handler to allow calls to be chained. Extension Methods JSRuntimeAssertExtensions.VerifyNotInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) JSRuntimeAssertExtensions.VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) JSRuntimeAssertExtensions.VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, Int32, String) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandler-1.html": {
    "href": "api/Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandler-1.html",
    "title": "Class JSRuntimeInvocationHandler<TResult> | bUnit",
    "keywords": "Class JSRuntimeInvocationHandler<TResult> Represents a handler for an invocation of a JavaScript function with specific arguments and returns TResult . Inheritance System.Object JSRuntimeInvocationHandlerBase <TResult> JSRuntimeInvocationHandler<TResult> Inherited Members JSRuntimeInvocationHandlerBase<TResult>.CatchAllIdentifier JSRuntimeInvocationHandlerBase<TResult>.IsVoidResultHandler JSRuntimeInvocationHandlerBase<TResult>.IsCatchAllHandler JSRuntimeInvocationHandlerBase<TResult>.Identifier JSRuntimeInvocationHandlerBase<TResult>.Invocations JSRuntimeInvocationHandlerBase<TResult>.SetCanceledBase() JSRuntimeInvocationHandlerBase<TResult>.SetExceptionBase<TException>(TException) JSRuntimeInvocationHandlerBase<TResult>.SetResultBase(TResult) JSRuntimeInvocationHandlerBase<TResult>.Handle(JSRuntimeInvocation) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.JSInterop.InvocationHandlers Assembly : Bunit.Web.dll Syntax public class JSRuntimeInvocationHandler<TResult> : JSRuntimeInvocationHandlerBase<TResult> Type Parameters Name Description TResult The expect result type. Constructors | Improve this Doc View Source JSRuntimeInvocationHandler(String, InvocationMatcher) Creates an instance of a JSRuntimeInvocationHandler<TResult> type. Declaration protected JSRuntimeInvocationHandler(string identifier, InvocationMatcher matcher) Parameters Type Name Description System.String identifier InvocationMatcher matcher Methods | Improve this Doc View Source SetCanceled() Marks the System.Threading.Tasks.Task<TResult> that invocations will receive as canceled. Declaration public JSRuntimeInvocationHandler<TResult> SetCanceled() Returns Type Description JSRuntimeInvocationHandler <TResult> This handler to allow calls to be chained. | Improve this Doc View Source SetException<TException>(TException) Sets the TException exception that invocations will receive. Declaration public JSRuntimeInvocationHandler<TResult> SetException<TException>(TException exception) where TException : Exception Parameters Type Name Description TException exception The exception to set. Returns Type Description JSRuntimeInvocationHandler <TResult> This handler to allow calls to be chained. Type Parameters Name Description TException | Improve this Doc View Source SetResult(TResult) Sets the TResult result that invocations will receive. Declaration public JSRuntimeInvocationHandler<TResult> SetResult(TResult result) Parameters Type Name Description TResult result Returns Type Description JSRuntimeInvocationHandler <TResult> This handler to allow calls to be chained. Extension Methods JSRuntimeAssertExtensions.VerifyNotInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) JSRuntimeAssertExtensions.VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) JSRuntimeAssertExtensions.VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, Int32, String) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandlerBase-1.html": {
    "href": "api/Bunit.JSInterop.InvocationHandlers.JSRuntimeInvocationHandlerBase-1.html",
    "title": "Class JSRuntimeInvocationHandlerBase<TResult> | bUnit",
    "keywords": "Class JSRuntimeInvocationHandlerBase<TResult> Represents an invocation handler for JSRuntimeInvocation instances. Inheritance System.Object JSRuntimeInvocationHandlerBase<TResult> JSRuntimeInvocationHandler JSRuntimeInvocationHandler <TResult> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.JSInterop.InvocationHandlers Assembly : Bunit.Web.dll Syntax public abstract class JSRuntimeInvocationHandlerBase<TResult> Type Parameters Name Description TResult Constructors | Improve this Doc View Source JSRuntimeInvocationHandlerBase(String, InvocationMatcher) Creates an instance of the JSRuntimeInvocationHandlerBase<TResult> . Declaration protected JSRuntimeInvocationHandlerBase(string identifier, InvocationMatcher matcher) Parameters Type Name Description System.String identifier Identifier it matches. Set to \"*\" to match all identifiers. InvocationMatcher matcher Fields | Improve this Doc View Source CatchAllIdentifier The identifier string used to indicate a catch all handler. Declaration protected const string CatchAllIdentifier = \"*\" Field Value Type Description System.String Properties | Improve this Doc View Source Identifier The expected identifier for the function to invoke. Declaration public string Identifier { get; } Property Value Type Description System.String | Improve this Doc View Source Invocations Gets the invocations that this JSRuntimeInvocationHandler<TResult> has matched with. Declaration public JSRuntimeInvocationDictionary Invocations { get; } Property Value Type Description JSRuntimeInvocationDictionary | Improve this Doc View Source IsCatchAllHandler Gets whether this handler will match any invocations that expect a TResult as the return type. Declaration public bool IsCatchAllHandler { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVoidResultHandler Gets whether this handler is set up to handle calls to InvokeVoidAsync(string, object[]) . Declaration public virtual bool IsVoidResultHandler { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Handle(JSRuntimeInvocation) Call this to have the this handler handle the invocation . Declaration protected virtual Task<TResult> Handle(JSRuntimeInvocation invocation) Parameters Type Name Description JSRuntimeInvocation invocation Invocation to handle. Returns Type Description System.Threading.Tasks.Task <TResult> Remarks Note to implementors: Always call the Handle(JSRuntimeInvocation) method when overriding it in a sub class. It will make sure the invocation is correctly registered in the Invocations dictionary. | Improve this Doc View Source SetCanceledBase() Marks the System.Threading.Tasks.Task<TResult> that invocations will receive as canceled. Declaration protected void SetCanceledBase() | Improve this Doc View Source SetExceptionBase<TException>(TException) Sets the TException exception that invocations will receive. Declaration protected void SetExceptionBase<TException>(TException exception) where TException : Exception Parameters Type Name Description TException exception Type Parameters Name Description TException | Improve this Doc View Source SetResultBase(TResult) Sets the TResult result that invocations will receive. Declaration protected void SetResultBase(TResult result) Parameters Type Name Description TResult result Extension Methods JSRuntimeAssertExtensions.VerifyNotInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) JSRuntimeAssertExtensions.VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) JSRuntimeAssertExtensions.VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, Int32, String) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSInterop.JSRuntimeInvocationDictionary.html": {
    "href": "api/Bunit.JSInterop.JSRuntimeInvocationDictionary.html",
    "title": "Class JSRuntimeInvocationDictionary | bUnit",
    "keywords": "Class JSRuntimeInvocationDictionary Represents a dictionary of JSRuntimeInvocation , keyed by their identifier. Inheritance System.Object JSRuntimeInvocationDictionary Implements System.Collections.Generic.IReadOnlyCollection < JSRuntimeInvocation > System.Collections.Generic.IEnumerable < JSRuntimeInvocation > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.JSInterop Assembly : Bunit.Web.dll Syntax public sealed class JSRuntimeInvocationDictionary : IReadOnlyCollection<JSRuntimeInvocation>, IEnumerable<JSRuntimeInvocation>, IEnumerable Properties | Improve this Doc View Source Count Gets the total number of invocations registered in the dictionary. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Identifiers Gets a read only collection of all the identifiers used in invocations in this dictionary. Declaration public IReadOnlyCollection<string> Identifiers { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.String > | Improve this Doc View Source Item[String] Gets all invocations for a specific identifier . Declaration public IReadOnlyList<JSRuntimeInvocation> this[string identifier] { get; } Parameters Type Name Description System.String identifier The identifier to get invocations for. Property Value Type Description System.Collections.Generic.IReadOnlyList < JSRuntimeInvocation > An System.Collections.Generic.IReadOnlyList<T> . Methods | Improve this Doc View Source GetEnumerator() Gets an System.Collections.Generic.IEnumerator<T> that will iterate over all invocations in the dictionary. Declaration public IEnumerator<JSRuntimeInvocation> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < JSRuntimeInvocation > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSInvokeCountExpectedException.html": {
    "href": "api/Bunit.JSInvokeCountExpectedException.html",
    "title": "Class JSInvokeCountExpectedException | bUnit",
    "keywords": "Class JSInvokeCountExpectedException Represents a number of unexpected invocation to a BunitJSInterop . Inheritance System.Object System.Exception JSInvokeCountExpectedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class JSInvokeCountExpectedException : Exception, ISerializable Constructors | Improve this Doc View Source JSInvokeCountExpectedException(String, Int32, Int32, String, String) Creates an instance of the JSInvokeCountExpectedException . Declaration public JSInvokeCountExpectedException(string identifier, int expectedCount, int actualCount, string assertMethod, string userMessage = null) Parameters Type Name Description System.String identifier System.Int32 expectedCount System.Int32 actualCount System.String assertMethod System.String userMessage Properties | Improve this Doc View Source ActualInvocationCount Gets the actual invocation count. Declaration public int ActualInvocationCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ExpectedInvocationCount Gets the expected invocation count. Declaration public int ExpectedInvocationCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Identifier Gets the identifier. Declaration public string Identifier { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSRuntimeAssertExtensions.html": {
    "href": "api/Bunit.JSRuntimeAssertExtensions.html",
    "title": "Class JSRuntimeAssertExtensions | bUnit",
    "keywords": "Class JSRuntimeAssertExtensions Assert extensions for JSRuntimeMock Inheritance System.Object JSRuntimeAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class JSRuntimeAssertExtensions Methods | Improve this Doc View Source ShouldBeElementReferenceTo(Object, IElement) Verifies that an argument actualArgument passed to an JSRuntime invocation is an Microsoft.AspNetCore.Components.ElementReference to the expectedTargetElement . Declaration public static void ShouldBeElementReferenceTo(this object actualArgument, IElement expectedTargetElement) Parameters Type Name Description System.Object actualArgument object to verify. AngleSharp.Dom.IElement expectedTargetElement expected targeted element. | Improve this Doc View Source VerifyInvoke(BunitJSInterop, String, Int32, String) Verifies that the identifier has been invoked calledTimes times. Declaration public static IReadOnlyList<JSRuntimeInvocation> VerifyInvoke(this BunitJSInterop jsInterop, string identifier, int calledTimes, string userMessage = null) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to verify against. System.String identifier Identifier of invocation that should have been invoked. System.Int32 calledTimes The number of times the invocation is expected to have been called. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description System.Collections.Generic.IReadOnlyList < JSRuntimeInvocation > The JSRuntimeInvocation . | Improve this Doc View Source VerifyInvoke(BunitJSInterop, String, String) Verifies that the identifier has been invoked one time. Declaration public static JSRuntimeInvocation VerifyInvoke(this BunitJSInterop jsInterop, string identifier, string userMessage = null) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to verify against. System.String identifier Identifier of invocation that should have been invoked. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description JSRuntimeInvocation The JSRuntimeInvocation . | Improve this Doc View Source VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, Int32, String) Verifies that the identifier has been invoked calledTimes times. Declaration public static IReadOnlyList<JSRuntimeInvocation> VerifyInvoke<TResult>(this JSRuntimeInvocationHandlerBase<TResult> handler, string identifier, int calledTimes, string userMessage = null) Parameters Type Name Description JSRuntimeInvocationHandlerBase <TResult> handler Handler to verify against. System.String identifier Identifier of invocation that should have been invoked. System.Int32 calledTimes The number of times the invocation is expected to have been called. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description System.Collections.Generic.IReadOnlyList < JSRuntimeInvocation > The JSRuntimeInvocation . Type Parameters Name Description TResult | Improve this Doc View Source VerifyInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) Verifies that the identifier has been invoked one time. Declaration public static JSRuntimeInvocation VerifyInvoke<TResult>(this JSRuntimeInvocationHandlerBase<TResult> handler, string identifier, string userMessage = null) Parameters Type Name Description JSRuntimeInvocationHandlerBase <TResult> handler Handler to verify against. System.String identifier Identifier of invocation that should have been invoked. System.String userMessage A custom user message to display if the assertion fails. Returns Type Description JSRuntimeInvocation The JSRuntimeInvocation . Type Parameters Name Description TResult | Improve this Doc View Source VerifyNotInvoke(BunitJSInterop, String, String) Verifies that the identifier was never invoked on the jsInterop . Declaration public static void VerifyNotInvoke(this BunitJSInterop jsInterop, string identifier, string userMessage = null) Parameters Type Name Description BunitJSInterop jsInterop The bUnit JSInterop to verify against. System.String identifier Identifier of invocation that should not have happened. System.String userMessage A custom user message to display if the assertion fails. | Improve this Doc View Source VerifyNotInvoke<TResult>(JSRuntimeInvocationHandlerBase<TResult>, String, String) Verifies that the identifier was never invoked on the handler . Declaration public static void VerifyNotInvoke<TResult>(this JSRuntimeInvocationHandlerBase<TResult> handler, string identifier, string userMessage = null) Parameters Type Name Description JSRuntimeInvocationHandlerBase <TResult> handler Handler to verify against. System.String identifier Identifier of invocation that should not have happened. System.String userMessage A custom user message to display if the assertion fails. Type Parameters Name Description TResult"
  },
  "api/Bunit.JSRuntimeInvocation.html": {
    "href": "api/Bunit.JSRuntimeInvocation.html",
    "title": "Struct JSRuntimeInvocation | bUnit",
    "keywords": "Struct JSRuntimeInvocation Represents an invocation of JavaScript via the JSRuntime Mock Implements System.IEquatable < JSRuntimeInvocation > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public struct JSRuntimeInvocation : IEquatable<JSRuntimeInvocation> Constructors | Improve this Doc View Source JSRuntimeInvocation(String, CancellationToken, Object[]) Creates an instance of the JSRuntimeInvocation . Declaration public JSRuntimeInvocation(string identifier, CancellationToken cancellationToken, object[] args) Parameters Type Name Description System.String identifier System.Threading.CancellationToken cancellationToken System.Object [] args Properties | Improve this Doc View Source Arguments Gets the arguments used in the invocation. Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Object > | Improve this Doc View Source CancellationToken Gets the cancellation token used in the invocation. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken | Improve this Doc View Source Identifier Gets the identifier used in the invocation. Declaration public string Identifier { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(JSRuntimeInvocation) Declaration public bool Equals(JSRuntimeInvocation other) Parameters Type Name Description JSRuntimeInvocation other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(JSRuntimeInvocation, JSRuntimeInvocation) Declaration public static bool operator ==(JSRuntimeInvocation left, JSRuntimeInvocation right) Parameters Type Name Description JSRuntimeInvocation left JSRuntimeInvocation right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(JSRuntimeInvocation, JSRuntimeInvocation) Declaration public static bool operator !=(JSRuntimeInvocation left, JSRuntimeInvocation right) Parameters Type Name Description JSRuntimeInvocation left JSRuntimeInvocation right Returns Type Description System.Boolean Implements System.IEquatable<T> Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.JSRuntimeMode.html": {
    "href": "api/Bunit.JSRuntimeMode.html",
    "title": "Enum JSRuntimeMode | bUnit",
    "keywords": "Enum JSRuntimeMode The execution mode of the BunitJSInterop . Namespace : Bunit Assembly : Bunit.Web.dll Syntax public enum JSRuntimeMode Fields Name Description Loose Loose configures the BunitJSInterop to return default TValue for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) calls. Strict Strict configures the BunitJSInterop to throw an JSRuntimeUnhandledInvocationException exception when a call to for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) has not been setup. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(IElement)"
  },
  "api/Bunit.JSRuntimeUnhandledInvocationException.html": {
    "href": "api/Bunit.JSRuntimeUnhandledInvocationException.html",
    "title": "Class JSRuntimeUnhandledInvocationException | bUnit",
    "keywords": "Class JSRuntimeUnhandledInvocationException Exception use to indicate that an invocation was received by the BunitJSInterop running in Strict mode, which didn't contain a matching invocation handler. Inheritance System.Object System.Exception JSRuntimeUnhandledInvocationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public sealed class JSRuntimeUnhandledInvocationException : Exception, ISerializable Constructors | Improve this Doc View Source JSRuntimeUnhandledInvocationException(JSRuntimeInvocation) Creates a new instance of the JSRuntimeUnhandledInvocationException with the provided Invocation attached. Declaration public JSRuntimeUnhandledInvocationException(JSRuntimeInvocation invocation) Parameters Type Name Description JSRuntimeInvocation invocation The unplanned invocation. Properties | Improve this Doc View Source Invocation Gets the unplanned invocation. Declaration public JSRuntimeInvocation Invocation { get; } Property Value Type Description JSRuntimeInvocation Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Key.html": {
    "href": "api/Bunit.Key.html",
    "title": "Class Key | bUnit",
    "keywords": "Class Key Representation of keyboard key that can be argument of keyboard events. Inheritance System.Object Key Implements System.IEquatable < Key > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax public sealed class Key : IEquatable<Key> Properties | Improve this Doc View Source Add Represents the number pad addition key. Declaration public static Key Add { get; } Property Value Type Description Key | Improve this Doc View Source Alt Represents the Alt key. This is a control key and it can be combined with other keys. E.g. Key.Enter + Keys.Alt Declaration public static Key Alt { get; } Property Value Type Description Key | Improve this Doc View Source AltKey Gets the value indicating whether Alt key is pressed. Declaration public bool AltKey { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Backspace Represents the Backspace key. Declaration public static Key Backspace { get; } Property Value Type Description Key | Improve this Doc View Source Code Gets the string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. Declaration public string Code { get; } Property Value Type Description System.String | Improve this Doc View Source Command Represents the function key Command. This is a control key and it can be combined with other keys. E.g. Key.Enter + Key.Command Declaration public static Key Command { get; } Property Value Type Description Key | Improve this Doc View Source CommandKey Gets the value indicating whether Command key is pressed. Declaration public bool CommandKey { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Control Represents the Control key. This is a control key and it can be combined with other keys. E.g. Key.Enter + Key.Control Declaration public static Key Control { get; } Property Value Type Description Key | Improve this Doc View Source ControlKey Gets the value indicating whether Control key is pressed. Declaration public bool ControlKey { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Delete Represents the Delete key. Declaration public static Key Delete { get; } Property Value Type Description Key | Improve this Doc View Source Divide Represents the number pad division key. Declaration public static Key Divide { get; } Property Value Type Description Key | Improve this Doc View Source Down Represents the down arrow key. Declaration public static Key Down { get; } Property Value Type Description Key | Improve this Doc View Source End Represents the End key. Declaration public static Key End { get; } Property Value Type Description Key | Improve this Doc View Source Enter Represents the Enter key. Declaration public static Key Enter { get; } Property Value Type Description Key | Improve this Doc View Source Equal Represents the equal sign key. Declaration public static Key Equal { get; } Property Value Type Description Key | Improve this Doc View Source Escape Represents the Escape key. Declaration public static Key Escape { get; } Property Value Type Description Key | Improve this Doc View Source F1 Represents the function key F1. Declaration public static Key F1 { get; } Property Value Type Description Key | Improve this Doc View Source F10 Represents the function key F10. Declaration public static Key F10 { get; } Property Value Type Description Key | Improve this Doc View Source F11 Represents the function key F11. Declaration public static Key F11 { get; } Property Value Type Description Key | Improve this Doc View Source F12 Represents the function key F12. Declaration public static Key F12 { get; } Property Value Type Description Key | Improve this Doc View Source F2 Represents the function key F2. Declaration public static Key F2 { get; } Property Value Type Description Key | Improve this Doc View Source F3 Represents the function key F3. Declaration public static Key F3 { get; } Property Value Type Description Key | Improve this Doc View Source F4 Represents the function key F4. Declaration public static Key F4 { get; } Property Value Type Description Key | Improve this Doc View Source F5 Represents the function key F5. Declaration public static Key F5 { get; } Property Value Type Description Key | Improve this Doc View Source F6 Represents the function key F6. Declaration public static Key F6 { get; } Property Value Type Description Key | Improve this Doc View Source F7 Represents the function key F7. Declaration public static Key F7 { get; } Property Value Type Description Key | Improve this Doc View Source F8 Represents the function key F8. Declaration public static Key F8 { get; } Property Value Type Description Key | Improve this Doc View Source F9 Represents the function key F9. Declaration public static Key F9 { get; } Property Value Type Description Key | Improve this Doc View Source Home Represents the Home key. Declaration public static Key Home { get; } Property Value Type Description Key | Improve this Doc View Source Insert Represents the Insert key. Declaration public static Key Insert { get; } Property Value Type Description Key | Improve this Doc View Source Left Represents the left arrow key. Declaration public static Key Left { get; } Property Value Type Description Key | Improve this Doc View Source Multiply Represents the number pad multiplication key. Declaration public static Key Multiply { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad0 Represents the number pad 0 key. Declaration public static Key NumberPad0 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad1 Represents the number pad 1 key. Declaration public static Key NumberPad1 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad2 Represents the number pad 2 key. Declaration public static Key NumberPad2 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad3 Represents the number pad 3 key. Declaration public static Key NumberPad3 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad4 Represents the number pad 4 key. Declaration public static Key NumberPad4 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad5 Represents the number pad 5 key. Declaration public static Key NumberPad5 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad6 Represents the number pad 6 key. Declaration public static Key NumberPad6 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad7 Represents the number pad 7 key. Declaration public static Key NumberPad7 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad8 Represents the number pad 8 key. Declaration public static Key NumberPad8 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPad9 Represents the number pad 9 key. Declaration public static Key NumberPad9 { get; } Property Value Type Description Key | Improve this Doc View Source NumberPadDecimal Represents the number pad decimal separator key. Declaration public static Key NumberPadDecimal { get; } Property Value Type Description Key | Improve this Doc View Source PageDown Represents the Page Down key. Declaration public static Key PageDown { get; } Property Value Type Description Key | Improve this Doc View Source PageUp Represents the Page Up key. Declaration public static Key PageUp { get; } Property Value Type Description Key | Improve this Doc View Source Pause Represents the Pause key. Declaration public static Key Pause { get; } Property Value Type Description Key | Improve this Doc View Source Right Represents the right arrow key. Declaration public static Key Right { get; } Property Value Type Description Key | Improve this Doc View Source Shift Represents the Shift key. This is a control key and it can be combined with other keys. E.g. Key.Enter + Key.Shift Declaration public static Key Shift { get; } Property Value Type Description Key | Improve this Doc View Source ShiftKey Gets the value indicating whether Shift key is pressed. Declaration public bool ShiftKey { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Space Represents the Spacebar key. Declaration public static Key Space { get; } Property Value Type Description Key | Improve this Doc View Source Subtract Represents the number pad subtraction key. Declaration public static Key Subtract { get; } Property Value Type Description Key | Improve this Doc View Source Tab Represents the Tab key. Declaration public static Key Tab { get; } Property Value Type Description Key | Improve this Doc View Source Up Represents the up arrow key. Declaration public static Key Up { get; } Property Value Type Description Key | Improve this Doc View Source Value Gets the key value of the key represented. If the value has a printed representation, this attribute's value is the same as the char attribute. Declaration public string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Combine(Key) Gets a combination of current key with another key. A key instance can be combined only with Control , Shift , Alt , or Command keys. Declaration public Key Combine(Key key) Parameters Type Name Description Key key The other key to combine with. Returns Type Description Key A new key with combination of Control, Shift, Alt, and Command keys. | Improve this Doc View Source Equals(Key) Gets the value indicating whether the current object is equal to another object of the same type. Declaration public bool Equals(Key other) Parameters Type Name Description Key other A key to compare with this object. Returns Type Description System.Boolean True if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Gets the value indicating whether the current object is equal to another object of the same type. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this object. Returns Type Description System.Boolean True if the current object is equal to the other parameter; otherwise, false . Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Get(Char) Gets Key object from specified character. Declaration public static Key Get(char value) Parameters Type Name Description System.Char value The key value. Returns Type Description Key | Improve this Doc View Source Get(String) Gets Key object with specified value. Declaration public static Key Get(string value) Parameters Type Name Description System.String value The key value. Returns Type Description Key | Improve this Doc View Source Get(String, String) Gets Key object with specified value and code. Declaration public static Key Get(string value, string code) Parameters Type Name Description System.String value The key value. System.String code The key code of physical key. Returns Type Description Key | Improve this Doc View Source GetHashCode() Gets hash code of this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for the current object. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Gets a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String A string that represents the current object. Overrides System.Object.ToString() | Improve this Doc View Source WithAltKey(Boolean) Gets the key with new value of Alt key. Declaration public Key WithAltKey(bool value) Parameters Type Name Description System.Boolean value New value of Alt key. Returns Type Description Key The key with new value of Alt key. | Improve this Doc View Source WithCommandKey(Boolean) Gets the key with new value of Command key. Declaration public Key WithCommandKey(bool value) Parameters Type Name Description System.Boolean value New value of Command key. Returns Type Description Key The key with new value of Command key. | Improve this Doc View Source WithControlKey(Boolean) Gets the key with new value of Control key. Declaration public Key WithControlKey(bool value) Parameters Type Name Description System.Boolean value New value of Control key. Returns Type Description Key The key with new value of Control key. | Improve this Doc View Source WithShiftKey(Boolean) Gets the key with new value of Shift key. Declaration public Key WithShiftKey(bool value) Parameters Type Name Description System.Boolean value New value of Shift key. Returns Type Description Key The key with new value of Shift key. Operators | Improve this Doc View Source Addition(Key, Key) Gets a combination of 2 key objects. A key instance can be combined only with Control , Shift , Alt , or Command keys. Declaration public static Key operator +(Key x, Key y) Parameters Type Name Description Key x The first key to combine. Key y The second key to combine. Returns Type Description Key A new key with combination of Control, Shift, Alt, and Command keys. | Improve this Doc View Source Equality(Key, Key) Gets the value indicating whether 2 instances of Key are equal. Declaration public static bool operator ==(Key x, Key y) Parameters Type Name Description Key x The first key to compare. Key y The second key to compare. Returns Type Description System.Boolean True if the instances of Key are equal; otherwise, false . | Improve this Doc View Source Implicit(Key to KeyboardEventArgs) Gets a new Key instance with value of character. Declaration public static implicit operator KeyboardEventArgs(Key key) Parameters Type Name Description Key key The character to convert to Key instance. Returns Type Description Microsoft.AspNetCore.Components.Web.KeyboardEventArgs The Key instance with character value. | Improve this Doc View Source Implicit(Char to Key) Gets a new Key instance with value of character. Declaration public static implicit operator Key(char key) Parameters Type Name Description System.Char key The character to convert to Key instance. Returns Type Description Key The Key instance with character value. | Improve this Doc View Source Implicit(String to Key) Gets a new Key instance with value of string object. Declaration public static implicit operator Key(string value) Parameters Type Name Description System.String value The string value to convert to Key instance. Returns Type Description Key The Key instance with the specified value. | Improve this Doc View Source Inequality(Key, Key) Gets the value indicating whether 2 instances of Key are different. Declaration public static bool operator !=(Key x, Key y) Parameters Type Name Description Key x The first key to compare. Key y The second key to compare. Returns Type Description System.Boolean True if the instances of Key are different; otherwise, false . Implements System.IEquatable<T> Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.KeyboardEventDispatchExtensions.html": {
    "href": "api/Bunit.KeyboardEventDispatchExtensions.html",
    "title": "Class KeyboardEventDispatchExtensions | bUnit",
    "keywords": "Class KeyboardEventDispatchExtensions Keyboard event dispatch helper extension methods. Inheritance System.Object KeyboardEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class KeyboardEventDispatchExtensions Methods | Improve this Doc View Source KeyDown(IElement, Key, Boolean, String) Raises the @onkeydown event on element , passing the provided key to the event handler. Declaration public static void KeyDown(this IElement element, Key key, bool repeat = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Key key The keyboard key to pass to the event handler. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false . System.String type The type of the event. | Improve this Doc View Source KeyDown(IElement, KeyboardEventArgs) Raises the @onkeydown event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyDown(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyDown(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeydown event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.KeyboardEventArgs object Declaration public static void KeyDown(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyPress(IElement, Key, Boolean, String) Raises the @onkeypress event on element , passing the provided key to the event handler. Declaration public static void KeyPress(this IElement element, Key key, bool repeat = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Key key The keyboard key to pass to the event handler. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false . System.String type The type of the event. | Improve this Doc View Source KeyPress(IElement, KeyboardEventArgs) Raises the @onkeypress event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyPress(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyPress(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeypress event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.KeyboardEventArgs object Declaration public static void KeyPress(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event. | Improve this Doc View Source KeyUp(IElement, Key, Boolean, String) Raises the @onkeyup event on element , passing the provided key to the event handler. Declaration public static void KeyUp(this IElement element, Key key, bool repeat = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Key key The keyboard key to pass to the event handler. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false . System.String type The type of the event. | Improve this Doc View Source KeyUp(IElement, KeyboardEventArgs) Raises the @onkeyup event on element , passing the provided eventArgs to the event handler. Declaration public static void KeyUp(this IElement element, KeyboardEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source KeyUp(IElement, String, String, Single, Boolean, Boolean, Boolean, Boolean, Boolean, String) Raises the @onkeyup event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.KeyboardEventArgs object Declaration public static void KeyUp(this IElement element, string key, string code = null, float location = 0F, bool repeat = false, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String key The key value of the key represented by the event. If the value has a printed representation, this attribute's value is the same as the char attribute. Otherwise, it's one of the key value strings specified in 'Key values'. If the key can't be identified, this is the string \"Unidentified\" System.String code Holds a string that identifies the physical key being pressed. The value is not affected by the current keyboard layout or modifier state, so a particular key will always return the same value. System.Single location The location of the key on the device. System.Boolean repeat true if a key has been depressed long enough to trigger key repetition, otherwise false. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type The type of the event."
  },
  "api/Bunit.MarkupMatchesAssertExtensions.html": {
    "href": "api/Bunit.MarkupMatchesAssertExtensions.html",
    "title": "Class MarkupMatchesAssertExtensions | bUnit",
    "keywords": "Class MarkupMatchesAssertExtensions Assert helpers for comparing markup Inheritance System.Object MarkupMatchesAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MarkupMatchesAssertExtensions Methods | Improve this Doc View Source MarkupMatches(INode, INodeList, String) Verifies that the actual AngleSharp.Dom.INode matches the expected AngleSharp.Dom.INodeList , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, INodeList expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The node to verify. AngleSharp.Dom.INodeList expected The expected list of nodes. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, IRenderedFragment, String) Verifies that the actual AngleSharp.Dom.INode matches the rendered markup from the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The node to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, RenderFragment, String) Verifies that the markup from the actual matches the rendered markup from the expected Microsoft.AspNetCore.Components.RenderFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, RenderFragment expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The markup to verify. Microsoft.AspNetCore.Components.RenderFragment expected The render fragment whose output to compare against. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INode, String, String) Verifies that the actual AngleSharp.Dom.INode matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this INode actual, string expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INode actual The node to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, INode, String) Verifies that the actual AngleSharp.Dom.INodeList matches the expected AngleSharp.Dom.INode , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, INode expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. AngleSharp.Dom.INode expected The expected node. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, INodeList, String) Verifies that the actual AngleSharp.Dom.INodeList matches the expected AngleSharp.Dom.INodeList , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, INodeList expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. AngleSharp.Dom.INodeList expected The expected list of nodes. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, IRenderedFragment, String) Verifies that the actual AngleSharp.Dom.INodeList matches the rendered markup from the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, RenderFragment, String) Verifies that the markup from the actual matches the rendered markup from the expected Microsoft.AspNetCore.Components.RenderFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, RenderFragment expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The markup to verify. Microsoft.AspNetCore.Components.RenderFragment expected The render fragment whose output to compare against. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(INodeList, String, String) Verifies that the actual AngleSharp.Dom.INodeList matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this INodeList actual, string expected, string userMessage = null) Parameters Type Name Description AngleSharp.Dom.INodeList actual The list of nodes to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(IRenderedFragment, IRenderedFragment, String) Verifies that the rendered markup from the actual IRenderedFragment matches the rendered markup from the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. IRenderedFragment expected The expected rendered fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(IRenderedFragment, RenderFragment, String) Verifies that the rendered markup from the actual IRenderedFragment matches the rendered markup from the expected Microsoft.AspNetCore.Components.RenderFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, RenderFragment expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. Microsoft.AspNetCore.Components.RenderFragment expected The render fragment whose output to compare against. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(IRenderedFragment, String, String) Verifies that the rendered markup from the actual IRenderedFragment matches the expected markup, using the HtmlComparer type. Declaration public static void MarkupMatches(this IRenderedFragment actual, string expected, string userMessage = null) Parameters Type Name Description IRenderedFragment actual The rendered fragment to verify. System.String expected The expected markup. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, INode, String) Verifies that the rendered markup from the actual markup fragment matches the expected AngleSharp.Dom.INode , using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, INode expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. AngleSharp.Dom.INode expected The expected AngleSharp.Dom.INode . System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, INodeList, String) Verifies that the rendered markup from the actual markup fragment matches the expected AngleSharp.Dom.INodeList , using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, INodeList expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. AngleSharp.Dom.INodeList expected The expected AngleSharp.Dom.INodeList . System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, IRenderedFragment, String) Verifies that the rendered markup from the actual markup fragment matches the expected IRenderedFragment , using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, IRenderedFragment expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. IRenderedFragment expected The expected IRenderedFragment . System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup. | Improve this Doc View Source MarkupMatches(String, String, String) Verifies that the rendered markup from the actual markup fragment matches the expected markup fragment, using the HtmlComparer type. Declaration public static void MarkupMatches(this string actual, string expected, string userMessage = null) Parameters Type Name Description System.String actual The markup fragment to verify. System.String expected The expected markup fragment. System.String userMessage A custom user message to display in case the verification fails. Exceptions Type Condition HtmlEqualException Thrown when the actual markup does not match the expected markup."
  },
  "api/Bunit.MediaEventDispatchExtensions.html": {
    "href": "api/Bunit.MediaEventDispatchExtensions.html",
    "title": "Class MediaEventDispatchExtensions | bUnit",
    "keywords": "Class MediaEventDispatchExtensions Media event dispatch helper extension methods. Inheritance System.Object MediaEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MediaEventDispatchExtensions Methods | Improve this Doc View Source CanPlay(IElement) Raises the @oncanplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CanPlay(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source CanPlayThrough(IElement) Raises the @oncanplaythrough event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CanPlayThrough(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source CueChange(IElement) Raises the @oncuechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void CueChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source DurationChange(IElement) Raises the @ondurationchange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void DurationChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Emptied(IElement) Raises the @onemptied event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Emptied(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Pause(IElement) Raises the @onpause event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Pause(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Play(IElement) Raises the @onplay event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Play(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Playing(IElement) Raises the @onplaying event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Playing(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source RateChange(IElement) Raises the @onratechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void RateChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Seeked(IElement) Raises the @onseeked event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Seeked(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Seeking(IElement) Raises the @onseeking event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Seeking(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Stalled(IElement) Raises the @onstalled event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Stalled(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Stop(IElement) Raises the @onstop event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Stop(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Suspend(IElement) Raises the @onsuspend event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Suspend(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source TimeUpdate(IElement) Raises the @ontimeupdate event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void TimeUpdate(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source VolumeChange(IElement) Raises the @onvolumechange event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void VolumeChange(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. | Improve this Doc View Source Waiting(IElement) Raises the @onwaiting event on element , passing an empty ( System.EventArgs.Empty ) to the event handler. Declaration public static void Waiting(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on."
  },
  "api/Bunit.MissingEventHandlerException.html": {
    "href": "api/Bunit.MissingEventHandlerException.html",
    "title": "Class MissingEventHandlerException | bUnit",
    "keywords": "Class MissingEventHandlerException Represents an exception that is thrown when triggering an event handler failed because it wasn't available on the targeted AngleSharp.Dom.IElement . Inheritance System.Object System.Exception MissingEventHandlerException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class MissingEventHandlerException : Exception, ISerializable Constructors | Improve this Doc View Source MissingEventHandlerException(IElement, String) Creates an instance of the MissingEventHandlerException type. Declaration public MissingEventHandlerException(IElement element, string missingEventName) Parameters Type Name Description AngleSharp.Dom.IElement element System.String missingEventName Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.MockJSRuntimeExtensions.html": {
    "href": "api/Bunit.MockJSRuntimeExtensions.html",
    "title": "Class MockJSRuntimeExtensions | bUnit",
    "keywords": "Class MockJSRuntimeExtensions Helper methods for registering the MockJSRuntime with a TestServiceProvider . Inheritance System.Object MockJSRuntimeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MockJSRuntimeExtensions Methods | Improve this Doc View Source AddMockJSRuntime(TestServiceProvider, JSRuntimeMode) Obsolete: bUnits JSRuntime is now always available through the JSInterop property. Use that instead going forward. To change the JSRuntimeMode , change it through Mode . Declaration [Obsolete(\"bUnits JSRuntime is now always available through the TeBunitJSInteropstContext.JSInterop method.\", true)] public static BunitJSInterop AddMockJSRuntime(this TestServiceProvider serviceProvider, JSRuntimeMode mode = JSRuntimeMode.Loose) Parameters Type Name Description TestServiceProvider serviceProvider JSRuntimeMode mode Returns Type Description BunitJSInterop The added BunitJSInterop ."
  },
  "api/Bunit.MouseEventDispatchExtensions.html": {
    "href": "api/Bunit.MouseEventDispatchExtensions.html",
    "title": "Class MouseEventDispatchExtensions | bUnit",
    "keywords": "Class MouseEventDispatchExtensions Mouse event dispatch helper extension methods. Inheritance System.Object MouseEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class MouseEventDispatchExtensions Methods | Improve this Doc View Source Click(IElement, MouseEventArgs) Raises the @onclick event on element , passing the provided eventArgs to the event handler. Declaration public static void Click(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Click(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onclick event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void Click(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source ContextMenu(IElement, MouseEventArgs) Raises the @oncontextmenu event on element , passing the provided eventArgs to the event handler. Declaration public static void ContextMenu(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source ContextMenu(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @oncontextmenu event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void ContextMenu(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source DoubleClick(IElement, MouseEventArgs) Raises the @ondblclick event on element , passing the provided eventArgs to the event handler. Declaration public static void DoubleClick(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source DoubleClick(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @ondblclick event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void DoubleClick(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseDown(IElement, MouseEventArgs) Raises the @onmousedown event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseDown(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseDown(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmousedown event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseDown(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseMove(IElement, MouseEventArgs) Raises the @onmousemove event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseMove(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseMove(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmousemove event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseMove(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseOut(IElement, MouseEventArgs) Raises the @onmouseout event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseOut(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseOut(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseOut(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseOver(IElement, MouseEventArgs) Raises the @onmouseover event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseOver(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseover event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseUp(IElement, MouseEventArgs) Raises the @onmouseup event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseUp(this IElement element, MouseEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.MouseEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseUp(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String) Raises the @onmouseup event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseUp(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source MouseWheel(IElement, WheelEventArgs) Raises the @onmousewheel event on element , passing the provided eventArgs to the event handler. Declaration public static void MouseWheel(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.WheelEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source MouseWheel(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Double, Double, Double, Int64) Raises the @onmousewheel event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void MouseWheel(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, double deltaX = 0, double deltaY = 0, double deltaZ = 0, long deltaMode = 0L) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Double deltaX The horizontal scroll amount. System.Double deltaY The vertical scroll amount. System.Double deltaZ The scroll amount for the z-axis. System.Int64 deltaMode The unit of the delta values scroll amount. | Improve this Doc View Source Wheel(IElement, WheelEventArgs) Raises the @onwheel event on element , passing the provided eventArgs to the event handler. Declaration public static void Wheel(this IElement element, WheelEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.WheelEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Wheel(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Double, Double, Double, Int64) Raises the @onwheel event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.MouseEventArgs object Declaration public static void Wheel(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, double deltaX = 0, double deltaY = 0, double deltaZ = 0, long deltaMode = 0L) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Double deltaX The horizontal scroll amount. System.Double deltaY The vertical scroll amount. System.Double deltaZ The scroll amount for the z-axis. System.Int64 deltaMode The unit of the delta values scroll amount."
  },
  "api/Bunit.NodePrintExtensions.html": {
    "href": "api/Bunit.NodePrintExtensions.html",
    "title": "Class NodePrintExtensions | bUnit",
    "keywords": "Class NodePrintExtensions Helper methods for pretty printing markup from AngleSharp.Dom.INode and AngleSharp.Dom.INodeList . Inheritance System.Object NodePrintExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class NodePrintExtensions Methods | Improve this Doc View Source ToDiffMarkup(IMarkupFormattable) Uses the DiffMarkupFormatter to generate a HTML markup string from a AngleSharp.IMarkupFormattable markupFormattable . The generated HTML markup will NOT include the internal Blazor attributes added to elements. Declaration public static string ToDiffMarkup(this IMarkupFormattable markupFormattable) Parameters Type Name Description AngleSharp.IMarkupFormattable markupFormattable Returns Type Description System.String | Improve this Doc View Source ToDiffMarkup(IEnumerable<INode>) Uses the DiffMarkupFormatter to generate a HTML markup string from a System.Collections.Generic.IEnumerable<T> nodes . The generated HTML markup will NOT include the internal Blazor attributes added to elements. Declaration public static string ToDiffMarkup(this IEnumerable<INode> nodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > nodes Returns Type Description System.String | Improve this Doc View Source ToHtml(IEnumerable<INode>, TextWriter, IMarkupFormatter) Writes the serialization of the node guided by the formatter. Declaration public static void ToHtml(this IEnumerable<INode> nodes, TextWriter writer, IMarkupFormatter formatter) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > nodes The nodes to serialize. System.IO.TextWriter writer The output target of the serialization. AngleSharp.IMarkupFormatter formatter The formatter to use. | Improve this Doc View Source ToMarkup(IMarkupFormattable) Uses the AngleSharp.Html.PrettyMarkupFormatter to generate a HTML markup from a AngleSharp.IMarkupFormattable markupFormattable . Declaration public static string ToMarkup(this IMarkupFormattable markupFormattable) Parameters Type Name Description AngleSharp.IMarkupFormattable markupFormattable Returns Type Description System.String | Improve this Doc View Source ToMarkup(IEnumerable<INode>) Uses the AngleSharp.Html.PrettyMarkupFormatter to generate a HTML markup string from a System.Collections.Generic.IEnumerable<T> nodes . Declaration public static string ToMarkup(this IEnumerable<INode> nodes) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Dom.INode > nodes Returns Type Description System.String | Improve this Doc View Source ToMarkupElementOnly(IElement) Converts an AngleSharp.Dom.IElement into a HTML markup string, with only its tag and attributes included in the output. All child nodes are skipped. Declaration public static string ToMarkupElementOnly(this IElement element) Parameters Type Name Description AngleSharp.Dom.IElement element Returns Type Description System.String"
  },
  "api/Bunit.PointerEventDispatchExtensions.html": {
    "href": "api/Bunit.PointerEventDispatchExtensions.html",
    "title": "Class PointerEventDispatchExtensions | bUnit",
    "keywords": "Class PointerEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object PointerEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class PointerEventDispatchExtensions Methods | Improve this Doc View Source GotPointerCapture(IElement, PointerEventArgs) Raises the @ongotpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static void GotPointerCapture(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source GotPointerCapture(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @ongotpointercapture event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void GotPointerCapture(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source LostPointerCapture(IElement, PointerEventArgs) Raises the @onlostpointercapture event on element , passing the provided eventArgs to the event handler. Declaration public static void LostPointerCapture(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LostPointerCapture(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onlostpointercapture event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void LostPointerCapture(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerDown(IElement, PointerEventArgs) Raises the @onpointerdown event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerDown(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerDown(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerdown event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerDown(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerEnter(IElement, PointerEventArgs) Raises the @onpointerenter event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerEnter(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerEnter(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerenter event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerEnter(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerLeave(IElement, PointerEventArgs) Raises the @onpointerleave event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerLeave(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerLeave(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerleave event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerLeave(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerMove(IElement, PointerEventArgs) Raises the @onpointermove event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerMove(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerMove(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointermove event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerMove(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerOut(IElement, PointerEventArgs) Raises the @onpointerout event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerOut(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerOut(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerOut(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerOver(IElement, PointerEventArgs) Raises the @onpointerover event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerOver(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerOver(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerover event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerOver(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type. | Improve this Doc View Source PointerUp(IElement, PointerEventArgs) Raises the @onpointerup event on element , passing the provided eventArgs to the event handler. Declaration public static void PointerUp(this IElement element, PointerEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.PointerEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source PointerUp(IElement, Int64, Double, Double, Double, Double, Int64, Int64, Boolean, Boolean, Boolean, Boolean, String, Int64, Single, Single, Single, Single, Single, String, Boolean) Raises the @onpointerup event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.PointerEventArgs object. Declaration public static void PointerUp(this IElement element, long detail = 0L, double screenX = 0, double screenY = 0, double clientX = 0, double clientY = 0, long button = 0L, long buttons = 0L, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null, long pointerId = 0L, float width = 0F, float height = 0F, float pressure = 0F, float tiltX = 0F, float tiltY = 0F, string pointerType = null, bool isPrimary = false) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. System.Double screenX The X coordinate of the mouse pointer in global (screen) coordinates. System.Double screenY The Y coordinate of the mouse pointer in global (screen) coordinates. System.Double clientX The X coordinate of the mouse pointer in local (DOM content) coordinates. System.Double clientY The Y coordinate of the mouse pointer in local (DOM content) coordinates. System.Int64 button The button number that was pressed when the mouse event was fired: Left button=0, middle button=1 (if present), right button=2. For mice configured for left handed use in which the button actions are reversed the values are instead read from right to left. System.Int64 buttons The buttons being pressed when the mouse event was fired: Left button=1, Right button=2, Middle (wheel) button=4, 4th button (typically, \"Browser Back\" button)=8, 5th button (typically, \"Browser Forward\" button)=16. If two or more buttons are pressed, returns the logical sum of the values. E.g., if Left button and Right button are pressed, returns 3 (=1 | 2). System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. System.Int64 pointerId A unique identifier for the pointer causing the event. System.Single width The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. System.Single height The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. System.Single pressure The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. System.Single tiltX The plane angle (in degrees, in the range of -90 to 90) between the Y-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the Y axis. System.Single tiltY The plane angle (in degrees, in the range of -90 to 90) between the X-Z plane and the plane containing both the transducer (e.g. pen stylus) axis and the X axis. System.String pointerType Indicates the device type that caused the event. Must be one of the strings mouse, pen or touch, or an empty string. System.Boolean isPrimary Indicates if the pointer represents the primary pointer of this pointer type."
  },
  "api/Bunit.ProgressEventDispatchExtensions.html": {
    "href": "api/Bunit.ProgressEventDispatchExtensions.html",
    "title": "Class ProgressEventDispatchExtensions | bUnit",
    "keywords": "Class ProgressEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object ProgressEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ProgressEventDispatchExtensions Methods | Improve this Doc View Source Abort(IElement, ProgressEventArgs) Raises the @onabort event on element , passing the provided eventArgs to the event handler. Declaration public static void Abort(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Abort(IElement, Boolean, Int64, Int64, String) Raises the @onabort event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Abort(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source Error(IElement, ProgressEventArgs) Raises the @onerror event on element , passing the provided eventArgs to the event handler. Declaration public static void Error(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Error(IElement, Boolean, Int64, Int64, String) Raises the @onerror event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Error(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source Load(IElement, ProgressEventArgs) Raises the @onload event on element , passing the provided eventArgs to the event handler. Declaration public static void Load(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Load(IElement, Boolean, Int64, Int64, String) Raises the @onload event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Load(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadEnd(IElement, ProgressEventArgs) Raises the @onloadend event on element , passing the provided eventArgs to the event handler. Declaration public static void LoadEnd(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LoadEnd(IElement, Boolean, Int64, Int64, String) Raises the @onloadend event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void LoadEnd(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source LoadStart(IElement, ProgressEventArgs) Raises the @onloadstart event on element , passing the provided eventArgs to the event handler. Declaration public static void LoadStart(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source LoadStart(IElement, Boolean, Int64, Int64, String) Raises the @onloadstart event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void LoadStart(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source Progress(IElement, ProgressEventArgs) Raises the @onprogress event on element , passing the provided eventArgs to the event handler. Declaration public static void Progress(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Progress(IElement, Boolean, Int64, Int64, String) Raises the @onprogress event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Progress(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event. | Improve this Doc View Source Timeout(IElement, ProgressEventArgs) Raises the @ontimeout event on element , passing the provided eventArgs to the event handler. Declaration public static void Timeout(this IElement element, ProgressEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.ProgressEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source Timeout(IElement, Boolean, Int64, Int64, String) Raises the @ontimeout event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.ProgressEventArgs object. Declaration public static void Timeout(this IElement element, bool lengthComputable = false, long loaded = 0L, long total = 0L, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Boolean lengthComputable Whether or not the total size of the transfer is known. System.Int64 loaded The number of bytes transferred since the beginning of the operation. This doesn't include headers and other overhead, but only the content itself. System.Int64 total The total number of bytes of content that will be transferred during the operation. If the total size is unknown, this value is zero. System.String type Gets or sets the type of the event."
  },
  "api/Bunit.RazorTesting.FixtureBase-1.html": {
    "href": "api/Bunit.RazorTesting.FixtureBase-1.html",
    "title": "Class FixtureBase<TFixture> | bUnit",
    "keywords": "Class FixtureBase<TFixture> Represents a single fixture in a Razor based test. Used to define the ComponentUnderTest and any Fragment 's you might need during testing, and assert against them in the Test methods. Inheritance System.Object TestContextBase RazorTestBase FixtureBase<TFixture> Fixture Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members RazorTestBase.IsRunning RazorTestBase.Description RazorTestBase.Skip RazorTestBase.Timeout RazorTestBase.RunTest() RazorTestBase.IComponent.Attach(RenderHandle) RazorTestBase.Run() RazorTestBase.TryRun<T>(Action<T>, T) RazorTestBase.TryRunAsync<T>(Func<T, Task>, T) TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.Dispose() TestContextBase.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public abstract class FixtureBase<TFixture> : RazorTestBase, IDisposable, IComponent Type Parameters Name Description TFixture Properties | Improve this Doc View Source ChildContent Gets or sets the child content of the fragment. Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source DisplayName Declaration public override string DisplayName { get; } Property Value Type Description System.String Overrides RazorTestBase.DisplayName | Improve this Doc View Source Setup Gets or sets the setup action to perform before the Test action or TestAsync action are invoked. Declaration [Parameter] public Action<TFixture> Setup { get; set; } Property Value Type Description System.Action <TFixture> | Improve this Doc View Source SetupAsync Gets or sets the asynchronous setup action to perform before the Test action or TestAsync action are invoked. Declaration [Parameter] public Func<TFixture, Task> SetupAsync { get; set; } Property Value Type Description System.Func <TFixture, System.Threading.Tasks.Task > | Improve this Doc View Source Test Gets or sets the test action to invoke, after the Setup and SetupAsync actions has invoked (if provided). If this is set, then TestAsync cannot also be set. Declaration [Parameter] public Action<TFixture> Test { get; set; } Property Value Type Description System.Action <TFixture> | Improve this Doc View Source TestAsync Gets or sets the test action to invoke, after the Setup and SetupAsync actions has invoked (if provided). If this is set, then Test cannot also be set. Declaration [Parameter] public Func<TFixture, Task> TestAsync { get; set; } Property Value Type Description System.Func <TFixture, System.Threading.Tasks.Task > Methods | Improve this Doc View Source Run(TFixture) Declaration protected virtual Task Run(TFixture self) Parameters Type Name Description TFixture self Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.SetParametersAsync(ParameterView) | Improve this Doc View Source Validate() Declaration public override void Validate() Overrides RazorTestBase.Validate() Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.RazorTesting.FragmentBase.html": {
    "href": "api/Bunit.RazorTesting.FragmentBase.html",
    "title": "Class FragmentBase | bUnit",
    "keywords": "Class FragmentBase Represents a component that can be used to capture a render fragment. Inheritance System.Object FragmentBase ComponentUnderTest Fragment Implements Microsoft.AspNetCore.Components.IComponent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public abstract class FragmentBase : IComponent Properties | Improve this Doc View Source ChildContent Gets or sets the child content of the fragment. Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment Methods | Improve this Doc View Source Attach(RenderHandle) Declaration public void Attach(RenderHandle renderHandle) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderHandle renderHandle | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public virtual Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RazorTesting.FragmentContainer.html": {
    "href": "api/Bunit.RazorTesting.FragmentContainer.html",
    "title": "Class FragmentContainer | bUnit",
    "keywords": "Class FragmentContainer Creates an instance of the FragmentContainer , which is used when a fragment is rendered inside a test contexts render tree. It is primarily used to be able to find the starting point to return. Inheritance System.Object Microsoft.AspNetCore.Components.ComponentBase FragmentContainer Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Components.ComponentBase.OnInitialized() Microsoft.AspNetCore.Components.ComponentBase.OnInitializedAsync() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSet() Microsoft.AspNetCore.Components.ComponentBase.OnParametersSetAsync() Microsoft.AspNetCore.Components.ComponentBase.StateHasChanged() Microsoft.AspNetCore.Components.ComponentBase.ShouldRender() Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean) Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Action) Microsoft.AspNetCore.Components.ComponentBase.InvokeAsync(System.Func<System.Threading.Tasks.Task>) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IComponent.Attach(Microsoft.AspNetCore.Components.RenderHandle) Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleEvent.HandleEventAsync(Microsoft.AspNetCore.Components.EventCallbackWorkItem, System.Object) Microsoft.AspNetCore.Components.ComponentBase.Microsoft.AspNetCore.Components.IHandleAfterRender.OnAfterRenderAsync() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public sealed class FragmentContainer : ComponentBase, IComponent, IHandleEvent, IHandleAfterRender Properties | Improve this Doc View Source ChildContent The content to wrap. Declaration [Parameter] public RenderFragment ChildContent { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Components.ComponentBase.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder) | Improve this Doc View Source Wrap(RenderFragment) Wraps the wrappingTarget in a FragmentContainer . Declaration public static RenderFragment Wrap(RenderFragment wrappingTarget) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment wrappingTarget Returns Type Description Microsoft.AspNetCore.Components.RenderFragment Implements Microsoft.AspNetCore.Components.IComponent Microsoft.AspNetCore.Components.IHandleEvent Microsoft.AspNetCore.Components.IHandleAfterRender Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RazorTesting.html": {
    "href": "api/Bunit.RazorTesting.html",
    "title": "Namespace Bunit.RazorTesting | bUnit",
    "keywords": "Namespace Bunit.RazorTesting Classes FixtureBase<TFixture> Represents a single fixture in a Razor based test. Used to define the ComponentUnderTest and any Fragment 's you might need during testing, and assert against them in the Test methods. FragmentBase Represents a component that can be used to capture a render fragment. FragmentContainer Creates an instance of the FragmentContainer , which is used when a fragment is rendered inside a test contexts render tree. It is primarily used to be able to find the starting point to return. ParameterException Represents an missing or invalid Blazor parameter on a Blazor component. RazorTestBase Represents a component used to define tests in Razor files."
  },
  "api/Bunit.RazorTesting.ParameterException.html": {
    "href": "api/Bunit.RazorTesting.ParameterException.html",
    "title": "Class ParameterException | bUnit",
    "keywords": "Class ParameterException Represents an missing or invalid Blazor parameter on a Blazor component. Inheritance System.Object System.Exception System.SystemException System.ArgumentException ParameterException Implements System.Runtime.Serialization.ISerializable Inherited Members System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax [Serializable] public sealed class ParameterException : ArgumentException, ISerializable Constructors | Improve this Doc View Source ParameterException(String, String) Creates an instance of the ParameterException class. Declaration public ParameterException(string messsage, string parameterName) Parameters Type Name Description System.String messsage Validation message. System.String parameterName Name of the Blazor parameter. Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.RazorTesting.RazorTestBase.html": {
    "href": "api/Bunit.RazorTesting.RazorTestBase.html",
    "title": "Class RazorTestBase | bUnit",
    "keywords": "Class RazorTestBase Represents a component used to define tests in Razor files. Inheritance System.Object TestContextBase RazorTestBase FixtureBase<TFixture> SnapshotTest Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.Dispose() TestContextBase.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.RazorTesting Assembly : Bunit.Core.dll Syntax public abstract class RazorTestBase : TestContextBase, IDisposable, IComponent Properties | Improve this Doc View Source Description A description or name for the test that will be displayed if the test fails. Declaration [Parameter] public virtual string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source DisplayName Gets the name of the test, which is displayed by the test runner/explorer. Declaration public abstract string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source IsRunning Gets whether the tests is running or not. Declaration public bool IsRunning { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Skip Gets or sets a reason for skipping the test. If not set (null), the test will not be skipped. Declaration [Parameter] public virtual string Skip { get; set; } Property Value Type Description System.String | Improve this Doc View Source Timeout Gets or sets the timeout of the test, in milliseconds; if zero or negative, means the test case has no timeout. Declaration [Parameter] public virtual TimeSpan? Timeout { get; set; } Property Value Type Description System.Nullable < System.TimeSpan > Methods | Improve this Doc View Source Run() Implements the logic for running the test. Declaration protected abstract Task Run() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RunTest() Run the test logic of the RazorTestBase . Declaration public Task RunTest() Returns Type Description System.Threading.Tasks.Task Exceptions Type Condition System.InvalidOperationException Thrown when called and IsRunning is true. | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public virtual Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source TryRun<T>(Action<T>, T) Try to run the System.Action<T> . Declaration protected static void TryRun<T>(Action<T> action, T input) Parameters Type Name Description System.Action <T> action T input Type Parameters Name Description T | Improve this Doc View Source TryRunAsync<T>(Func<T, Task>, T) Try to run the System.Func<T, TResult> . Declaration protected static Task TryRunAsync<T>(Func<T, Task> action, T input) Parameters Type Name Description System.Func <T, System.Threading.Tasks.Task > action T input Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T | Improve this Doc View Source Validate() Validates the test and throws an exception if the test does not have received all input it needs to run. Declaration public virtual void Validate() Explicit Interface Implementations | Improve this Doc View Source IComponent.Attach(RenderHandle) Declaration void IComponent.Attach(RenderHandle renderHandle) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderHandle renderHandle Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.RenderedComponentInvokeAsyncExtensions.html": {
    "href": "api/Bunit.RenderedComponentInvokeAsyncExtensions.html",
    "title": "Class RenderedComponentInvokeAsyncExtensions | bUnit",
    "keywords": "Class RenderedComponentInvokeAsyncExtensions InvokeAsync extensions methods on IRenderedComponentBase<TComponent> . Inheritance System.Object RenderedComponentInvokeAsyncExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class RenderedComponentInvokeAsyncExtensions Methods | Improve this Doc View Source InvokeAsync<TComponent>(IRenderedComponentBase<TComponent>, Action) Invokes the given callback in the context of the associated ITestRenderer . Declaration public static Task InvokeAsync<TComponent>(this IRenderedComponentBase<TComponent> renderedComponent, Action callback) where TComponent : IComponent Parameters Type Name Description IRenderedComponentBase <TComponent> renderedComponent The rendered component whose dispatcher to invoke with. System.Action callback Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that will be completed when the action has finished executing or is suspended by an asynchronous operation. Type Parameters Name Description TComponent | Improve this Doc View Source InvokeAsync<TComponent>(IRenderedComponentBase<TComponent>, Func<Task>) Invokes the given callback in the context of the associated ITestRenderer . Declaration public static Task InvokeAsync<TComponent>(this IRenderedComponentBase<TComponent> renderedComponent, Func<Task> callback) where TComponent : IComponent Parameters Type Name Description IRenderedComponentBase <TComponent> renderedComponent The rendered component whose dispatcher to invoke with. System.Func < System.Threading.Tasks.Task > callback Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task that will be completed when the action has finished executing. Type Parameters Name Description TComponent"
  },
  "api/Bunit.RenderedComponentRenderExtensions.html": {
    "href": "api/Bunit.RenderedComponentRenderExtensions.html",
    "title": "Class RenderedComponentRenderExtensions | bUnit",
    "keywords": "Class RenderedComponentRenderExtensions Re-render extension methods, optionally with new parameters, for IRenderedComponentBase<TComponent> . Inheritance System.Object RenderedComponentRenderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class RenderedComponentRenderExtensions Methods | Improve this Doc View Source Render<TComponent>(IRenderedComponentBase<TComponent>) Render the component under test again. Declaration public static void Render<TComponent>(this IRenderedComponentBase<TComponent> renderedComponent) where TComponent : IComponent Parameters Type Name Description IRenderedComponentBase <TComponent> renderedComponent The rendered component to re-render. Type Parameters Name Description TComponent | Improve this Doc View Source SetParametersAndRender<TComponent>(IRenderedComponentBase<TComponent>, ComponentParameter[]) Render the component under test again with the provided parameters . Declaration public static void SetParametersAndRender<TComponent>(this IRenderedComponentBase<TComponent> renderedComponent, params ComponentParameter[] parameters) where TComponent : IComponent Parameters Type Name Description IRenderedComponentBase <TComponent> renderedComponent The rendered component to re-render with new parameters ComponentParameter [] parameters Parameters to pass to the component upon rendered Type Parameters Name Description TComponent | Improve this Doc View Source SetParametersAndRender<TComponent>(IRenderedComponentBase<TComponent>, ParameterView) Render the component under test again with the provided parameters . Declaration public static void SetParametersAndRender<TComponent>(this IRenderedComponentBase<TComponent> renderedComponent, ParameterView parameters) where TComponent : IComponent Parameters Type Name Description IRenderedComponentBase <TComponent> renderedComponent The rendered component to re-render with new parameters Microsoft.AspNetCore.Components.ParameterView parameters Parameters to pass to the component upon rendered Type Parameters Name Description TComponent | Improve this Doc View Source SetParametersAndRender<TComponent>(IRenderedComponentBase<TComponent>, Action<ComponentParameterCollectionBuilder<TComponent>>) Render the component under test again with the provided parameters from the parameterBuilder . Declaration public static void SetParametersAndRender<TComponent>(this IRenderedComponentBase<TComponent> renderedComponent, Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder) where TComponent : IComponent Parameters Type Name Description IRenderedComponentBase <TComponent> renderedComponent The rendered component to re-render with new parameters System.Action < ComponentParameterCollectionBuilder <TComponent>> parameterBuilder An action that receives a ComponentParameterCollectionBuilder<TComponent> . Type Parameters Name Description TComponent"
  },
  "api/Bunit.RenderedFragmentExtensions.html": {
    "href": "api/Bunit.RenderedFragmentExtensions.html",
    "title": "Class RenderedFragmentExtensions | bUnit",
    "keywords": "Class RenderedFragmentExtensions Helper methods for querying IRenderedFragment . Inheritance System.Object RenderedFragmentExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class RenderedFragmentExtensions Methods | Improve this Doc View Source Find(IRenderedFragment, String) Returns the first element from the rendered fragment or component under test, using the provided cssSelector , in a depth-first pre-order traversal of the rendered nodes. Declaration public static IElement Find(this IRenderedFragment renderedFragment, string cssSelector) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to search. System.String cssSelector The group of selectors to use. Returns Type Description AngleSharp.Dom.IElement | Improve this Doc View Source FindAll(IRenderedFragment, String, Boolean) Returns a refreshable collection of AngleSharp.Dom.IElement s from the rendered fragment or component under test, using the provided cssSelector , in a depth-first pre-order traversal of the rendered nodes. Declaration public static IRefreshableElementCollection<IElement> FindAll(this IRenderedFragment renderedFragment, string cssSelector, bool enableAutoRefresh = false) Parameters Type Name Description IRenderedFragment renderedFragment The rendered fragment to search. System.String cssSelector The group of selectors to use. System.Boolean enableAutoRefresh If true, the returned IRefreshableElementCollection<T> will automatically refresh its AngleSharp.Dom.IElement s whenever the renderedFragment changes. Returns Type Description IRefreshableElementCollection < AngleSharp.Dom.IElement > An IRefreshableElementCollection<T> , that can be refreshed to execute the search again. | Improve this Doc View Source FindComponent<TComponent>(IRenderedFragment) Finds the first component of type TComponent in the render tree of this IRenderedFragment . Declaration public static IRenderedComponent<TComponent> FindComponent<TComponent>(this IRenderedFragment renderedFragment) where TComponent : IComponent Parameters Type Name Description IRenderedFragment renderedFragment Returns Type Description IRenderedComponent <TComponent> The IRenderedComponent<TComponent> . Type Parameters Name Description TComponent Type of component to find. Exceptions Type Condition ComponentNotFoundException Thrown if a component of type TComponent was not found in the render tree. | Improve this Doc View Source FindComponents<TComponent>(IRenderedFragment) Finds all components of type TComponent in the render tree of this IRenderedFragment , in depth-first order. Declaration public static IReadOnlyList<IRenderedComponent<TComponent>> FindComponents<TComponent>(this IRenderedFragment renderedFragment) where TComponent : IComponent Parameters Type Name Description IRenderedFragment renderedFragment Returns Type Description System.Collections.Generic.IReadOnlyList < IRenderedComponent <TComponent>> The IRenderedComponent<TComponent> s Type Parameters Name Description TComponent Type of components to find."
  },
  "api/Bunit.RenderedFragmentWaitForHelperExtensions.html": {
    "href": "api/Bunit.RenderedFragmentWaitForHelperExtensions.html",
    "title": "Class RenderedFragmentWaitForHelperExtensions | bUnit",
    "keywords": "Class RenderedFragmentWaitForHelperExtensions Helper methods dealing with async rendering during testing. Inheritance System.Object RenderedFragmentWaitForHelperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public static class RenderedFragmentWaitForHelperExtensions Methods | Improve this Doc View Source WaitForState(IRenderedFragmentBase, Func<Boolean>, Nullable<TimeSpan>) Wait until the provided statePredicate action returns true, or the timeout is reached (default is one second). The statePredicate is evaluated initially, and then each time the renderedFragment renders. Declaration public static void WaitForState(this IRenderedFragmentBase renderedFragment, Func<bool> statePredicate, TimeSpan? timeout = default(TimeSpan? )) Parameters Type Name Description IRenderedFragmentBase renderedFragment The render fragment or component to attempt to verify state against. System.Func < System.Boolean > statePredicate The predicate to invoke after each render, which must returns true when the desired state has been reached. System.Nullable < System.TimeSpan > timeout The maximum time to wait for the desired state. Exceptions Type Condition WaitForFailedException Thrown if the statePredicate throw an exception during invocation, or if the timeout has been reached. See the inner exception for details."
  },
  "api/Bunit.Rendering.BunitHtmlParser.html": {
    "href": "api/Bunit.Rendering.BunitHtmlParser.html",
    "title": "Class BunitHtmlParser | bUnit",
    "keywords": "Class BunitHtmlParser A AngleSharp based HTML Parse that can parse markup strings into a AngleSharp.Dom.INodeList . Inheritance System.Object BunitHtmlParser Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Web.dll Syntax public sealed class BunitHtmlParser : IDisposable Constructors | Improve this Doc View Source BunitHtmlParser() Creates an instance of the parser with a AngleSharp context without a TestRenderer registered. Declaration public BunitHtmlParser() | Improve this Doc View Source BunitHtmlParser(ITestRenderer, HtmlComparer, TestContextBase) Creates an instance of the parser with a AngleSharp context with the testRenderer registered. Declaration public BunitHtmlParser(ITestRenderer testRenderer, HtmlComparer htmlComparer, TestContextBase testContext) Parameters Type Name Description ITestRenderer testRenderer HtmlComparer htmlComparer TestContextBase testContext Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Parse(String) Parses a markup HTML string using AngleSharps HTML5 parser. Declaration public INodeList Parse(string markup) Parameters Type Name Description System.String markup The markup to parse. Returns Type Description AngleSharp.Dom.INodeList The AngleSharp.Dom.INodeList . Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.ComponentDisposedException.html": {
    "href": "api/Bunit.Rendering.ComponentDisposedException.html",
    "title": "Class ComponentDisposedException | bUnit",
    "keywords": "Class ComponentDisposedException Represents an exception that is thrown when a IRenderedFragmentBase 's properties is accessed after the underlying component has been dispsoed by the renderer. Inheritance System.Object System.Exception ComponentDisposedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax [Serializable] public sealed class ComponentDisposedException : Exception, ISerializable Constructors | Improve this Doc View Source ComponentDisposedException(Int32) Creates an instance of the ComponentDisposedException . Declaration public ComponentDisposedException(int componentId) Parameters Type Name Description System.Int32 componentId Id of the disposed component. Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.ComponentNotFoundException.html": {
    "href": "api/Bunit.Rendering.ComponentNotFoundException.html",
    "title": "Class ComponentNotFoundException | bUnit",
    "keywords": "Class ComponentNotFoundException Represents an exception that is thrown when a search for a component did not succeed. Inheritance System.Object System.Exception ComponentNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax [Serializable] public sealed class ComponentNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ComponentNotFoundException(Type) Creates an instance of the ComponentNotFoundException type. Declaration public ComponentNotFoundException(Type componentType) Parameters Type Name Description System.Type componentType The type of component that was not found. Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.html": {
    "href": "api/Bunit.Rendering.html",
    "title": "Namespace Bunit.Rendering | bUnit",
    "keywords": "Namespace Bunit.Rendering Classes BunitHtmlParser A AngleSharp based HTML Parse that can parse markup strings into a AngleSharp.Dom.INodeList . ComponentDisposedException Represents an exception that is thrown when a IRenderedFragmentBase 's properties is accessed after the underlying component has been dispsoed by the renderer. ComponentNotFoundException Represents an exception that is thrown when a search for a component did not succeed. RenderedComponentActivator Represents a rendered component activator for bUnit.web. RenderEvent Represents an render event from a ITestRenderer . RenderTreeFrameCollection Represents a collection of Microsoft.AspNetCore.Components.RenderTree.ArrayRange<T> . RootRenderTree Represents a root render tree, wherein components under tests will be rendered. Components added to the render tree must have either a ChildContent or Body parameter. RootRenderTreeRegistration Represents an added component with parameters in an RootRenderTree . TestComponentRenderer Represents a renderer specifically for rendering Razor-based test files (but not the actual tests inside). TestRenderer Represents a bUnit ITestRenderer used to render Blazor components and fragments during bUnit tests. WebTestRenderer Represents a ITestRenderer that is used when rendering Blazor components for the web. Interfaces IRenderedComponentActivator Represents an activator for IRenderedFragmentBase and IRenderedComponentBase<TComponent> types. ITestRenderer Represents a generalized Blazor renderer for testing purposes."
  },
  "api/Bunit.Rendering.IRenderedComponentActivator.html": {
    "href": "api/Bunit.Rendering.IRenderedComponentActivator.html",
    "title": "Interface IRenderedComponentActivator | bUnit",
    "keywords": "Interface IRenderedComponentActivator Represents an activator for IRenderedFragmentBase and IRenderedComponentBase<TComponent> types. Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public interface IRenderedComponentActivator Methods | Improve this Doc View Source CreateRenderedComponent<TComponent>(Int32) Creates an IRenderedComponentBase<TComponent> with the specified componentId . Declaration IRenderedComponentBase<TComponent> CreateRenderedComponent<TComponent>(int componentId) where TComponent : IComponent Parameters Type Name Description System.Int32 componentId Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source CreateRenderedComponent<TComponent>(Int32, TComponent, RenderTreeFrameCollection) Creates an IRenderedComponentBase<TComponent> with the specified componentId , component , and componentFrames . Declaration IRenderedComponentBase<TComponent> CreateRenderedComponent<TComponent>(int componentId, TComponent component, RenderTreeFrameCollection componentFrames) where TComponent : IComponent Parameters Type Name Description System.Int32 componentId TComponent component RenderTreeFrameCollection componentFrames Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source CreateRenderedFragment(Int32) Creates an IRenderedFragmentBase with the specified componentId . Declaration IRenderedFragmentBase CreateRenderedFragment(int componentId) Parameters Type Name Description System.Int32 componentId Returns Type Description IRenderedFragmentBase Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.ITestRenderer.html": {
    "href": "api/Bunit.Rendering.ITestRenderer.html",
    "title": "Interface ITestRenderer | bUnit",
    "keywords": "Interface ITestRenderer Represents a generalized Blazor renderer for testing purposes. Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public interface ITestRenderer Properties | Improve this Doc View Source Dispatcher Gets the Dispatcher associated with this ITestRenderer . Declaration Dispatcher Dispatcher { get; } Property Value Type Description Microsoft.AspNetCore.Components.Dispatcher Methods | Improve this Doc View Source DispatchEventAsync(UInt64, EventFieldInfo, EventArgs) Notifies the renderer that an event has occurred. Declaration Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs) Parameters Type Name Description System.UInt64 eventHandlerId The Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId value from the original event attribute. Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo Information that the renderer can use to update the state of the existing render tree to match the UI. System.EventArgs eventArgs Arguments to be passed to the event handler. Returns Type Description System.Threading.Tasks.Task A System.Threading.Tasks.Task which will complete once all asynchronous processing related to the event has completed. | Improve this Doc View Source FindComponent<TComponent>(IRenderedFragmentBase) Performs a depth-first search for the first TComponent child component of the parentComponent . Declaration IRenderedComponentBase<TComponent> FindComponent<TComponent>(IRenderedFragmentBase parentComponent) where TComponent : IComponent Parameters Type Name Description IRenderedFragmentBase parentComponent Parent component to search. Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent Type of component to find. | Improve this Doc View Source FindComponents<TComponent>(IRenderedFragmentBase) Performs a depth-first search for all TComponent child components of the parentComponent . Declaration IReadOnlyList<IRenderedComponentBase<TComponent>> FindComponents<TComponent>(IRenderedFragmentBase parentComponent) where TComponent : IComponent Parameters Type Name Description IRenderedFragmentBase parentComponent Parent component to search. Returns Type Description System.Collections.Generic.IReadOnlyList < IRenderedComponentBase <TComponent>> Type Parameters Name Description TComponent Type of components to find. | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameterCollection) Renders a TComponent with the parameters passed to it. Declaration IRenderedComponentBase<TComponent> RenderComponent<TComponent>(ComponentParameterCollection parameters) where TComponent : IComponent Parameters Type Name Description ComponentParameterCollection parameters The parameters to pass to the component. Returns Type Description IRenderedComponentBase <TComponent> A IRenderedComponentBase<TComponent> that provides access to the rendered component. Type Parameters Name Description TComponent The type of component to render. | Improve this Doc View Source RenderFragment(RenderFragment) Renders the renderFragment . Declaration IRenderedFragmentBase RenderFragment(RenderFragment renderFragment) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment The Microsoft.AspNetCore.Components.RenderFragment to render. Returns Type Description IRenderedFragmentBase A IRenderedFragmentBase that provides access to the rendered renderFragment . Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) TestRendererExtensions.RenderComponent<TComponent>(ITestRenderer, ComponentParameter[]) TestRendererExtensions.RenderComponent<TComponent>(ITestRenderer, Action<ComponentParameterCollectionBuilder<TComponent>>)"
  },
  "api/Bunit.Rendering.RenderedComponentActivator.html": {
    "href": "api/Bunit.Rendering.RenderedComponentActivator.html",
    "title": "Class RenderedComponentActivator | bUnit",
    "keywords": "Class RenderedComponentActivator Represents a rendered component activator for bUnit.web. Inheritance System.Object RenderedComponentActivator Implements IRenderedComponentActivator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Web.dll Syntax public sealed class RenderedComponentActivator : IRenderedComponentActivator Constructors | Improve this Doc View Source RenderedComponentActivator(IServiceProvider) Creates an instance of the activator. Declaration public RenderedComponentActivator(IServiceProvider services) Parameters Type Name Description System.IServiceProvider services Methods | Improve this Doc View Source CreateRenderedComponent<TComponent>(Int32) Declaration public IRenderedComponentBase<TComponent> CreateRenderedComponent<TComponent>(int componentId) where TComponent : IComponent Parameters Type Name Description System.Int32 componentId Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source CreateRenderedComponent<TComponent>(Int32, TComponent, RenderTreeFrameCollection) Declaration public IRenderedComponentBase<TComponent> CreateRenderedComponent<TComponent>(int componentId, TComponent component, RenderTreeFrameCollection componentFrames) where TComponent : IComponent Parameters Type Name Description System.Int32 componentId TComponent component RenderTreeFrameCollection componentFrames Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source CreateRenderedFragment(Int32) Declaration public IRenderedFragmentBase CreateRenderedFragment(int componentId) Parameters Type Name Description System.Int32 componentId Returns Type Description IRenderedFragmentBase Implements IRenderedComponentActivator Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.RenderEvent.html": {
    "href": "api/Bunit.Rendering.RenderEvent.html",
    "title": "Class RenderEvent | bUnit",
    "keywords": "Class RenderEvent Represents an render event from a ITestRenderer . Inheritance System.Object RenderEvent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public sealed class RenderEvent Properties | Improve this Doc View Source Frames A collection of Microsoft.AspNetCore.Components.RenderTree.ArrayRange<T> , accessible via the ID of the component they are created by. Declaration public RenderTreeFrameCollection Frames { get; } Property Value Type Description RenderTreeFrameCollection Methods | Improve this Doc View Source GetRenderStatus(IRenderedFragmentBase) Gets the render status for a renderedComponent . Declaration public (bool rendered, bool changed, bool disposed) GetRenderStatus(IRenderedFragmentBase renderedComponent) Parameters Type Name Description IRenderedFragmentBase renderedComponent The renderedComponent to get the status for. Returns Type Description System.ValueTuple < System.Boolean , System.Boolean , System.Boolean > A tuple of statuses indicating whether the rendered component rendered during the render cycle, if it changed or if it was disposed. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.RenderTreeFrameCollection.html": {
    "href": "api/Bunit.Rendering.RenderTreeFrameCollection.html",
    "title": "Class RenderTreeFrameCollection | bUnit",
    "keywords": "Class RenderTreeFrameCollection Represents a collection of Microsoft.AspNetCore.Components.RenderTree.ArrayRange<T> . Inheritance System.Object RenderTreeFrameCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public sealed class RenderTreeFrameCollection Properties | Improve this Doc View Source Item[Int32] Gets the Microsoft.AspNetCore.Components.RenderTree.ArrayRange<T> associated with the componentId . Declaration public ArrayRange<RenderTreeFrame> this[int componentId] { get; } Parameters Type Name Description System.Int32 componentId Property Value Type Description Microsoft.AspNetCore.Components.RenderTree.ArrayRange < Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame > Methods | Improve this Doc View Source Contains(Int32) Checks whether the collection contains a Microsoft.AspNetCore.Components.RenderTree.ArrayRange<T> for the componentId . Declaration public bool Contains(int componentId) Parameters Type Name Description System.Int32 componentId Returns Type Description System.Boolean Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.RootRenderTree.html": {
    "href": "api/Bunit.Rendering.RootRenderTree.html",
    "title": "Class RootRenderTree | bUnit",
    "keywords": "Class RootRenderTree Represents a root render tree, wherein components under tests will be rendered. Components added to the render tree must have either a ChildContent or Body parameter. Inheritance System.Object RootRenderTree Implements System.Collections.Generic.IReadOnlyCollection < RootRenderTreeRegistration > System.Collections.Generic.IEnumerable < RootRenderTreeRegistration > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public sealed class RootRenderTree : IReadOnlyCollection<RootRenderTreeRegistration>, IEnumerable<RootRenderTreeRegistration>, IEnumerable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) Adds a component to the render tree. This method can be called multiple times, with each invocation adding a component to the render tree. The TComponent must have a ChildContent or Body parameter. Declaration public void Add<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder = null) where TComponent : IComponent Parameters Type Name Description System.Action < ComponentParameterCollectionBuilder <TComponent>> parameterBuilder An optional parameter builder, used to pass parameters to TComponent . Type Parameters Name Description TComponent The type of the component to add to the render tree. | Improve this Doc View Source GetCountOf<TComponent>() Gets the number of registered components of type TComponent in the render tree. Declaration public int GetCountOf<TComponent>() where TComponent : IComponent Returns Type Description System.Int32 Number of components of type TComponent in render tree. Type Parameters Name Description TComponent Component type to count. | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<RootRenderTreeRegistration> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < RootRenderTreeRegistration > | Improve this Doc View Source TryAdd<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) Try to add a component to the render tree if it has not already been added. This method can be called multiple times, with each invocation adding a component to the render tree. The TComponent must have a ChildContent or Body parameter. Declaration public bool TryAdd<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder = null) where TComponent : IComponent Parameters Type Name Description System.Action < ComponentParameterCollectionBuilder <TComponent>> parameterBuilder An optional parameter builder, used to pass parameters to TComponent . Returns Type Description System.Boolean True if component was added, false if it was previously added and not added again. Type Parameters Name Description TComponent The type of the component to add to the render tree. Remarks This method will only add the component to the render tree if it has not already been added. Use Add<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) to add the same component multiple times. | Improve this Doc View Source Wrap(RenderFragment) Creates a new Microsoft.AspNetCore.Components.RenderFragment that wraps target inside the components registered in this RootRenderTree . Declaration public RenderFragment Wrap(RenderFragment target) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment target Microsoft.AspNetCore.Components.RenderFragment to render inside the render tree. Returns Type Description Microsoft.AspNetCore.Components.RenderFragment A Microsoft.AspNetCore.Components.RenderFragment that renders the target inside this RootRenderTree render tree. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.RootRenderTreeRegistration.html": {
    "href": "api/Bunit.Rendering.RootRenderTreeRegistration.html",
    "title": "Class RootRenderTreeRegistration | bUnit",
    "keywords": "Class RootRenderTreeRegistration Represents an added component with parameters in an RootRenderTree . Inheritance System.Object RootRenderTreeRegistration Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public sealed class RootRenderTreeRegistration Properties | Improve this Doc View Source ComponentType Gets the type of component registered. Declaration public Type ComponentType { get; } Property Value Type Description System.Type | Improve this Doc View Source RenderFragmentBuilder Gets the render fragment builder that renders the component of type ComponentType with the specified parameters and the provided Microsoft.AspNetCore.Components.RenderFragment passed to its ChildContent or Body parameter. Declaration public RenderFragment<RenderFragment> RenderFragmentBuilder { get; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment < Microsoft.AspNetCore.Components.RenderFragment > Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.TestComponentRenderer.html": {
    "href": "api/Bunit.Rendering.TestComponentRenderer.html",
    "title": "Class TestComponentRenderer | bUnit",
    "keywords": "Class TestComponentRenderer Represents a renderer specifically for rendering Razor-based test files (but not the actual tests inside). Inheritance System.Object Microsoft.AspNetCore.Components.RenderTree.Renderer TestComponentRenderer Implements System.IDisposable Inherited Members Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type) Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent) Microsoft.AspNetCore.Components.RenderTree.Renderer.GetCurrentRenderTreeFrames(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32, Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64, Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo, System.EventArgs) Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender() Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(System.Boolean) Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose() Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public class TestComponentRenderer : Renderer, IDisposable Constructors | Improve this Doc View Source TestComponentRenderer() Creates an instance of the TestComponentRenderer . Declaration public TestComponentRenderer() | Improve this Doc View Source TestComponentRenderer(IServiceProvider, ILoggerFactory) Creates an instance of the TestComponentRenderer . Declaration public TestComponentRenderer(IServiceProvider serviceProvider, ILoggerFactory loggerFactory) Parameters Type Name Description System.IServiceProvider serviceProvider Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Properties | Improve this Doc View Source Dispatcher Declaration public override Dispatcher Dispatcher { get; } Property Value Type Description Microsoft.AspNetCore.Components.Dispatcher Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher Methods | Improve this Doc View Source GetRazorTestsFromComponent(Type) Renders an instance of the specified Razor-based test. Declaration public IReadOnlyList<RazorTestBase> GetRazorTestsFromComponent(Type componentType) Parameters Type Name Description System.Type componentType Razor-based test to render. Returns Type Description System.Collections.Generic.IReadOnlyList < RazorTestBase > A list of FragmentBase test definitions found in the test file. | Improve this Doc View Source HandleException(Exception) Declaration protected override void HandleException(Exception exception) Parameters Type Name Description System.Exception exception Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleException(System.Exception) | Improve this Doc View Source UpdateDisplayAsync(RenderBatch) Declaration protected override Task UpdateDisplayAsync(in RenderBatch renderBatch) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch) Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Rendering.TestRenderer.html": {
    "href": "api/Bunit.Rendering.TestRenderer.html",
    "title": "Class TestRenderer | bUnit",
    "keywords": "Class TestRenderer Represents a bUnit ITestRenderer used to render Blazor components and fragments during bUnit tests. Inheritance System.Object Microsoft.AspNetCore.Components.RenderTree.Renderer TestRenderer WebTestRenderer Implements System.IDisposable ITestRenderer Inherited Members Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type) Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent) Microsoft.AspNetCore.Components.RenderTree.Renderer.GetCurrentRenderTreeFrames(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32, Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose() Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Core.dll Syntax public class TestRenderer : Renderer, IDisposable, ITestRenderer Constructors | Improve this Doc View Source TestRenderer(IRenderedComponentActivator, IServiceProvider, ILoggerFactory) Creates an instance of the TestRenderer . Declaration public TestRenderer(IRenderedComponentActivator activator, IServiceProvider services, ILoggerFactory loggerFactory) Parameters Type Name Description IRenderedComponentActivator activator System.IServiceProvider services Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Properties | Improve this Doc View Source Dispatcher Declaration public override Dispatcher Dispatcher { get; } Property Value Type Description Microsoft.AspNetCore.Components.Dispatcher Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher Methods | Improve this Doc View Source DispatchEventAsync(UInt64, EventFieldInfo, EventArgs) Declaration public Task DispatchEventAsync(ulong eventHandlerId, EventFieldInfo fieldInfo, EventArgs eventArgs) Parameters Type Name Description System.UInt64 eventHandlerId Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo System.EventArgs eventArgs Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(System.Boolean) | Improve this Doc View Source FindComponent<TComponent>(IRenderedFragmentBase) Declaration public IRenderedComponentBase<TComponent> FindComponent<TComponent>(IRenderedFragmentBase parentComponent) where TComponent : IComponent Parameters Type Name Description IRenderedFragmentBase parentComponent Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source FindComponents<TComponent>(IRenderedFragmentBase) Declaration public IReadOnlyList<IRenderedComponentBase<TComponent>> FindComponents<TComponent>(IRenderedFragmentBase parentComponent) where TComponent : IComponent Parameters Type Name Description IRenderedFragmentBase parentComponent Returns Type Description System.Collections.Generic.IReadOnlyList < IRenderedComponentBase <TComponent>> Type Parameters Name Description TComponent | Improve this Doc View Source HandleException(Exception) Declaration protected override void HandleException(Exception exception) Parameters Type Name Description System.Exception exception Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleException(System.Exception) | Improve this Doc View Source ProcessPendingRender() Declaration protected override void ProcessPendingRender() Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender() | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameterCollection) Declaration public IRenderedComponentBase<TComponent> RenderComponent<TComponent>(ComponentParameterCollection parameters) where TComponent : IComponent Parameters Type Name Description ComponentParameterCollection parameters Returns Type Description IRenderedComponentBase <TComponent> Type Parameters Name Description TComponent | Improve this Doc View Source RenderFragment(RenderFragment) Declaration public IRenderedFragmentBase RenderFragment(RenderFragment renderFragment) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment Returns Type Description IRenderedFragmentBase | Improve this Doc View Source UpdateDisplayAsync(RenderBatch) Declaration protected override Task UpdateDisplayAsync(in RenderBatch renderBatch) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Components.RenderTree.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch) Implements System.IDisposable ITestRenderer Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) TestRendererExtensions.RenderComponent<TComponent>(ITestRenderer, ComponentParameter[]) TestRendererExtensions.RenderComponent<TComponent>(ITestRenderer, Action<ComponentParameterCollectionBuilder<TComponent>>)"
  },
  "api/Bunit.Rendering.WebTestRenderer.html": {
    "href": "api/Bunit.Rendering.WebTestRenderer.html",
    "title": "Class WebTestRenderer | bUnit",
    "keywords": "Class WebTestRenderer Represents a ITestRenderer that is used when rendering Blazor components for the web. Inheritance System.Object Microsoft.AspNetCore.Components.RenderTree.Renderer TestRenderer WebTestRenderer Implements System.IDisposable ITestRenderer Inherited Members TestRenderer.Dispatcher TestRenderer.RenderFragment(RenderFragment) TestRenderer.RenderComponent<TComponent>(ComponentParameterCollection) TestRenderer.DispatchEventAsync(UInt64, EventFieldInfo, EventArgs) TestRenderer.FindComponent<TComponent>(IRenderedFragmentBase) TestRenderer.FindComponents<TComponent>(IRenderedFragmentBase) TestRenderer.ProcessPendingRender() TestRenderer.HandleException(Exception) TestRenderer.UpdateDisplayAsync(RenderBatch) TestRenderer.Dispose(Boolean) Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type) Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent) Microsoft.AspNetCore.Components.RenderTree.Renderer.GetCurrentRenderTreeFrames(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32) Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32, Microsoft.AspNetCore.Components.ParameterView) Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose() Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Rendering Assembly : Bunit.Web.dll Syntax public class WebTestRenderer : TestRenderer, IDisposable, ITestRenderer Constructors | Improve this Doc View Source WebTestRenderer(IRenderedComponentActivator, IServiceProvider, ILoggerFactory) Creates an instance of the WebTestRenderer . Declaration public WebTestRenderer(IRenderedComponentActivator activator, IServiceProvider services, ILoggerFactory loggerFactory) Parameters Type Name Description IRenderedComponentActivator activator System.IServiceProvider services Microsoft.Extensions.Logging.ILoggerFactory loggerFactory Implements System.IDisposable ITestRenderer Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) TestRendererExtensions.RenderComponent<TComponent>(ITestRenderer, ComponentParameter[]) TestRendererExtensions.RenderComponent<TComponent>(ITestRenderer, Action<ComponentParameterCollectionBuilder<TComponent>>)"
  },
  "api/Bunit.ShouldBeAdditionAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeAdditionAssertExtensions.html",
    "title": "Class ShouldBeAdditionAssertExtensions | bUnit",
    "keywords": "Class ShouldBeAdditionAssertExtensions A set of addition diff assert extensions Inheritance System.Object ShouldBeAdditionAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ShouldBeAdditionAssertExtensions Methods | Improve this Doc View Source ShouldBeAddition(IDiff, INodeList, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the expectedChange nodes. Declaration public static void ShouldBeAddition(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify AngleSharp.Dom.INodeList expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeAddition(IDiff, IRenderedFragment, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the rendered markup from the expectedChange IRenderedFragmentBase . Declaration public static void ShouldBeAddition(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify IRenderedFragment expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeAddition(IDiff, String, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an addition, i.e. that one or more nodes have been added, and verifies that the additions are equal to the markup specified in the expectedChange input. Declaration public static void ShouldBeAddition(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify System.String expectedChange The expected additions to verify against System.String userMessage A custom user message to display in case the verification fails."
  },
  "api/Bunit.ShouldBeRemovalAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeRemovalAssertExtensions.html",
    "title": "Class ShouldBeRemovalAssertExtensions | bUnit",
    "keywords": "Class ShouldBeRemovalAssertExtensions A set of removal diff assert extensions Inheritance System.Object ShouldBeRemovalAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ShouldBeRemovalAssertExtensions Methods | Improve this Doc View Source ShouldBeRemoval(IDiff, INodeList, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the expectedChange nodes. Declaration public static void ShouldBeRemoval(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify AngleSharp.Dom.INodeList expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeRemoval(IDiff, IRenderedFragment, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the rendered markup from the expectedChange IRenderedFragmentBase . Declaration public static void ShouldBeRemoval(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify IRenderedFragment expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails. | Improve this Doc View Source ShouldBeRemoval(IDiff, String, String) Verifies that the actualChange AngleSharp.Diffing.Core.IDiff is an removal, i.e. that one or more nodes have been removed, and verifies that the removed nodes are equal to the markup specified in the expectedChange input. Declaration public static void ShouldBeRemoval(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The change to verify System.String expectedChange The expected removal to verify against System.String userMessage A custom user message to display in case the verification fails."
  },
  "api/Bunit.ShouldBeTextChangeAssertExtensions.html": {
    "href": "api/Bunit.ShouldBeTextChangeAssertExtensions.html",
    "title": "Class ShouldBeTextChangeAssertExtensions | bUnit",
    "keywords": "Class ShouldBeTextChangeAssertExtensions Verification helpers for text Inheritance System.Object ShouldBeTextChangeAssertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class ShouldBeTextChangeAssertExtensions Methods | Improve this Doc View Source ShouldBeAttributeChange(IDiff, String, String, String) Verifies that the actualChange diff is a change to the value of the specific attribute ( expectedAttrName ). Declaration public static void ShouldBeAttributeChange(this IDiff actualChange, string expectedAttrName, string expectedAttrValue, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The actual change that has happened. System.String expectedAttrName The expected name of the changed attribute. System.String expectedAttrValue The expected value of the changed attribute. System.String userMessage A custom user message to show when the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, INodeList, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, INodeList expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The diff to verify. AngleSharp.Dom.INodeList expectedChange The node list containing the expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, IRenderedFragment, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, IRenderedFragment expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The diff to verify. IRenderedFragment expectedChange The rendered fragment containing the expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldBeTextChange(IDiff, String, String) Verifies that a diff is a change to a text node. Declaration public static void ShouldBeTextChange(this IDiff actualChange, string expectedChange, string userMessage = null) Parameters Type Name Description AngleSharp.Diffing.Core.IDiff actualChange The diff to verify. System.String expectedChange The expected text change. System.String userMessage A custom error message to show if the verification fails. | Improve this Doc View Source ShouldHaveSingleTextChange(IEnumerable<IDiff>, String, String) Verifies that a list of diffs contains only a single change, and that change is a change to a text node. Declaration public static void ShouldHaveSingleTextChange(this IEnumerable<IDiff> diffs, string expectedChange, string userMessage = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < AngleSharp.Diffing.Core.IDiff > diffs The list of diffs to verify against. System.String expectedChange The expected text change. System.String userMessage A custom error message to show if the verification fails."
  },
  "api/Bunit.SnapshotTest.html": {
    "href": "api/Bunit.SnapshotTest.html",
    "title": "Class SnapshotTest | bUnit",
    "keywords": "Class SnapshotTest A component used to create snapshot tests. Snapshot tests takes two child inputs, a TestInput section and a ExpectedOutput section. It then compares the result of rendering both using semantic HTML comparison. Inheritance System.Object TestContextBase RazorTestBase SnapshotTest Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Inherited Members RazorTestBase.IsRunning RazorTestBase.Description RazorTestBase.Skip RazorTestBase.Timeout RazorTestBase.RunTest() RazorTestBase.IComponent.Attach(RenderHandle) RazorTestBase.TryRun<T>(Action<T>, T) RazorTestBase.TryRunAsync<T>(Func<T, Task>, T) TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.Dispose() TestContextBase.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class SnapshotTest : RazorTestBase, IDisposable, IComponent Constructors | Improve this Doc View Source SnapshotTest() Creates an instance of the SnapshotTest type. Declaration public SnapshotTest() Properties | Improve this Doc View Source DisplayName Declaration public override string DisplayName { get; } Property Value Type Description System.String Overrides RazorTestBase.DisplayName | Improve this Doc View Source ExpectedOutput Gets or sets the expected output of the snapshot test. Declaration [Parameter] public RenderFragment ExpectedOutput { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment | Improve this Doc View Source JSInterop Gets bUnits JSInterop, that allows setting up handlers for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) invocations that components under tests will issue during testing. It also makes it possible to verify that the invocations has happened as expected. Declaration public BunitJSInterop JSInterop { get; } Property Value Type Description BunitJSInterop | Improve this Doc View Source Setup Sets the setup action to perform before the TestInput and ExpectedOutput is rendered and compared. Declaration [Parameter] public Action<SnapshotTest> Setup { get; set; } Property Value Type Description System.Action < SnapshotTest > | Improve this Doc View Source SetupAsync Sets the setup action to perform before the TestInput and ExpectedOutput is rendered and compared. Declaration [Parameter] public Func<SnapshotTest, Task> SetupAsync { get; set; } Property Value Type Description System.Func < SnapshotTest , System.Threading.Tasks.Task > | Improve this Doc View Source TestInput Gets or sets the input to the snapshot test. Declaration [Parameter] public RenderFragment TestInput { get; set; } Property Value Type Description Microsoft.AspNetCore.Components.RenderFragment Methods | Improve this Doc View Source Run() Declaration protected override Task Run() Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.Run() | Improve this Doc View Source SetParametersAsync(ParameterView) Declaration public override Task SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Overrides RazorTestBase.SetParametersAsync(ParameterView) | Improve this Doc View Source Validate() Declaration public override void Validate() Overrides RazorTestBase.Validate() Implements System.IDisposable Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.TestComponentBase.html": {
    "href": "api/Bunit.TestComponentBase.html",
    "title": "Class TestComponentBase | bUnit",
    "keywords": "Class TestComponentBase Base test class/test runner, that runs Fixtures defined in razor files. Inheritance System.Object TestComponentBase Implements Microsoft.AspNetCore.Components.IComponent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Xunit.dll Syntax public abstract class TestComponentBase : IComponent Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder . Declaration protected virtual void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder The builder to use for rendering. | Improve this Doc View Source RazorTests() Called by the XUnit test runner. Finds all Fixture components in the file and runs their associated tests. Declaration public virtual void RazorTests() Explicit Interface Implementations | Improve this Doc View Source IComponent.Attach(RenderHandle) Declaration void IComponent.Attach(RenderHandle renderHandle) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderHandle renderHandle | Improve this Doc View Source IComponent.SetParametersAsync(ParameterView) Declaration Task IComponent.SetParametersAsync(ParameterView parameters) Parameters Type Name Description Microsoft.AspNetCore.Components.ParameterView parameters Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Components.IComponent Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestContext.html": {
    "href": "api/Bunit.TestContext.html",
    "title": "Class TestContext | bUnit",
    "keywords": "Class TestContext A test context is a factory that makes it possible to create components under tests. Inheritance System.Object TestContextBase TestContext ComponentTestFixture Implements System.IDisposable Inherited Members TestContextBase.Renderer TestContextBase.Services TestContextBase.RenderTree TestContextBase.Dispose() TestContextBase.Dispose(Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public class TestContext : TestContextBase, IDisposable Constructors | Improve this Doc View Source TestContext() Creates a new instance of the TestContext class. Declaration public TestContext() Properties | Improve this Doc View Source JSInterop Gets bUnits JSInterop, that allows setting up handlers for Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[]) invocations that components under tests will issue during testing. It also makes it possible to verify that the invocations has happened as expected. Declaration public BunitJSInterop JSInterop { get; } Property Value Type Description BunitJSInterop Methods | Improve this Doc View Source BuildRenderTree(RenderTreeBuilder) Dummy method required to allow Blazor's compiler to generate C# from .razor files. Declaration protected virtual void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder | Improve this Doc View Source Render(RenderFragment) Renders the renderFragment and returns it as a IRenderedFragment . Declaration public virtual IRenderedFragment Render(RenderFragment renderFragment) Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment The render fragment to render. Returns Type Description IRenderedFragment The IRenderedFragment . | Improve this Doc View Source Render<TComponent>(RenderFragment) Renders the renderFragment and returns the first TComponent in the resulting render tree. Declaration public virtual IRenderedComponent<TComponent> Render<TComponent>(RenderFragment renderFragment) where TComponent : IComponent Parameters Type Name Description Microsoft.AspNetCore.Components.RenderFragment renderFragment The render fragment to render. Returns Type Description IRenderedComponent <TComponent> The IRenderedComponent<TComponent> . Type Parameters Name Description TComponent The type of component to find in the render tree. Remarks Calling this method is equivalent to calling Render(renderFragment).FindComponent<TComponent>() . | Improve this Doc View Source RenderComponent<TComponent>(ComponentParameter[]) Instantiates and performs a first render of a component of type TComponent . Declaration public virtual IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : IComponent Parameters Type Name Description ComponentParameter [] parameters Parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render | Improve this Doc View Source RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>>) Instantiates and performs a first render of a component of type TComponent . Declaration public virtual IRenderedComponent<TComponent> RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder) where TComponent : IComponent Parameters Type Name Description System.Action < ComponentParameterCollectionBuilder <TComponent>> parameterBuilder The ComponentParameterBuilder action to add type safe parameters to pass to the component when it is rendered Returns Type Description IRenderedComponent <TComponent> The rendered TComponent Type Parameters Name Description TComponent Type of the component to render Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.TestContextBase.html": {
    "href": "api/Bunit.TestContextBase.html",
    "title": "Class TestContextBase | bUnit",
    "keywords": "Class TestContextBase A test context is a factory that makes it possible to create components under tests. Inheritance System.Object TestContextBase RazorTestBase TestContext Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public abstract class TestContextBase : IDisposable Constructors | Improve this Doc View Source TestContextBase() Creates a new instance of the TestContextBase class. Declaration protected TestContextBase() Properties | Improve this Doc View Source Renderer Gets the renderer used by the test context. Declaration public ITestRenderer Renderer { get; } Property Value Type Description ITestRenderer | Improve this Doc View Source RenderTree Gets the RootRenderTree that all components rendered with the RenderComponent<TComponent>() methods, are rendered inside. Declaration public RootRenderTree RenderTree { get; } Property Value Type Description RootRenderTree Remarks Use this to add default layout- or root-components which a component under test should be rendered under. | Improve this Doc View Source Services Gets the service collection and service provider that is used when a component is rendered by the test context. Declaration public TestServiceProvider Services { get; } Property Value Type Description TestServiceProvider Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes of the test context resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Set to true if called from Dispose() , false if called from a finalizer.f Remarks The disposing parameter should be false when called from a finalizer, and true when called from the Dispose() method. In other words, it is true when deterministically called and false when non-deterministically called. Implements System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) FakeAuthorizationExtensions.AddTestAuthorization(TestContextBase)"
  },
  "api/Bunit.TestDoubles.AuthorizationState.html": {
    "href": "api/Bunit.TestDoubles.AuthorizationState.html",
    "title": "Enum AuthorizationState | bUnit",
    "keywords": "Enum AuthorizationState Enumeration that represents the user's authorization state. Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public enum AuthorizationState Fields Name Description Authorized Represents authorized user state. Authorizing Represents authorizing user state. Unauthorized Represents unauthorized user state. Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(IElement)"
  },
  "api/Bunit.TestDoubles.FakeAuthenticationStateProvider.html": {
    "href": "api/Bunit.TestDoubles.FakeAuthenticationStateProvider.html",
    "title": "Class FakeAuthenticationStateProvider | bUnit",
    "keywords": "Class FakeAuthenticationStateProvider Represents a fake implementation of AuthenticationStateProvider for testing purposes that allows user to test components that use authentication and authorization. Inheritance System.Object Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider FakeAuthenticationStateProvider Inherited Members Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.NotifyAuthenticationStateChanged(System.Threading.Tasks.Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>) Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.AuthenticationStateChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public class FakeAuthenticationStateProvider : AuthenticationStateProvider Constructors | Improve this Doc View Source FakeAuthenticationStateProvider() Default constructor that creates an unauthenticated state. Declaration public FakeAuthenticationStateProvider() | Improve this Doc View Source FakeAuthenticationStateProvider(String, IEnumerable<String>, IEnumerable<Claim>) Constructor to initialize this state provider with an initial AuthenticationState. Declaration public FakeAuthenticationStateProvider(string userName, IEnumerable<string> roles = null, IEnumerable<Claim> claims = null) Parameters Type Name Description System.String userName Identity's user name. System.Collections.Generic.IEnumerable < System.String > roles Roles that this user principal has. System.Collections.Generic.IEnumerable < System.Security.Claims.Claim > claims Claims to add to user principal. Methods | Improve this Doc View Source GetAuthenticationStateAsync() Overridden method to get the current authentication state. Declaration public override Task<AuthenticationState> GetAuthenticationStateAsync() Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Components.Authorization.AuthenticationState > Current authentication state. Overrides Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider.GetAuthenticationStateAsync() | Improve this Doc View Source TriggerAuthenticationStateChanged(String, IEnumerable<String>, IEnumerable<Claim>) Method to sets the authentication state and authenticated user. Declaration public void TriggerAuthenticationStateChanged(string userName, IEnumerable<string> roles = null, IEnumerable<Claim> claims = null) Parameters Type Name Description System.String userName Identity's user name. System.Collections.Generic.IEnumerable < System.String > roles Roles that this user principal has. System.Collections.Generic.IEnumerable < System.Security.Claims.Claim > claims Claims to add to user principal. | Improve this Doc View Source TriggerAuthorizingStateChanged() Method to sets the authentication state to authorizing state. Declaration public void TriggerAuthorizingStateChanged() | Improve this Doc View Source TriggerUnauthenticationStateChanged() Method to sets the authentication state to unauthenticated. Declaration public void TriggerUnauthenticationStateChanged() Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.FakeAuthorizationExtensions.html": {
    "href": "api/Bunit.TestDoubles.FakeAuthorizationExtensions.html",
    "title": "Class FakeAuthorizationExtensions | bUnit",
    "keywords": "Class FakeAuthorizationExtensions Helper methods for registering the Authentication/Authorization services with a TestServiceProvider . Inheritance System.Object FakeAuthorizationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public static class FakeAuthorizationExtensions Methods | Improve this Doc View Source AddTestAuthorization(TestContextBase) Adds the appropriate Blazor authentication and authorization services to the TestServiceProvider to enable an authenticated user, as well as adding the Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState component to the test contexts render tree. Declaration public static TestAuthorizationContext AddTestAuthorization(this TestContextBase context) Parameters Type Name Description TestContextBase context Returns Type Description TestAuthorizationContext"
  },
  "api/Bunit.TestDoubles.FakeAuthorizationPolicyProvider.html": {
    "href": "api/Bunit.TestDoubles.FakeAuthorizationPolicyProvider.html",
    "title": "Class FakeAuthorizationPolicyProvider | bUnit",
    "keywords": "Class FakeAuthorizationPolicyProvider Test class that provides an implementation of IAuthorizationPolicyProvider that assists user in testing components that use authentication and authorization Inheritance System.Object FakeAuthorizationPolicyProvider Implements Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public class FakeAuthorizationPolicyProvider : IAuthorizationPolicyProvider Methods | Improve this Doc View Source GetDefaultPolicyAsync() Gets the default authorization policy. Declaration public Task<AuthorizationPolicy> GetDefaultPolicyAsync() Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationPolicy > Default policy. | Improve this Doc View Source GetFallbackPolicyAsync() Gets the fallback authorization policy. Declaration public Task<AuthorizationPolicy> GetFallbackPolicyAsync() Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationPolicy > Fallback policy. | Improve this Doc View Source GetPolicyAsync(String) Get the current policy, which in this implementation just returns a test policy. Declaration public Task<AuthorizationPolicy> GetPolicyAsync(string policyName) Parameters Type Name Description System.String policyName Policy name. Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationPolicy > Test policy for the specified name. | Improve this Doc View Source SetPolicyScheme(String) Sets the currently supported policies for this provider. Declaration public void SetPolicyScheme(string policySchemeName) Parameters Type Name Description System.String policySchemeName Policy scheme name to use. Implements Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.FakeAuthorizationService.html": {
    "href": "api/Bunit.TestDoubles.FakeAuthorizationService.html",
    "title": "Class FakeAuthorizationService | bUnit",
    "keywords": "Class FakeAuthorizationService Test class that provides an implementation of IAuthorizationService that assists user in testing components by allowing them to set the authorization expected authorization response. Inheritance System.Object FakeAuthorizationService Implements Microsoft.AspNetCore.Authorization.IAuthorizationService Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public class FakeAuthorizationService : IAuthorizationService Constructors | Improve this Doc View Source FakeAuthorizationService(AuthorizationState) Constructor that initializes the authorization state of the service. Declaration public FakeAuthorizationService(AuthorizationState state = AuthorizationState.Authorized) Parameters Type Name Description AuthorizationState state Initial authorization state. Methods | Improve this Doc View Source AuthorizeAsync(ClaimsPrincipal, Object, IEnumerable<IAuthorizationRequirement>) Authorizes the Principal user based solely on the current authorization state. Declaration public Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable<IAuthorizationRequirement> requirements) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Principal user to authorize. System.Object resource Resource being authorized. System.Collections.Generic.IEnumerable < Microsoft.AspNetCore.Authorization.IAuthorizationRequirement > requirements Authorization requirements. Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationResult > Result of authorize request. | Improve this Doc View Source AuthorizeAsync(ClaimsPrincipal, Object, String) Authorizes the Principal user based solely on the current authorization state. Declaration public Task<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName) Parameters Type Name Description System.Security.Claims.ClaimsPrincipal user Principal user to authorize. System.Object resource Resource being authorized. System.String policyName Policy to use for authorization. Returns Type Description System.Threading.Tasks.Task < Microsoft.AspNetCore.Authorization.AuthorizationResult > Result of authorize request. | Improve this Doc View Source SetAuthorizationState(AuthorizationState) Method to explicitly set the authorization state. Declaration public void SetAuthorizationState(AuthorizationState state) Parameters Type Name Description AuthorizationState state New state to set. | Improve this Doc View Source SetPolicies(IEnumerable<String>) Sets the supported policies in the Authorization service for current user. Declaration public void SetPolicies(IEnumerable<string> policies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > policies List of supported policies. | Improve this Doc View Source SetRoles(IEnumerable<String>) Sets the supported roles in the Authorization service for current user. Declaration public void SetRoles(IEnumerable<string> roles) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > roles List of supported roles. Implements Microsoft.AspNetCore.Authorization.IAuthorizationService Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.html": {
    "href": "api/Bunit.TestDoubles.html",
    "title": "Namespace Bunit.TestDoubles | bUnit",
    "keywords": "Namespace Bunit.TestDoubles Classes FakeAuthenticationStateProvider Represents a fake implementation of AuthenticationStateProvider for testing purposes that allows user to test components that use authentication and authorization. FakeAuthorizationExtensions Helper methods for registering the Authentication/Authorization services with a TestServiceProvider . FakeAuthorizationPolicyProvider Test class that provides an implementation of IAuthorizationPolicyProvider that assists user in testing components that use authentication and authorization FakeAuthorizationService Test class that provides an implementation of IAuthorizationService that assists user in testing components by allowing them to set the authorization expected authorization response. MissingFakeAuthorizationException Exception used to indicate that the fake authorization services are required by a test but provided in TestContext.Services. MissingMockHttpClientException Exception use to indicate that a mock HttpClient is required by a test but was not provided. MissingMockNavigationManagerException Exception use to indicate that a NavigationManager is required by a test but was not provided. MissingMockStringLocalizationException Exception use to indicate that a IStringLocalizer is required by a test but was not provided. TestAuthorizationContext Root authorization service that manages different authentication/authorization state in the system. TestPolicyRequirement Test requirement that supports the minimum requirement - just a policy name. Enums AuthorizationState Enumeration that represents the user's authorization state."
  },
  "api/Bunit.TestDoubles.MissingFakeAuthorizationException.html": {
    "href": "api/Bunit.TestDoubles.MissingFakeAuthorizationException.html",
    "title": "Class MissingFakeAuthorizationException | bUnit",
    "keywords": "Class MissingFakeAuthorizationException Exception used to indicate that the fake authorization services are required by a test but provided in TestContext.Services. Inheritance System.Object System.Exception MissingFakeAuthorizationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class MissingFakeAuthorizationException : Exception, ISerializable Constructors | Improve this Doc View Source MissingFakeAuthorizationException(String) Creates a new instance of the MissingFakeAuthorizationException with the arguments used in the invocation. Declaration public MissingFakeAuthorizationException(string serviceName) Parameters Type Name Description System.String serviceName The service being used. Properties | Improve this Doc View Source ServiceName Gets the invoking service name. Declaration public string ServiceName { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.MissingMockHttpClientException.html": {
    "href": "api/Bunit.TestDoubles.MissingMockHttpClientException.html",
    "title": "Class MissingMockHttpClientException | bUnit",
    "keywords": "Class MissingMockHttpClientException Exception use to indicate that a mock HttpClient is required by a test but was not provided. Inheritance System.Object System.Exception MissingMockHttpClientException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class MissingMockHttpClientException : Exception, ISerializable Constructors | Improve this Doc View Source MissingMockHttpClientException(HttpRequestMessage) Creates a new instance of the MissingMockHttpClientException with the request that would have been handled Declaration public MissingMockHttpClientException(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request being handled by the client Properties | Improve this Doc View Source Request The request that was sent via the http client Declaration public HttpRequestMessage Request { get; } Property Value Type Description System.Net.Http.HttpRequestMessage Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.MissingMockNavigationManagerException.html": {
    "href": "api/Bunit.TestDoubles.MissingMockNavigationManagerException.html",
    "title": "Class MissingMockNavigationManagerException | bUnit",
    "keywords": "Class MissingMockNavigationManagerException Exception use to indicate that a NavigationManager is required by a test but was not provided. Inheritance System.Object System.Exception MissingMockNavigationManagerException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class MissingMockNavigationManagerException : Exception, ISerializable Constructors | Improve this Doc View Source MissingMockNavigationManagerException(String, Boolean) Creates a new instance of the MissingMockNavigationManagerException with the arguments used in the invocation. Declaration public MissingMockNavigationManagerException(string url, bool forceLoad) Parameters Type Name Description System.String url Uri to navigate to System.Boolean forceLoad Whether to force load | Improve this Doc View Source MissingMockNavigationManagerException(Uri, Boolean) Creates a new instance of the MissingMockNavigationManagerException with the arguments used in the invocation. Declaration public MissingMockNavigationManagerException(Uri url, bool forceLoad) Parameters Type Name Description System.Uri url Uri to navigate to System.Boolean forceLoad Whether to force load Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.MissingMockStringLocalizationException.html": {
    "href": "api/Bunit.TestDoubles.MissingMockStringLocalizationException.html",
    "title": "Class MissingMockStringLocalizationException | bUnit",
    "keywords": "Class MissingMockStringLocalizationException Exception use to indicate that a IStringLocalizer is required by a test but was not provided. Inheritance System.Object System.Exception MissingMockStringLocalizationException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax [Serializable] public sealed class MissingMockStringLocalizationException : Exception, ISerializable Constructors | Improve this Doc View Source MissingMockStringLocalizationException(String, Object[]) Creates a new instance of the MissingMockStringLocalizationException with the method name and arguments used in the invocation Declaration public MissingMockStringLocalizationException(string methodName, params object[] arguments) Parameters Type Name Description System.String methodName The method that was called on the localizer System.Object [] arguments The arguments that were passed in Properties | Improve this Doc View Source Arguments The arguments that were passed into the localizer Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.Object > Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Implements System.Runtime.Serialization.ISerializable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.TestAuthorizationContext.html": {
    "href": "api/Bunit.TestDoubles.TestAuthorizationContext.html",
    "title": "Class TestAuthorizationContext | bUnit",
    "keywords": "Class TestAuthorizationContext Root authorization service that manages different authentication/authorization state in the system. Inheritance System.Object TestAuthorizationContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public class TestAuthorizationContext Properties | Improve this Doc View Source Claims Gets the set of principal claims for the current user. Declaration public IEnumerable<Claim> Claims { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Security.Claims.Claim > | Improve this Doc View Source IsAuthenticated Gets whether user is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Policies Gets the set of authentication policies for the current user. Declaration public IEnumerable<string> Policies { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source PolicySchemeName Gets or sets the policy schemeName. Defaults to TestScheme and usually doesn't need to be changed by user. Declaration public string PolicySchemeName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Roles Gets the set of roles for the current user. Declaration public IEnumerable<string> Roles { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source State Gets the authorization state for the user. Declaration public AuthorizationState State { get; } Property Value Type Description AuthorizationState | Improve this Doc View Source UserName Gets the authorization context user name. Declaration public string UserName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source RegisterAuthorizationServices(IServiceCollection) Registers authorization services with the specified service provider. Declaration public void RegisterAuthorizationServices(IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Service provider to use. | Improve this Doc View Source SetAuthorized(String, AuthorizationState) Authenticates the user with specified name and authorization state. Declaration public TestAuthorizationContext SetAuthorized(string userName, AuthorizationState state = AuthorizationState.Authorized) Parameters Type Name Description System.String userName User name for the principal identity. AuthorizationState state Authorization state. Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetAuthorizing() Puts the authorization services into the authorizing state. Declaration public TestAuthorizationContext SetAuthorizing() Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetClaims(Claim[]) Sets the claims on the curren user/principal. Declaration public TestAuthorizationContext SetClaims(params Claim[] claims) Parameters Type Name Description System.Security.Claims.Claim [] claims Claims to set. Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetNotAuthorized() Puts the authorization services into an unauthenticated and unauthorized state. Declaration public TestAuthorizationContext SetNotAuthorized() Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetPolicies(String[]) Sets the authorization policies supported for the current user. Declaration public TestAuthorizationContext SetPolicies(params string[] policies) Parameters Type Name Description System.String [] policies Supported authorization policies. Returns Type Description TestAuthorizationContext | Improve this Doc View Source SetRoles(String[]) Sets the user roles in this context.. Declaration public TestAuthorizationContext SetRoles(params string[] roles) Parameters Type Name Description System.String [] roles Roles for the claims principal. Returns Type Description TestAuthorizationContext Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestDoubles.TestPolicyRequirement.html": {
    "href": "api/Bunit.TestDoubles.TestPolicyRequirement.html",
    "title": "Class TestPolicyRequirement | bUnit",
    "keywords": "Class TestPolicyRequirement Test requirement that supports the minimum requirement - just a policy name. Inheritance System.Object TestPolicyRequirement Implements Microsoft.AspNetCore.Authorization.IAuthorizationRequirement Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.TestDoubles Assembly : Bunit.Web.dll Syntax public class TestPolicyRequirement : IAuthorizationRequirement Properties | Improve this Doc View Source PolicyName Gets or sets the policy name for this requirement. Declaration public string PolicyName { get; set; } Property Value Type Description System.String Implements Microsoft.AspNetCore.Authorization.IAuthorizationRequirement Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.TestServiceProvider.html": {
    "href": "api/Bunit.TestServiceProvider.html",
    "title": "Class TestServiceProvider | bUnit",
    "keywords": "Class TestServiceProvider Represents a System.IServiceProvider and Microsoft.Extensions.DependencyInjection.IServiceCollection as a single type used for test purposes. Inheritance System.Object TestServiceProvider Implements System.IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceCollection System.Collections.Generic.IList < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > System.Collections.Generic.ICollection < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > System.Collections.Generic.IEnumerable < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > System.Collections.IEnumerable System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Core.dll Syntax public sealed class TestServiceProvider : IServiceProvider, IServiceCollection, IList<ServiceDescriptor>, ICollection<ServiceDescriptor>, IEnumerable<ServiceDescriptor>, IEnumerable, IDisposable Constructors | Improve this Doc View Source TestServiceProvider(IServiceCollection) Creates an instance of the TestServiceProvider and sets its service collection to the provided initialServiceCollection , if any. Declaration public TestServiceProvider(IServiceCollection initialServiceCollection = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection initialServiceCollection Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsProviderInitialized Gets whether this TestServiceProvider has been initialized, and no longer will accept calls to the AddService 's methods. Declaration public bool IsProviderInitialized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public ServiceDescriptor this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor Methods | Improve this Doc View Source Add(ServiceDescriptor) Declaration public void Add(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(ServiceDescriptor) Declaration public bool Contains(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(ServiceDescriptor[], Int32) Declaration public void CopyTo(ServiceDescriptor[] array, int arrayIndex) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor [] array System.Int32 arrayIndex | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<ServiceDescriptor> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Microsoft.Extensions.DependencyInjection.ServiceDescriptor > | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object | Improve this Doc View Source GetService<TService>() Get service of type T from the test provider. Declaration public TService GetService<TService>() Returns Type Description TService A service object of type T or null if there is no such service. Type Parameters Name Description TService The type of service object to get. | Improve this Doc View Source IndexOf(ServiceDescriptor) Declaration public int IndexOf(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, ServiceDescriptor) Declaration public void Insert(int index, ServiceDescriptor item) Parameters Type Name Description System.Int32 index Microsoft.Extensions.DependencyInjection.ServiceDescriptor item | Improve this Doc View Source Remove(ServiceDescriptor) Declaration public bool Remove(ServiceDescriptor item) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceCollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable Extension Methods EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>) LoggerHelperExtensions.CreateLogger<TCategoryName>(IServiceProvider) JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement) MockJSRuntimeExtensions.AddMockJSRuntime(TestServiceProvider, JSRuntimeMode) TestServiceProviderExtensions.AddDefaultTestContextServices(IServiceCollection, TestContextBase, BunitJSInterop) XunitLoggerExtensions.AddXunitLogger(IServiceCollection, LogLevel) XunitLoggerExtensions.AddXunitLogger(IServiceCollection, ITestOutputHelper, LogLevel)"
  },
  "api/Bunit.TouchEventDispatchExtensions.html": {
    "href": "api/Bunit.TouchEventDispatchExtensions.html",
    "title": "Class TouchEventDispatchExtensions | bUnit",
    "keywords": "Class TouchEventDispatchExtensions Pointer event dispatch helper extension methods. Inheritance System.Object TouchEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class TouchEventDispatchExtensions Methods | Improve this Doc View Source TouchCancel(IElement, TouchEventArgs) Raises the @ontouchcancel event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchCancel(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchCancel(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchcancel event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchCancel(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchEnd(IElement, TouchEventArgs) Raises the @ontouchend event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchEnd(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchEnd(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchend event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchEnd(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchEnter(IElement, TouchEventArgs) Raises the @ontouchenter event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchEnter(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchEnter(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchenter event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchEnter(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchLeave(IElement, TouchEventArgs) Raises the @ontouchleave event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchLeave(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchLeave(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchleave event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchLeave(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchMove(IElement, TouchEventArgs) Raises the @ontouchmove event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchMove(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchMove(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchmove event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchMove(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event. | Improve this Doc View Source TouchStart(IElement, TouchEventArgs) Raises the @ontouchstart event on element , passing the provided eventArgs to the event handler. Declaration public static void TouchStart(this IElement element, TouchEventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. Microsoft.AspNetCore.Components.Web.TouchEventArgs eventArgs The event arguments to pass to the event handler. | Improve this Doc View Source TouchStart(IElement, Int64, TouchPoint[], TouchPoint[], TouchPoint[], Boolean, Boolean, Boolean, Boolean, String) Raises the @ontouchstart event on element , passing the provided properties to the event handler via a Microsoft.AspNetCore.Components.Web.TouchEventArgs object. Declaration public static void TouchStart(this IElement element, long detail = 0L, TouchPoint[] touches = null, TouchPoint[] targetTouches = null, TouchPoint[] changedTouches = null, bool ctrlKey = false, bool shiftKey = false, bool altKey = false, bool metaKey = false, string type = null) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.Int64 detail A count of consecutive clicks that happened in a short amount of time, incremented by one. Microsoft.AspNetCore.Components.Web.TouchPoint [] touches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact currently touching the surface. Microsoft.AspNetCore.Components.Web.TouchPoint [] targetTouches A list of Microsoft.AspNetCore.Components.Web.TouchPoint for every point of contact that is touching the surface and started on the element that is the target of the current event. Microsoft.AspNetCore.Components.Web.TouchPoint [] changedTouches A list of Touches for every point of contact which contributed to the event. For the touchstart event this must be a list of the touch points that just became active with the current event. For the touchmove event this must be a list of the touch points that have moved since the last event. For the touchend and touchcancel events this must be a list of the touch points that have just been removed from the surface. System.Boolean ctrlKey true if the control key was down when the event was fired. false otherwise. System.Boolean shiftKey true if the shift key was down when the event was fired. false otherwise. System.Boolean altKey true if the alt key was down when the event was fired. false otherwise. System.Boolean metaKey true if the meta key was down when the event was fired. false otherwise. System.String type Gets or sets the type of the event."
  },
  "api/Bunit.TriggerEventDispatchExtensions.html": {
    "href": "api/Bunit.TriggerEventDispatchExtensions.html",
    "title": "Class TriggerEventDispatchExtensions | bUnit",
    "keywords": "Class TriggerEventDispatchExtensions General event dispatch helper extension methods. Inheritance System.Object TriggerEventDispatchExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Web.dll Syntax public static class TriggerEventDispatchExtensions Methods | Improve this Doc View Source TriggerEventAsync(IElement, String, EventArgs) Raises the event eventName on the element element passing the eventArgs to the event handler. Declaration public static Task TriggerEventAsync(this IElement element, string eventName, EventArgs eventArgs) Parameters Type Name Description AngleSharp.Dom.IElement element The element to raise the event on. System.String eventName The name of the event to raise (using on-form, e.g. onclick ). System.EventArgs eventArgs The event arguments to pass to the event handler Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Bunit.Xunit.Logging.html": {
    "href": "api/Bunit.Xunit.Logging.html",
    "title": "Namespace Bunit.Xunit.Logging | bUnit",
    "keywords": "Namespace Bunit.Xunit.Logging Classes XunitLogger Represents a Microsoft.Extensions.Logging.ILogger that will write logs to the provided Xunit.Abstractions.ITestOutputHelper . XunitLoggerFactory Represents a xUnit logger factory XunitLoggerProvider Represents an Microsoft.Extensions.Logging.ILoggerProvider for logging to XunitLogger ."
  },
  "api/Bunit.Xunit.Logging.XunitLogger.html": {
    "href": "api/Bunit.Xunit.Logging.XunitLogger.html",
    "title": "Class XunitLogger | bUnit",
    "keywords": "Class XunitLogger Represents a Microsoft.Extensions.Logging.ILogger that will write logs to the provided Xunit.Abstractions.ITestOutputHelper . Inheritance System.Object XunitLogger Implements Microsoft.Extensions.Logging.ILogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Xunit.Logging Assembly : Bunit.Xunit.dll Syntax public class XunitLogger : ILogger Constructors | Improve this Doc View Source XunitLogger(ITestOutputHelper, String, LogLevel) Declaration public XunitLogger(ITestOutputHelper output, string name, LogLevel minimumLogLevel) Parameters Type Name Description Xunit.Abstractions.ITestOutputHelper output System.String name Microsoft.Extensions.Logging.LogLevel minimumLogLevel Methods | Improve this Doc View Source BeginScope<TState>(TState) Declaration public IDisposable BeginScope<TState>(TState state) Parameters Type Name Description TState state Returns Type Description System.IDisposable Type Parameters Name Description TState | Improve this Doc View Source IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Returns Type Description System.Boolean | Improve this Doc View Source Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>) Declaration public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel logLevel Microsoft.Extensions.Logging.EventId eventId TState state System.Exception exception System.Func <TState, System.Exception , System.String > formatter Type Parameters Name Description TState Implements Microsoft.Extensions.Logging.ILogger Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Xunit.Logging.XunitLoggerFactory.html": {
    "href": "api/Bunit.Xunit.Logging.XunitLoggerFactory.html",
    "title": "Class XunitLoggerFactory | bUnit",
    "keywords": "Class XunitLoggerFactory Represents a xUnit logger factory Inheritance System.Object Microsoft.Extensions.Logging.LoggerFactory XunitLoggerFactory Implements Microsoft.Extensions.Logging.ILoggerFactory System.IDisposable Inherited Members Microsoft.Extensions.Logging.LoggerFactory.Create(System.Action<Microsoft.Extensions.Logging.ILoggingBuilder>) Microsoft.Extensions.Logging.LoggerFactory.CreateLogger(System.String) Microsoft.Extensions.Logging.LoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider) Microsoft.Extensions.Logging.LoggerFactory.CheckDisposed() Microsoft.Extensions.Logging.LoggerFactory.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Xunit.Logging Assembly : Bunit.Xunit.dll Syntax public class XunitLoggerFactory : LoggerFactory, ILoggerFactory, IDisposable Constructors | Improve this Doc View Source XunitLoggerFactory(XunitLoggerProvider) Declaration public XunitLoggerFactory(XunitLoggerProvider xunitLoggerProvider) Parameters Type Name Description XunitLoggerProvider xunitLoggerProvider Implements Microsoft.Extensions.Logging.ILoggerFactory System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.Xunit.Logging.XunitLoggerProvider.html": {
    "href": "api/Bunit.Xunit.Logging.XunitLoggerProvider.html",
    "title": "Class XunitLoggerProvider | bUnit",
    "keywords": "Class XunitLoggerProvider Represents an Microsoft.Extensions.Logging.ILoggerProvider for logging to XunitLogger . Inheritance System.Object XunitLoggerProvider Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit.Xunit.Logging Assembly : Bunit.Xunit.dll Syntax public sealed class XunitLoggerProvider : ILoggerProvider, IDisposable Constructors | Improve this Doc View Source XunitLoggerProvider(ITestOutputHelper, LogLevel) Creates an instance of the XunitLoggerProvider . Declaration public XunitLoggerProvider(ITestOutputHelper output, LogLevel minimumLogLevel = LogLevel.Debug) Parameters Type Name Description Xunit.Abstractions.ITestOutputHelper output Microsoft.Extensions.Logging.LogLevel minimumLogLevel Methods | Improve this Doc View Source CreateLogger(String) Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description System.String categoryName Returns Type Description Microsoft.Extensions.Logging.ILogger | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements Microsoft.Extensions.Logging.ILoggerProvider System.IDisposable Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "api/Bunit.XunitLoggerExtensions.html": {
    "href": "api/Bunit.XunitLoggerExtensions.html",
    "title": "Class XunitLoggerExtensions | bUnit",
    "keywords": "Class XunitLoggerExtensions Helper method for registering the xUnit test logger. Inheritance System.Object XunitLoggerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Bunit Assembly : Bunit.Xunit.dll Syntax public static class XunitLoggerExtensions Methods | Improve this Doc View Source AddXunitLogger(IServiceCollection, LogLevel) Adds the xUnit Logger to the service collection. All log statements logged during a test, matching the specified Microsoft.Extensions.Logging.LogLevel (default Microsoft.Extensions.Logging.LogLevel.Debug ), will be available in the output from each unit tests. Declaration public static IServiceCollection AddXunitLogger(this IServiceCollection services, LogLevel minimumLogLevel = LogLevel.Debug) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Microsoft.Extensions.Logging.LogLevel minimumLogLevel Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection | Improve this Doc View Source AddXunitLogger(IServiceCollection, ITestOutputHelper, LogLevel) Adds the xUnit Logger to the service collection. All log statements logged during a test, matching the specified Microsoft.Extensions.Logging.LogLevel (default Microsoft.Extensions.Logging.LogLevel.Debug ), will be available in the output from each unit tests. Declaration public static IServiceCollection AddXunitLogger(this IServiceCollection services, ITestOutputHelper outputHelper, LogLevel minimumLogLevel = LogLevel.Debug) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services Xunit.Abstractions.ITestOutputHelper outputHelper Microsoft.Extensions.Logging.LogLevel minimumLogLevel Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection"
  },
  "api/Xunit.html": {
    "href": "api/Xunit.html",
    "title": "Namespace Xunit | bUnit",
    "keywords": "Namespace Xunit Classes RazorTestAttribute Add this attribute to an stub method in a razor test component to make it discoverable by the xUnit test framework. See TestComponentBase for an example of its usage."
  },
  "api/Xunit.RazorTestAttribute.html": {
    "href": "api/Xunit.RazorTestAttribute.html",
    "title": "Class RazorTestAttribute | bUnit",
    "keywords": "Class RazorTestAttribute Add this attribute to an stub method in a razor test component to make it discoverable by the xUnit test framework. See TestComponentBase for an example of its usage. Inheritance System.Object System.Attribute Xunit.FactAttribute RazorTestAttribute Inherited Members Xunit.FactAttribute.DisplayName Xunit.FactAttribute.Skip Xunit.FactAttribute.Timeout System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Xunit Assembly : Bunit.Xunit.dll Syntax [XunitTestCaseDiscoverer(\"Xunit.Sdk.RazorTestDiscoverer\", \"Bunit.Xunit\")] [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class RazorTestAttribute : FactAttribute Extension Methods JSRuntimeAssertExtensions.ShouldBeElementReferenceTo(Object, IElement)"
  },
  "docs/code-of-conduct.html": {
    "href": "docs/code-of-conduct.html",
    "title": "Contributor Covenant Code of Conduct | bUnit",
    "keywords": "Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make our project and community a harassment-free experience for everyone, regardless of age, size, disability, ethnicity, sexuality, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, or religion. Our Standards Examples of behavior that contribute towards creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to temporarily or permanently ban any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abuse, harassment, or otherwise unacceptable behavior may be reported by contacting the project leader at egil@assimilated.dk . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq"
  },
  "docs/contribute.html": {
    "href": "docs/contribute.html",
    "title": "Contribute | bUnit",
    "keywords": "How to Contribute One of the easiest ways to contribute is to participate in discussions on GitHub issues. You can also contribute by submitting pull requests with code changes. General Feedback and Discussions Start a discussion on the bUnit discussion list . Bugs and feature requests For bugs or feature requests, log a new issue on the issues list . Be sure to use the right template. Contributing Code and Content bUnit accepts fixes and features. Here is what you should do when writing code for bUnit: Follow the coding conventions used throughout the bUnit project. In general, they align with the AspNetCore teams coding guidelines . Add, remove, or delete unit tests to cover your changes. Make sure tests are specific to the changes you are making. Tests need to be provided for every bug/feature that is completed. All code changes should be done on the DEV branch, and pull requests should target it. All updates to the documentation located under ./docs/ should be done on the main branch if they are general in nature and not tied to a specific version. Changes to the documentation related to changes on the DEV branch should be submitted to the DEV branch. Any code or documentation you share with the bUnit projects should fall under the projects license agreement. Here are some resources to help you get started on how to contribute code or new content: \"Help wanted\" issues - these issues are up for grabs if you want to create a fix. To do this, simply comment on the issue you want to fix. \"Good first issue\" issues - these are good for newcomers. Good first issues are small, usually require just a few hours of work, and do not require a deep technical knowledge of bUnit. This is a good place to start if you want to become familiar with bUnit’s inner workings and maybe take on bigger issues later. Identifying the Scale of a Contribution If you would like to contribute to bUnit, first identify the scale of what you would like to contribute. If it is small (grammar/spelling or a bug fix), feel free to start working on a fix. If you are submitting a feature or substantial code contribution, please discuss it with us first. You might also read these two blogs posts on contributing code: Open Source Contribution Etiquette by Miguel de Icaza and Don't \"Push\" Your Pull Requests by Ilya Grigorik. These blog posts highlight good open source collaboration etiquette and help align expectations between you and us. All code submissions will be rigorously reviewed and tested, and only those that meet a high bar for both quality and design/roadmap appropriateness will be merged into the source. Submitting a Pull Request If you don't know what a pull request is, read this article: https://help.github.com/articles/using-pull-requests . Make sure the repository can build and all tests pass. It is also a good idea to familiarize yourself with the project workflow and our coding conventions. Code of Conduct See Contributor Covenant Code of Conduct"
  },
  "docs/external-resources.html": {
    "href": "docs/external-resources.html",
    "title": "External Resources | bUnit",
    "keywords": "Presentations, guides, articles, tutorials, and blog posts Here is a list of some web content that covers bUnit. If you produce something you think can be useful to bUnit's users, feel free to add it to this page and send a pull request. Presentations Testing Blazor Components - session from .NET Conf - Focus on Blazor Content is based on beta-5.1 of bUnit. PodCasts/Twitch/YouTube/Live coding .NET Rocks! - Testing Blazor Apps with Egil Hansen Content is based on beta-7 of bUnit. CSharpFritz's Twitch Show: Egil Hansen joins us for Blazor Testing and Component Design Content is based on beta-6 of bUnit. Blazor StateHasChanged: Blazor Component Unit Testing with Egil Hansen Content is based on beta-5.1 of bUnit. Articles and blog posts bUnit for Blazor and How to Integrate it in Azure Pipeline by Ramkumar Shanmugam Content is based on beta-8 of bUnit. Unit Testing Blazor Components with bUnit and JustMock by Mihail Vladov Content is based on beta-6 of bUnit."
  },
  "docs/getting-started/create-test-project.html": {
    "href": "docs/getting-started/create-test-project.html",
    "title": "Creating a new bUnit Test Project | bUnit",
    "keywords": "Creating a new bUnit Test Project To write tests, you need a place to put them - a test project. bUnit is not a unit test runner, so a general-purpose test framework like xUnit, NUnit, or MSTest is needed in addition to bUnit in order to write and run tests. To use bUnit with xUnit, the easiest approach is to use the bUnit project template described in the Create a test project with bUnit template section further down the page. To create a test project manually and in a general-purpose testing frameworks agnostic way, read the following section. Creating a Test Project Manually This section will take you through the steps required to create a project for testing Blazor components using bUnit. Any of the three general purpose test frameworks shown in step 1 below can be used. Briefly, here is what we will do: Create a new xUnit/NUnit/MSTest testing project Add bUnit to the test project Configure project settings Add the test project to your existing solution Let's look at these in more detail. These steps look like this from the 'dotnet' CLI: 1. Create a new test project Use the following command ( click on the tab that for the test framework of choice ): xUnit NUnit MSTest dotnet new xunit -o <NAME OF TEST PROJECT> dotnet new nunit -o <NAME OF TEST PROJECT> dotnet new mstest -o <NAME OF TEST PROJECT> The -o option in the dotnet new command above is used to specify the name of the test project. 2. Add bUnit to the test project To add bUnit to the test project, change to the newly created test projects folder and use the following command: xUnit NUnit MSTest cd <NAME OF PROJECT> dotnet add package bunit.web --version 1.0.0-preview-01 dotnet add package bunit.xunit --version 1.0.0-preview-01 cd <NAME OF PROJECT> dotnet add package bunit.web --version 1.0.0-preview-01 cd <NAME OF PROJECT> dotnet add package bunit.web --version 1.0.0-preview-01 3. Configure project settings The test projects setting needs to be set to the following: the project's SDK needs to be set to Microsoft.NET.Sdk.Razor set the <TargetFramework> to net5.0 Note bUnit works with netcoreapp3.1 and netstandard2.1 test projects as well. To do so, change the first part of the test projects .csproj file to look like this.: <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>net5.0</TargetFramework> </PropertyGroup> ... </Project> 4. Add the test project to your solution If using Visual Studio, add the test project to your solution ( .sln ), and add a reference between the test project and project containing the components that are to be tested: dotnet sln <NAME OF PROJECT>.sln add <NAME OF TEST PROJECT> dotnet add <NAME OF COMPONENT PROJECT>.csproj reference <NAME OF TEST PROJECT>.csproj The result should be a test project with a .csproj that looks like this (non bUnit packages may have different version numbers): xUnit NUnit MSTest <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>net5.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"bunit.web\" Version=\"1.0.0-preview-01\" /> <PackageReference Include=\"bunit.xunit\" Version=\"1.0.0-preview-01\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.7.1\" /> <PackageReference Include=\"xunit\" Version=\"2.4.1\" /> <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.3\"> <PrivateAssets>all</PrivateAssets> <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets> </PackageReference> </ItemGroup> </Project> <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>net5.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"bunit.web\" Version=\"1.0.0-preview-01\" /> <PackageReference Include=\"nunit\" Version=\"3.12.0\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.7.1\" /> <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.16.1\"> <PrivateAssets>all</PrivateAssets> <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets> </PackageReference> </ItemGroup> <ItemGroup> <ProjectReference Include=\"<PATH TO COMPONENT LIB>.csproj\" /> </ItemGroup> </Project> <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> <PropertyGroup> <TargetFramework>net5.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"bunit.web\" Version=\"1.0.0-preview-01\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.7.1\" /> <PackageReference Include=\"MSTest.TestAdapter\" Version=\"2.1.0\" /> <PackageReference Include=\"MSTest.TestFramework\" Version=\"2.1.0\" /> <PackageReference Include=\"coverlet.collector\" Version=\"1.2.0\" /> </ItemGroup> <ItemGroup> <ProjectReference Include=\"<PATH TO COMPONENT LIB>.csproj\" /> </ItemGroup> </Project> Creating a Test Project with bUnit Template To skip a few steps in the guide above, use the bUnit test project template . The bUnit project template currently only works with the xUnit general-purpose testing framework, but other frameworks will be supported in the future. The steps for creating a test project with the bUnit template are as follows: Install the template (only needed the first time) Create a new test project Add the test project to your solution These steps look like this from the dotnet CLI: 1. Install the template Install the template from NuGet using this command: dotnet new --install bunit.template::1.0.0-preview-01 2. Create a new test project Use the following command to create a bUnit with xUnit test project: dotnet new bunit -o <NAME OF TEST PROJECT> The -o option in the dotnet new command above is used to specify the name of the test project. 3. Add the test project to your solution If using Visual Studio, add the test project to your solution ( .sln ), and add a reference between the test project and project containing the components that should be tested: dotnet sln <NAME OF PROJECT>.sln add <NAME OF TEST PROJECT> dotnet add <NAME OF COMPONENT PROJECT>.csproj reference <NAME OF TEST PROJECT>.csproj This will allow the test project to see and test the components in the component project. Further Reading To start creating tests, continue reading the Writing Tests in C# for Blazor Components and Writing Tests in Razor Syntax for Blazor Components pages. For additional tips and tricks that will make writing tests easier, see the Miscellaneous Testing Tips page."
  },
  "docs/getting-started/fixture-details.html": {
    "href": "docs/getting-started/fixture-details.html",
    "title": "Fixture Test Details | bUnit",
    "keywords": "<Fixture> Test Details bUnit's Fixture component provides different parameters you can set on it which change the behavior of the test. It also allows you to set up both a component under test, and additional fragments that can be used in the test. Fragments are a way to define additional markup that is needed in a test, for example to serve as an expected value in an assertion. Warning Razor tests, where Fixture components are used, are currently only compatible with using xUnit as the general purpose testing framework. Parameters All the parameters the Fixture component supports are shown in the listing below: @inherits TestComponentBase <Fixture Setup=@Setup SetupAsync=@SetupAsync Test=@Test TestAsync=@TestAsync Description=\"Description of test\" Timeout=\"TimeSpan.FromSeconds(2)\" Skip=\"Reason to skip the test\"> @code { void Setup(Fixture fixture) { } Task SetupAsync(Fixture fixture) => Task.CompletedTask; // NOTE: Only one of Test/TestAsync can be used at the same time. // Both are included here for illustration purposes only. void Test(Fixture fixture) { } Task TestAsync(Fixture fixture) => Task.CompletedTask; } </Fixture> Setup and Test Methods: Let us start by looking at the parameters that take a method as input first. The methods are called in the order they are listed in below, and should be used for the described purpose: Setup and SetupAsync : The Setup and SetupAsync methods are called first, and you can provide both if needed. If both are provided, Setup is called first. These are usually used to configure the <xref:Bunit.ITestContext.Services> collection of the Fixture component before the component under test or any fragments are rendered. Test or TestAsync : The Test or TestAsync method is called after the setup methods. One, and only one of the test methods can be specified per fixture. Use the test method to access the component under test and any fragments defined in the fixture, and interact and assert against them. In the example above, the setup and test methods are declared in a @code { } block nested inside the Fixture component. This visually groups the methods nicely to the Fixture component, making it easier to see what parts of a test belong together, especially when you have multiple tests inside the same test component. You can have the methods anywhere inside the test component you want, which can be useful. For example, if you have the same setup steps for multiple tests, they can be placed in a common setup method that the tests in the same test component can share, avoiding code duplication. TODO EGIL Other parameters There are other parameters which affect how the test runs, and how it is displayed in something like Visual Studio's Test Explorer: Description : If a description is provided, it will be displayed by the test runner when the test runs, and in Visual Studio's Test Explorer. If no description is provided, the name of the provided test method is used. Skip : If the skip parameter is provided, the test is skipped, and the text entered in the skip parameter is passed to the test runner as the reason to skip the test. Timeout : If provided, the test runner will terminate the test after the specified amount of time if it has not completed already. <ComponentUnderTest> and <Fragment> The Fixture component only accepts the ComponentUnderTest and Fragment components as its child content. All other components and markup are ignored. For example: @inherits TestComponentBase <Fixture Test=\"...\"> <ComponentUnderTest> <!-- Razor or HTML markup goes here --> </ComponentUnderTest> <Fragment> <!-- Razor or HTML markup goes here --> </Fragment> <Fragment Id=\"some id\"> <!-- Razor or HTML markup goes here --> </Fragment> </Fixture> Here are the rules for the Fixture component’s child content: One ComponentUnderTest component must be added, and it should not be empty. Zero or more Fragment components can be added. The order the ComponentUnderTest and Fragment components are added in does not matter. The ComponentUnderTest and Fragment components can contain both Razor markup and regular HTML markup. If more than one Fragment component is added, give each fragment an Id to be able to identify them when retrieving them in the test method. The first Fragment component added can always be retrieved without an id. Using <ComponentUnderTest> and <Fragment> in the Test Methods The Fixture 's setup and test methods receive the Fixture instance as input when they are called. It is through the Fixture instance that we can get the component under test and any fragments declared inside it. The relevant methods come in both generic and non-generic variants: GetComponentUnderTest() : Use this to return an IRenderedFragment , which represents the content declared inside the ComponentUnderTest component. A IRenderedFragment does not give you access to the instance of the component under test, but it does give you access to the rendered markup. GetComponentUnderTest<TComponent>() : Use this to return an IRenderedComponent<TComponent> , which represents a component of type TComponent declared inside the ComponentUnderTest component. The IRenderedComponent<TComponent> gives you access to the TComponent instance, as well as the rendered markup of it. GetFragment(String) : Use this to get a IRenderedFragment , which represents the content declared inside the Fragment component. GetFragment<TComponent>(String) Use this to return an IRenderedComponent<TComponent> , which represents a component of type TComponent declared inside the Fragment component. For both GetFragment methods, the id string parameter is optional. If it is not provided, the first Fragment is used to return a IRenderedFragment or IRenderedComponent<TComponent> . Otherwise, the Fragment with an Id parameter that matches the id specified in the GetFragment method call will be used. The generic versions of GetComponentUnderTest<TComponent>() and GetFragment<TComponent>(String) can specify a component of type TComponent which is not the first child of ComponentUnderTest or Fragment . This is useful in situations such as the component under test being wrapped inside a <CascadingValue> . The methods will return the first component it finds that matches the requested type through a depth-first search of the render tree. Note You can call the GetComponentUnderTest or GetFragment methods multiple times on the same Fixture instance. Each time will return the same instance for the same input. However, you cannot mix the generic and non-generic versions. <SimpleTodo> Test Example Let's look at an example of an elaborate test which tests the lifecycle of a simple task list component, <SimpleTodo> (listed below) that has a service injected, receives a cascading value, and changes between renders: @inject List<string> Tasks <form> <input @bind-value=@newTaskValue placeholder=\"Add todo here . . .\" type=\"text\" /> <button type=\"submit\" @onclick=@HandleTaskAdded>Add task</button> </form> <ul id=\"tasks\" class=@ThemeClass> @foreach (var task in Tasks) { <li>@task</li> } </ul> @code { [CascadingParameter(Name = \"Theme\")] public string ThemeClass { get; set; } = string.Empty; private string newTaskValue = string.Empty; private void HandleTaskAdded() { if (!string.IsNullOrWhiteSpace(newTaskValue)) Tasks.Add(newTaskValue); newTaskValue = string.Empty; } } In the test, we want to verify that: The <form> resets itself correctly after a task has been added The task was added correctly to the task list The \"Theme\" cascading value was correctly assigned to the task list The test looks like this: @inherits TestComponentBase <Fixture Description=\"When a task is added, then the input field gets reset\" Setup=\"RegisterTasksService\" Test=\"WhenTaskIsAddedInputGetsReset\"> <ComponentUnderTest> <CascadingValue Name=\"Theme\" Value=@(\"dark-theme\")> <SimpleTodo></SimpleTodo> </CascadingValue> </ComponentUnderTest> <Fragment> <form> <input placeholder=\"Add todo here . . .\" type=\"text\" value=\"\" /> <button type=\"submit\">Add task</button> </form> </Fragment> <Fragment Id=\"expected tasks\"> <ul class=\"dark-theme\" id=\"tasks\"> <li>Existing task</li> <li>FOO BAR BAZ</li> </ul> </Fragment> @code { void RegisterTasksService(Fixture fixture) => fixture.Services.AddSingleton(new List<string>{ \"Existing task\" }); void WhenTaskIsAddedInputGetsReset(Fixture fixture) { // Arrange - get the component under test and fragments IRenderedComponent<SimpleTodo> cut = fixture.GetComponentUnderTest<SimpleTodo>(); IRenderedFragment expectedFormAfterClick = fixture.GetFragment(); IRenderedFragment expectedTasks = fixture.GetFragment(\"expected tasks\"); // Act - change the value of the input element and click the submit button cut.Find(\"input\").Change(\"FOO BAR BAZ\"); cut.Find(\"button\").Click(); // Assert - verify cascading value was received Assert.Equal(\"dark-theme\", cut.Instance.ThemeClass); // Assert - verify that tasks had the correct theme applied // and the task added. IElement actualTasks = cut.Find(\"#tasks\"); actualTasks.MarkupMatches(expectedTasks); // Assert - verify that the input form was reset after task was added IElement actualForm = cut.Find(\"form\"); actualForm.MarkupMatches(expectedFormAfterClick); } } </Fixture> Let's look at what's going on in this test: The fixture has both a setup and test method specified. The setup method is used to register an empty list of tasks that the <SimpleTodo> component requires. The <SimpleTodo> component is wrapped in a <CascadingValue> component that passes down the \"Theme\" cascading value. The first <Fragment> does not have an id since the GetFragment() method will pick the first fragment if no id is provided. The second <Fragment Id=\"expected tasks\"> does have an Id to make it possible to get the second fragment through a call to the GetFragment(\"expected tasks\") method. The test uses the generic version of GetComponentUnderTest<SimpleTodo>() , which gives us access to the instance of SimpleTodo and allows us to inspect its properties, e.g. ThemeClass . This covers the “arrange”-steps in the test above and shows how you can easily get access to both the component under test and other fragments that you might need to write your test concisely. We will cover the details of the \"act\" and \"assertion\" step in the Interacting with a Component Under Test and Verifying Output from a Component Under Test pages. Learn more about injecting services into components under test on the Injecting Services into Components Under Test page."
  },
  "docs/getting-started/index.html": {
    "href": "docs/getting-started/index.html",
    "title": "Getting Started with bUnit | bUnit",
    "keywords": "Getting Started with bUnit To start writing tests for Blazor components, first set up a test project and then you can start adding tests using either C# or Razor syntax. The basic getting started topics are as follows: Creating a new bUnit Test Project covers setting up a bUnit test project. Writing Tests in C# for Blazor Components covers the basics of writing tests in C#, i.e. regular unit tests. Writing Tests in Razor Syntax for Blazor Components covers the basics of writing tests in .razor files using Razor and C# syntax. The next level topics are: Providing different types of input to a component under test in C# based tests, e.g. passing parameters or injecting services. Verifying output in various ways from a component under test, e.g. inspecting the rendered markup. Mocking dependencies a component under test has, e.g. the IJsRuntime or HttpClient . Getting Help Can't figure out how to write a test for a testing scenario? Do you have a testing scenario that is hard to write or cannot be written elegantly with bUnit? Have you found a bug in bUnit? Head over to bUnit’s discussion forum to ask a question, give feedback, or suggest a new feature. Alternatively, join bUnits Gitter channel and let us know. There are no stupid questions - all are welcome!"
  },
  "docs/getting-started/snapshottest-details.html": {
    "href": "docs/getting-started/snapshottest-details.html",
    "title": "SnapshotTest Details | bUnit",
    "keywords": "<SnapshotTest> Details bUnit's support for snapshot testing comes with the SnapshotTest component. In snapshot testing, you declare your input (e.g. one or more component under test) and the expected output, and the library will automatically tell you if they do not match. Note One notable snapshot testing feature is missing now: the ability to auto-generate the expected output initially, when it is not specified. If you want to contribute to this, take a look at issue #3 on GitHub . Warning Razor tests, where SnapshotTest components are used, are currently only compatible with xUnit as the general purpose testing framework. Parameters All parameters the SnapshotTest component supports is shown in the listing below: @inherits TestComponentBase <SnapshotTest Setup=@Setup SetupAsync=@SetupAsync Description=\"Description of test\" Timeout=\"TimeSpan.FromSeconds(2)\" Skip=\"Reason to skip the test\"> <TestInput>...</TestInput> <ExpectedOutput>...</ExpectedOutput> @code { void Setup(SnapshotTest test) { } Task SetupAsync(SnapshotTest test) => Task.CompletedTask; } </SnapshotTest> Let us go over each of these: Setup and SetupAsync : The Setup and SetupAsync methods can be used to register any services that should be injected into the components declared inside the <TestInput> and <ExpectedOutput> , and you can use both Setup and SetupAsync if needed. If both are provided, Setup is called first. Description : If a description is provided, it will be displayed by the test runner when the test runs, as well as in Visual Studio's Test Explorer. If no description is provided, \"SnapshotTest #NUM\" is used where NUM is the position the test has in the file it is declared in. Skip : If the skip parameter is provided, the test is skipped and the text entered in the skip parameter is passed to the test runner as the reason to skip the test. Timeout : If provided, the test runner will terminate the test after the specified amount of time if it has not completed already. TestInput child component: Inside the <TestInput> child component is where you put all Razor and HTML markup that constitute the test input or component under test. ExpectedOutput child component: Inside the <ExpectedOutput> child component is where you put all Razor and HTML markup that represents what the rendered result of <TestInput> should be. What Happens When the Test Runs? When a SnapshotTest runs, this happens: It will first call the setup methods Then it will render the <TestInput> and <ExpectedOutput> child components Finally, it will compare the rendered markup from the <TestInput> and <ExpectedOutput> child components using the semantic HTML comparer built into bUnit The semantic comparison in bUnit allows you to customize the snapshot verification through \"comparison modifiers\" in the <ExpectedOutput> markup. For example, if you want to tell the semantic comparer to ignore the case of the text content inside an element, you can add the diff:ignoreCase attribute to the element inside <ExpectedOutput> . To learn more about semantic comparison modifiers, go to the Customizing the Semantic HTML Comparison page."
  },
  "docs/getting-started/writing-csharp-tests.html": {
    "href": "docs/getting-started/writing-csharp-tests.html",
    "title": "Writing Tests in C# for Blazor Components | bUnit",
    "keywords": "Writing Tests in C# for Blazor Components Testing Blazor components is a little different from testing regular C# classes: Blazor components are rendered ; they have the Blazor component life cycle during which we can provide input to them and they can produce output . Use bUnit to render the component under test, pass in its parameters, inject required services, and access the rendered component instance and the markup it has produced. Rendering a component happens through bUnit's TestContext . The result of the rendering - a IRenderedComponent<TComponent> - provides access to the component instance and the markup produced by the component. Creating a Basic Test This is a simple example that tests the following <HelloWorld> component: <h1>Hello world from Blazor</h1> xUnit NUnit MSTest using Xunit; using Bunit; namespace Bunit.Docs.Samples { public class HelloWorldTest { [Fact] public void HelloWorldComponentRendersCorrectly() { // Arrange using var ctx = new TestContext(); // Act var cut = ctx.RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } using Bunit; using NUnit.Framework; namespace Bunit.Docs.Samples { public class HelloWorldTest { [Test] public void HelloWorldComponentRendersCorrectly() { // Arrange using var ctx = new Bunit.TestContext(); // Act var cut = ctx.RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } Note TestContext is an ambiguous reference between TestContext and NUnit.Framework.TestContext , so you have to specify the Bunit namespace when referencing TestContext to resolve the ambiguity for the compiler. Alternatively, you can give bUnit's TestContext a different name during import, e.g.: using BunitTestContext = Bunit.TestContext; using Bunit; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace Bunit.Docs.Samples { [TestClass] public class HelloWorldTest { [TestMethod] public void HelloWorldComponentRendersCorrectly() { // Arrange using var ctx = new Bunit.TestContext(); // Act var cut = ctx.RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } Note TestContext is an ambiguous reference between TestContext and Microsoft.VisualStudio.TestTools.UnitTesting.TestContext , so you have to specify the Bunit namespace when referencing TestContext to resolve the ambiguity for the compiler. Alternatively, you can give bUnit's TestContext a different name during import, e.g.: using BunitTestContext = Bunit.TestContext; The test above does the following: Creates a new instance of the disposable bUnit TestContext , and assigns it to ctx variable using the using var syntax to avoid unnecessary source code indention. Renders the <HelloWorld> component using TestContext , which is done through the <xref:Bunit.TestContext.RenderComponent``1(Bunit.Rendering.ComponentParameter[])> method. We cover passing parameters to components on the Passing Parameters to Components page. Verify the rendered markup from the <HelloWorld> component using the MarkupMatches method. The MarkupMatches method performs a semantic comparison of the expected markup with the rendered markup. Tip Learn more about how the semantic HTML/markup comparison in bUnit works, and how to customize it on the Customizing the Semantic HTML Comparison page. Tip In bUnit tests, we like to use the abbreviation CUT , short for \"component under test\", to indicate the component that is being tested. This is inspired by the common testing abbreviation SUT , short for \"system under test\". Remove Boilerplate Code from Tests We can remove some boilerplate code from each test by making the TestContext implicitly available to the test class so we do not have to have using var ctx = new Bunit.TestContext(); in every test. This can be done like this: xUnit NUnit MSTest using Xunit; using Bunit; namespace Bunit.Docs.Samples { public class HelloWorldImplicitContextTest : TestContext { [Fact] public void HelloWorldComponentRendersCorrectly() { // Act var cut = RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } Since xUnit instantiates test classes for each execution of test methods inside them and disposes of them after each test method has run, we simply inherit from TestContext , and methods like <xref:Bunit.TestContext.RenderComponent``1(Bunit.Rendering.ComponentParameter[])> can now be called directly from each test, as seen in the listing above. using Bunit; using NUnit.Framework; namespace Bunit.Docs.Samples { public class HelloHelloWorldImplicitContextTest : BunitTestContext { [Test] public void HelloWorldComponentRendersCorrectly() { // Act var cut = RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } using System; using Bunit; using Bunit.Rendering; using Microsoft.AspNetCore.Components; using NUnit.Framework; namespace Bunit.Docs.Samples { public abstract class BunitTestContext : IDisposable { private Bunit.TestContext _context; public ITestRenderer Renderer => _context?.Renderer ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); public TestServiceProvider Services => _context?.Services ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); public void Dispose() { _context?.Dispose(); _context = null; } [SetUp] public void Setup() => _context = new Bunit.TestContext(); [TearDown] public void TearDown() => Dispose(); public IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameters) ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); public IRenderedComponent<TComponent> RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameterBuilder) ?? throw new InvalidOperationException(\"NUnit has not started executing tests yet\"); } } Since NUnit instantiates a test class only once for all tests inside it, we cannot simply inherit directly from TestContext as we want a fresh instance of TestContext for each test. Instead, we create a helper class, BunitTestContext , which is listed above, and use that to hook into NUnit's [SetUp] and [TearDown] methods, which runs before and after each test. Methods like <xref:Bunit.TestContext.RenderComponent``1(Bunit.Rendering.ComponentParameter[])> can then be called directly from each test, as seen in the listing above. using Bunit; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace Bunit.Docs.Samples { [TestClass] public class HelloHelloWorldImplicitContextTest : BunitTestContext { [TestMethod] public void HelloWorldComponentRendersCorrectly() { // Act var cut = RenderComponent<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } } using System; using Bunit; using Bunit.Rendering; using Microsoft.AspNetCore.Components; using Microsoft.VisualStudio.TestTools.UnitTesting; namespace Bunit.Docs.Samples { public abstract class BunitTestContext : IDisposable { private Bunit.TestContext _context; public ITestRenderer Renderer => _context?.Renderer ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); public TestServiceProvider Services => _context?.Services ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); public void Dispose() { _context?.Dispose(); _context = null; } [TestInitialize] public void Setup() => _context = new Bunit.TestContext(); [TestCleanup] public void TearDown() => Dispose(); public IRenderedComponent<TComponent> RenderComponent<TComponent>(params ComponentParameter[] parameters) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameters) ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); public IRenderedComponent<TComponent> RenderComponent<TComponent>(Action<ComponentParameterCollectionBuilder<TComponent>> parameterBuilder) where TComponent : IComponent => _context?.RenderComponent<TComponent>(parameterBuilder) ?? throw new InvalidOperationException(\"MSTest has not started executing tests yet\"); } } Since MSTest instantiates a test class only once for all tests inside it, we cannot simply inherit directly from TestContext as we want a fresh instance of TestContext for each test. Instead, we create a helper class, BunitTestContext , which is listed above, and use that to hook into MSTest's [TestInitialize] and [TestCleanup] methods. This runs before and after each test. Then methods like <xref:Bunit.TestContext.RenderComponent``1(Bunit.Rendering.ComponentParameter[])> can now be called directly from each test, as seen in the listing above. Important All the examples in the documentation explicitly new up a TestContext , i.e. using var ctx = new TestContext() . If you are using the trick above and have your test class inherit from TestContext , you should NOT new up a TestContext in test methods also. Simply call the test contest's methods directly, as they are available in your test class. For example, var cut = ctx.RenderComponent<HelloWorld>(); becomes var cut = RenderComponent<HelloWorld>(); . Further Reading With the basics out of the way, next we will look at how to pass parameters and inject services into our component under test. After that, we will cover ways we can verify the outcome of a rendering in more detail Passing Parameters to Components Injecting Services into Components Under Test Verifying Markup from a Component Verifying the State of a Component Under Test Triggering Event Handlers in Components"
  },
  "docs/getting-started/writing-razor-tests.html": {
    "href": "docs/getting-started/writing-razor-tests.html",
    "title": "Writing Tests in Razor Syntax for Blazor Components | bUnit",
    "keywords": "Writing Tests in Razor Syntax for Blazor Components A test for a Blazor component can be written in a Blazor test component using a mix of Razor and C# syntax. The advantage of this is the familiarity in declaring the component under test, and other HTML or Razor fragments that will be used in the test, in Razor and HTML markup . This is especially useful when testing components that take a lot of parameters and child content as input. Note Tests written in Blazor test components can be discovered and invoked individually, and will show up in Visual Studio's Test Explorer, for example, just like regular unit tests. However, they will not show up before the Blazor test component has been compiled into C# by the Blazor compiler, and if there are compile-errors from the Blazor compiler, they might appear to come and go in the Test Explorer. Warning Razor tests are currently only compatible with using xUnit as the general purpose testing framework. Important Make sure the project SDK type is set to <Project Sdk=\"Microsoft.NET.Sdk.Razor\"> , instead of the default <Project Sdk=\"Microsoft.NET.Sdk\"> that is used with standard testing projects. See Creating a new bUnit Test Project for a guide on setting up bUnit test projects. Creating a Test Specific _Imports.razor File Razor tests are written in Blazor test components. To make our lives a little easier, let’s first set up a _Imports.razor file with the \"using directives\" we are going to be using throughout our tests. Simply add the following _Imports.razor to the root folder where you will be placing your Blazor test components: @using Microsoft.AspNetCore.Components.Forms @using Microsoft.AspNetCore.Components.Routing @using Microsoft.AspNetCore.Components.Web @using Microsoft.JSInterop @using Microsoft.Extensions.DependencyInjection @using AngleSharp.Dom @using Bunit @using Bunit.TestDoubles @using Xunit With that created, we are ready to create our first Razor test. Creating a Blazor Test Component A Blazor test component is conceptually very similar to a regular test class in xUnit or NUnit, for example. You can define multiple tests inside a single test component as long as they are based on the special bUnit test components, currently either Fixture or SnapshotTest . In addition to that, Blazor test components has to inherit from TestComponentBase , e.g.: @inherits TestComponentBase The following two sections will show how to create tests using bUnit's Fixture and SnapshotTest components. Creating a Test using the <Fixture> Component Let's see a simple example where we test the following <HelloWorld> component using the bUnit Fixture component: <h1>Hello world from Blazor</h1> Here is the Razor code that tests the <HelloWorld> component: @inherits TestComponentBase <Fixture Test=\"HelloWorldComponentRendersCorrectly\"> <ComponentUnderTest> <HelloWorld /> </ComponentUnderTest> @code { void HelloWorldComponentRendersCorrectly(Fixture fixture) { // Act var cut = fixture.GetComponentUnderTest<HelloWorld>(); // Assert cut.MarkupMatches(\"<h1>Hello world from Blazor</h1>\"); } } </Fixture> Let's break down what is going on in this test: The test component inherits from TestComponentBase . This is done in line 1 with @inherits Bunit.TestComponentBase . The test is defined using the Fixture component. It orchestrates the test. Inside the Fixture component, we add a ComponentUnderTest component where the component under test is declared using regular Razor syntax. In this case, it is a very simple <HelloWorld /> declaration. The Fixture component's Test parameter takes a method which is called when the test runs, and is passed to the Fixture component. In the test method, we use the GetComponentUnderTest<TComponent>() to get the HelloWorld declared in the Fixture . In addition, we verify the rendered markup from the HelloWorld component using the MarkupMatches method. This performs a semantic comparison of the expected markup with the rendered markup. Tip To learn more about how the semantic HTML/markup comparison works in bUnit, as well as how to customize it, visit the Customizing the Semantic HTML Comparison page. Tip In bUnit tests, we like to use the abbreviation CUT , short for \"component under test\", to indicate the component that is being tested. This is inspired by the common testing abbreviation SUT , short for \"system under test\". Creating a Test using the <SnapshotTest> Component In snapshot testing, you declare your input (e.g. one or more component under test) and the expected output, and the library will automatically tell you if they do not match. With bUnit, this comparison is done using a smart built-in semantic HTML comparison logic. Let's see a simple example where we test the following <HelloWorld> component using the bUnit SnapshotTest component: <h1>Hello world from Blazor</h1> Here is the Razor code that tests the <HelloWorld> component: @inherits TestComponentBase <SnapshotTest Description=\"HelloWorld component renders correctly\"> <TestInput> <HelloWorld /> </TestInput> <ExpectedOutput> <h1>Hello world from Blazor</h1> </ExpectedOutput> </SnapshotTest> Let's break down what is going on in this test with the SnapshotTest component: We specify the Description parameter. The text in that will be shown when test runs and in the Test Explorer in Visual Studio, just like regular unit tests names. Inside the <TestInput> child component of SnapshotTest , we declare the component under test. In this case, this is the <HelloWorld> component. Inside the <ExpectedOutput> child component of SnapshotTest , we declare the expected rendered output from whatever is declared in the <TestInput> child component. When the test runs, the SnapshotTest component will automatically compare the rendered output of the <TestInput> component with that of the <ExpectedOutput> component using the semantic HTML comparison logic in bUnit. Tip Learn more about how the semantic HTML/markup comparison in bUnit work, and how to customize it on the Customizing the Semantic HTML Comparison page. Passing Parameters to Components Under Test Since we are declaring our component under test in Razor syntax, passing parameters to the component under test is the same as passing parameters in normal Blazor components. This is the same for tests created with both the Fixture and SnapshotTest components. In this example, we are passing both attribute parameters and child content to the component under test. In this case, this is a basic <Alert> component: @inherits TestComponentBase <Fixture Test=\"fixture => { }\"> <ComponentUnderTest> <Alert Type=\"AlertType.Warning\" Heading=\"TDD takes practise\"> Before you really get the benefit of TDD, you need to practice... </Alert> </ComponentUnderTest> </Fixture> <SnapshotTest> <TestInput> <Alert Type=\"AlertType.Warning\" Heading=\"TDD takes practise\"> Before you really get the benefit of TDD, you need to practice... </Alert> </TestInput> <ExpectedOutput> <div diff:ignore>...</div> </ExpectedOutput> </SnapshotTest> Injecting services into the components under test is covered on the Injecting Services into Components Under Test page. Further Reading Now that we have covered the basics of writing tests using Razor syntax, you can continue digging deeper. Here are some good places to start: Fixture Test Details SnapshotTest Details Injecting Services into Components Under Test Verifying Markup from a Component Verifying the State of a Component Under Test Triggering Event Handlers in Components"
  },
  "docs/interaction/awaiting-async-state.html": {
    "href": "docs/interaction/awaiting-async-state.html",
    "title": "Awaiting an Asynchronous State Change in a Component Under Test | bUnit",
    "keywords": "Awaiting an Asynchronous State Change A test can fail if a component performs asynchronous renders. This may be due to a reason such as waiting for an asynchronous operation to complete before continuing its render life-cycle. For example, if a component is waiting for an async web service to return data to it in the OnInitializedAsync() life-cycle method before rendering it to the render tree. You need to handle this specifically in your tests because tests execute in the test framework's synchronization context and the test renderer executes renders in its own synchronization context. If you do not, you will likely experience tests that sometimes pass, and sometimes fail. bUnit comes with two methods that help to deal with this issue: the WaitForState() method covered on this page, and the WaitForAssertion() method covered on the Assertion of Asynchronous Changes page. Let's start by taking a look at the WaitForState method in more detail. Waiting for State Using WaitForState The WaitForState(Func<Boolean>, TimeSpan?) method can be used to block and wait in a test method, until the provided predicate returns true or the timeout is reached (the default timeout is one second). Note The WaitForState() method will try the predicate pass to it when the WaitForState() method is called, and every time the component under test renders. Let us look at an example. Consider the following <AsyncData> component who awaits an async TextService in its OnInitializedAsync() life-cycle method. When the service returns the data, the component will automatically re-render to update its rendered markup: <p>@text</p> @code { string text = string.Empty; [Parameter] public Task<string> TextService { get; set; } protected override async Task OnInitializedAsync() { text = await TextService; } } To test the <AsyncData> component, do the following: using var ctx = new TestContext(); var textService = new TaskCompletionSource<string>(); var cut = ctx.RenderComponent<AsyncData>(parameters => parameters .Add(p => p.TextService, textService.Task) ); // Act - set the awaited result from the text service textService.SetResult(\"Hello World\"); // Wait for state before continuing test cut.WaitForState(() => cut.Find(\"p\").TextContent == \"Hello World\"); // Assert - verify result has been set cut.MarkupMatches(\"<p>Hello World</p>\"); This is what happens in the test: The test uses a TaskCompletionSource<string> to simulate an async web service. In the second highlighted line, the result is provided to the component through the textService . This causes the component to re-render. In the third highlighted line, the WaitForState() method is used to block the test until the predicate provided to it returns true. Finally, the tests assertion step can execute, knowing that the desired state has been reached. Warning The wait predicate and an assertion should not verify the same thing. Instead, use the WaitForAssertion(...) method covered on the Assertion of Asynchronous Changes page instead. Controlling Wait Timeout The timeout, which defaults to one second, can be controlled by passing a TimeSpan as the second argument to the WaitForState() method, e.g.: cut.WaitForState(() => cut.Find(\"p\").TextContent == \"Long time\", TimeSpan.FromSeconds(2)); If the timeout is reached, a WaitForFailedException exception is thrown with the following error message: The state predicate did not pass before the timeout period passed."
  },
  "docs/interaction/index.html": {
    "href": "docs/interaction/index.html",
    "title": "Interacting with a Component Under Test | bUnit",
    "keywords": "Interacting with a Component Under Test This section covers the various ways to interact with a component under test, e.g. trigger event handlers. This - and more - is covered in the following sub sections: Triggering Event Handlers in Components : This covers how to invoke event handlers bound to elements rendered by a component under test. Triggering a Render Life Cycle on a Component : This covers how to manually trigger a render cycle for a component under test. Awaiting an Asynchronous State Change in a Component Under Test : This covers how to await one or more asynchronous changes to a component under test's state before continuing the test."
  },
  "docs/interaction/trigger-event-handlers.html": {
    "href": "docs/interaction/trigger-event-handlers.html",
    "title": "Triggering Event Handlers in Components | bUnit",
    "keywords": "Triggering Event Handlers in Components Blazor makes it possible to bind many event handlers to elements in a Blazor component using the @onXXXX syntax, e.g. @onclick=\"MyClickHandler\" . bUnit comes with event dispatch helper methods that makes it possible to invoke event handlers for all event types supported by Blazor. The built-in dispatch event helpers are: Clipboard events Drag events Focus events General events Input events Keyboard events Media events Mouse events Pointer events Progress events Touch event To use these, first find the element in the component under test where the event handler is bound. This is usually done with the Find(string cssSelector) method. Next, invoke the event dispatch helper method of choice. The following section demonstrates how to do this... Invoking an Event Handler on an Element To invoke an event handler on an element, first find the element in the component under test, and then call the desired event dispatch helper method. Let's look at a common example where an @onclick event handler is invoked. The example will use the <ClickMe> component listed here: <button @onclick=\"ClickHandler\">Click ME!</button> @code { void ClickHandler(MouseEventArgs args) { // ... } } To trigger the @onclick ClickHandler event handler method in the <ClickMe> component, do the following: C# test code Razor test code // Arrange using var ctx = new TestContext(); var cut = ctx.RenderComponent<ClickMe>(); var buttonElement = cut.Find(\"button\"); // Act buttonElement.Click(); buttonElement.Click(detail: 3, ctrlKey: true); buttonElement.Click(new MouseEventArgs()); // Assert // ... @inherits TestComponentBase <Fixture Test=\"ClickingButtonWorks\"> <ComponentUnderTest> <ClickMe /> </ComponentUnderTest> @code { void ClickingButtonWorks(Fixture fixture) { // Arrange var cut = fixture.GetComponentUnderTest<ClickMe>(); var buttonElement = cut.Find(\"button\"); // Act buttonElement.Click(); buttonElement.Click(detail: 3, ctrlKey: true); buttonElement.Click(new MouseEventArgs()); // Assert // ... } } </Fixture> This is what happens in the test: In the arrange step of the test, the <ClickMe> component is rendered and the <button> element is found using the Find(string cssSelector) method. The act step of the test is the <button> 's click event handler. In this case, the ClickHandler event handler method is invoked in three different ways: The first and second invocation uses the same Click method. It has a number of optional arguments, some of which are passed in the second invocation. If any arguments are provided, they are added to an instance of the MouseEventArgs type, which is passed to the event handler if it has it as an argument. The last invocation uses the Click method that takes an instance of the MouseEventArgs type, which is passed to the event handler if it has it as an argument. All the event dispatch helper methods have the same two overloads: one that takes a number of optional arguments, and one that takes one of the EventArgs types provided by Blazor."
  },
  "docs/interaction/trigger-renders.html": {
    "href": "docs/interaction/trigger-renders.html",
    "title": "Triggering a Render Life Cycle on a Component | bUnit",
    "keywords": "Triggering a Render Life Cycle on a Component When a component under test is rendered, an instance of the IRenderedComponent<TComponent> type is returned. Through that, it is possible to cause the component under test to render again directly through the Render() method or one of the SetParametersAndRender() methods, or indirectly through the InvokeAsync() method. Warning The Render() and SetParametersAndRender() methods are not available in the IRenderedFragment type that is returned when calling the non -generic version of GetComponentUnderTest() in <Fixture> -based Razor tests. Call the generic version of GetComponentUnderTest<TComponent>() to get a IRenderedComponent<TComponent> . Note These methods are available and work the same in both C# and Razor-based tests. The examples below are from C# based tests only. Let's look at how to use each of these methods to cause a re-render. Render The Render() tells the renderer to re-render the component, i.e. go through its life-cycle methods (except for OnInitialized() and OnInitializedAsync() methods). To use it, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); Assert.Equal(1, cut.RenderCount); // Re-render without new parameters cut.Render(); Assert.Equal(2, cut.RenderCount); The highlighted line shows the call to Render() . Tip The number of renders a component has been through can be inspected and verified using the RenderCount property. SetParametersAndRender The SetParametersAndRender(...) methods tells the renderer to re-render the component with new parameters, i.e. go through its life-cycle methods (except for OnInitialized() and OnInitializedAsync() methods), passing the new parameters to the SetParametersAsync() method, but only the new parameters . To use it, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Item>(parameters => parameters .Add(p => p.Value, \"Foo\") ); cut.MarkupMatches(\"<span>Foo</span>\"); // Re-render with new parameters cut.SetParametersAndRender(parameters => parameters .Add(p => p.Value, \"Bar\") ); cut.MarkupMatches(\"<span>Bar</span>\"); The highlighted line shows the call to SetParametersAndRender() , which is also available as a version that takes the zero or more component parameters, e.g. created through the component parameter factory helper methods, if you prefer that method of passing parameters. Note Passing parameters to components through the SetParametersAndRender(...) methods is identical to doing it with the RenderComponent<TComponent>(...) methods, described in detail on the Passing Parameters to Components page. InvokeAsync Invoking methods on a component under test, which causes a render - e.g. by calling StateHasChanged - can result in the following error: The current thread is not associated with the Dispatcher. Use InvokeAsync() to switch execution to the Dispatcher when triggering rendering or component state. If you receive this error, you need to invoke your method inside an Action delegate passed to the InvokeAsync(...) method. Let’s look at an example of this, using the <ImparativeCalc> component listed below: <output>@result</output> @code { int result = 0; public void Calculate(int x, int y) { result = x + y; StateHasChanged(); } } To invoke the Calculate() method on the component instance, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<ImparativeCalc>(); // Indirectly re-renders through the call to StateHasChanged // in the Calculate(x, y) method. cut.InvokeAsync(() => cut.Instance.Calculate(1, 2)); cut.MarkupMatches(\"<output>3</output>\"); The highlighted line shows the call to InvokeAsync(...) , which is passed an Action delegate that calls the Calculate method. Tip The instance of a component under test is available through the Instance property."
  },
  "docs/misc-test-tips.html": {
    "href": "docs/misc-test-tips.html",
    "title": "Miscellaneous Testing Tips | bUnit",
    "keywords": "Miscellaneous bUnit Testing Tips Here are a few testing tips and tricks that have proven useful to us. These don’t fit naturally on other pages but are useful enough to be highlighted here. Projects Structure and Tips and Tricks The recommended solution/project structure for a test and production code project set-up is as follows: src | MyComponentLib.csproj (namespace e.g. \"Company.MyComponentLib\") | _Imports.razor | Component1.razor | SubFolder | SubComponent1.razor test | MyComponentLibTests.csproj (with project reference to MyComponentLib.csproj) | _Imports.razor | Component1Test.cs | SubFolder | SubComponent1Test.cs Using the same Root Namespace and Folder Structure A neat trick, which will limit the import statements needed in your test project, is to set the root namespace to the same as that of the production code project, AND use the same folder structure as shown above. Following the example above, the MyComponentLibTests.csproj file should contain this: <PropertyGroup> <RootNamespace>Company.MyComponentLib</RootNamespace> </PropertyGroup> This makes the tooling in Visual Studio and other IDEs automatically assign the same namespaces to new test classes and test components when they are created. Capturing Logs from ILogger in Test Output TODO: Document XunitLogger and XunitLoggerFactory Copying/pasting HTML easier When writing C# based tests, you may want to copy/paste HTML into C# strings from something like a Razor file, for example. This is tedious to do manually as you have to escape the quotes and other special characters, for example <div class=\"alert\"> needs to be written as \"<div class=\\\"alert\\\">\" . The extension, SmartPaster2019 , allows us to copy strings in any character that needs to be escaped will be automatically."
  },
  "docs/providing-input/configure-3rd-party-libs.html": {
    "href": "docs/providing-input/configure-3rd-party-libs.html",
    "title": "Configure 3rd Party Libraries for Testing | bUnit",
    "keywords": "Configure 3rd Party Libraries for Testing Testing a component that is built using a 3rd party component library can require additional setup steps in each test to ensure that the 3rd party components work correctly in a test context. For example, if a 3rd party component requires services to be registered in production code, it is likely that this is needed in a test context as well. See the Injecting Services into Components Under Test page for more info on this. Similarly, if a root component is needed to provide cascading values to the 3rd party components, that is likely to be needed as well. For more on this, see the Passing Parameters to Components page. bUnit Friendly Component Libraries This section contains a table of 3rd party component libraries that are known for allowing their users to test their components with bUnit. If additional setup or configuration is needed, a link is provided to the component library's own documentation which shows how to test a component that uses components from the library. Component Library bUnit compatibility notes Test context setup guide Telerik UI for Blazor Feedback is appreciated Telerik Grid Setup Tip If you are a Blazor component vendor and have instructions on how to setup a bUnit test context for testing components that use your components, please add a link to your documentation and component library to the table above. Just submit a pull-request to this page with the relevant links added, share the relevant links in bUnit's gitter chat , or add an issue on bUnit's github page with the relevant links."
  },
  "docs/providing-input/index.html": {
    "href": "docs/providing-input/index.html",
    "title": "Providing Input to a Component Under Test | bUnit",
    "keywords": "Providing Input to a Component Under Test This section covers the various ways to provide input to a component under test. It’s split into three sub sections: Passing Parameters to Components : This covers passing regular parameters, child content, cascading values, event callbacks, etc. This topic is mostly relevant when writing tests in C# only. Injecting Services into Components Under Test : This covers injecting services into components under test. This topic is relevant for both Razor-based tests and C# only tests. Controlling the Root Render Tree : This covers how to modify the root render tree that components under tests are rendered in. Configure 3rd Party Libraries for Testing : This covers setting up 3rd party libraries in a bUnit testing scenario so that components under test that use them can be tested easily."
  },
  "docs/providing-input/inject-services-into-components.html": {
    "href": "docs/providing-input/inject-services-into-components.html",
    "title": "Injecting Services into Components Under Test | bUnit",
    "keywords": "Injecting Services into Components Under Test It is common for components under test to have a dependency on services, injected into them through the @inject IMyService MyService syntax in .razor files, or the [Inject] private IMyService MyService { get; set; } syntax in .cs files. This is supported in bUnit through the Services collection available through the test contexts used in both C# and Razor based tests. The Services collection is just a IServiceCollection , which means services can be registered in the same manner as done in production code in Startup.cs in Blazor Server projects and in Program.cs in Blazor Wasm projects. In bUnit, you register the services in the Services collection before you render a component under test. The following sections demonstrate how to do this in C# and Razor based tests. The examples we will cover will test the <WeatherForecasts> component listed below, which depends on the IWeatherForecastService service, injected in line 1: @inject IWeatherForecastService ForecastService <h1>Weather forecast</h1> <p>This component demonstrates fetching data from a service.</p> @if (Forecasts is null) { <p><em>Loading...</em></p> } else { <WeatherForecastTabel Forecasts=@Forecasts /> } @code { public WeatherForecast[] Forecasts { get; private set; } protected override async Task OnInitializedAsync() { Forecasts = await ForecastService.GetForecastAsync(DateTime.Now); } } Injecting Services in C# Based Tests Here is a C# based test that registers the IWeatherForecastService in the Services collection, which is a requirement of the <WeatherForecasts> component listed above. using var ctx = new TestContext(); // Register services ctx.Services.AddSingleton<IWeatherForecastService>(new WeatherForecastService()); // RenderComponent will inject the service in the WeatherForecasts component // when it is instantiated and rendered. var cut = ctx.RenderComponent<WeatherForecasts>(); // Assert that service is injected Assert.NotNull(cut.Instance.Forecasts); The highlighted line shows how the IWeatherForecastService is registered in the test context's Services collection, which is just a standard IServiceCollection , using the standard .NET Core DI services method, AddSingleton . Note The AddSingleton() method is only available on the Services collection if you import the Microsoft.Extensions.DependencyInjection type. Injecting Services in Razor Based Tests Here is a Razor based test that registers the IWeatherForecastService in the Services collection during the Setup methods, which is a requirement of the <WeatherForecasts> component mentioned above: @inherits TestComponentBase <Fixture Setup=\"RegisterWeatherForecastServices\" Test=\"VerifyServiceInjectedCorrectly\"> <ComponentUnderTest> <WeatherForecasts /> </ComponentUnderTest> @code { void RegisterWeatherForecastServices(Fixture fixture) { fixture.Services.AddSingleton<IWeatherForecastService>(new WeatherForecastService()); } void VerifyServiceInjectedCorrectly(Fixture fixture) { // Act - get component under test var cut = fixture.GetComponentUnderTest<WeatherForecasts>(); // Assert Assert.NotNull(cut.Instance.Forecasts); } } </Fixture> The highlighted line shows how the IWeatherForecastService is registered using the standard .NET Core DI services method, AddSingleton . This can either be done via the Fixture 's Setup method as in this example, if you want to separate the service registration from the test method, or it can be done in the test method before calling GetComponentUnderTest() . The following example shows how to do this with <SnapshotTest> tests: @inherits TestComponentBase @code { void RegisterWeatherForecastServices(SnapshotTest test) { test.Services.AddSingleton<IWeatherForecastService>(new WeatherForecastService()); } } <SnapshotTest Setup=\"RegisterWeatherForecastServices\"> <TestInput> <WeatherForecasts /> </TestInput> <ExpectedOutput>...</ExpectedOutput> </Fixture> Tip If multiple Razor tests share the same setup logic, they can share the same dedicated setup method as well. Note The AddSingleton() method is only available on the Services collection if you import the Microsoft.Extensions.DependencyInjection type. Further Reading A closely related topic is mocking. To learn more about mocking in bUnit, go to the Mocking and Faking Component Dependencies page."
  },
  "docs/providing-input/passing-parameters-to-components.html": {
    "href": "docs/providing-input/passing-parameters-to-components.html",
    "title": "Passing Parameters to Components | bUnit",
    "keywords": "Passing Parameters to Components bUnit comes with a number of ways to pass parameters to components under test: In Razor-based tests - those written in .razor files - passing parameters is exactly the same as in your normal Blazor pages and components. Just declare the component and assign values to its parameters. For C#-based test code, bUnit provides a few ways to make it easy to pass parameters: Loosely typed factory methods and simple tuple-based syntax, i.e. (name, value) Strongly typed builder (preferred in most cases) There are two methods in bUnit that allows passing parameters in C#-based test code: RenderComponent method on the test context, that is used to render a component initially. SetParametersAndRender method on a rendered component, that is used to pass new parameters to an already rendered component. In the following sub sections, we will show both C# and Razor-based test code, just click between them using the tabs. Tip In all examples below, the ComponentParameterFactory is imported into the test class using using static Bunit.ComponentParameterFactory; . This results in a lot less boilerplate code, which improves test readability. With using static import, we can use the factory methods like this: using static Bunit.ComponentParameterFactory; ... var componentParameter = Parameter(\"paramName\", someValue); With a regular using import, we have to prefix the static factory methods like this: using Bunit.ComponentParameterFactory; ... var componentParameter = ComponentParameterFactory.Parameter(\"paramName\", someValue); Note The examples below are written using xUnit, but the code is the same with NUnit and MSTest. Regular Parameters A regular parameter is one that is declared using the [Parameter] attribute. The following subsections will cover both non Blazor types parameters, e.g. int and List<string> , and the special Blazor types like EventCallback and RenderFragment . Non-Blazor Type Parameters Let us look at an example of passing parameter that takes types which or not special to Blazor, i.e.: public class NonBlazorTypesParams : ComponentBase { [Parameter] public int Numbers { get; set; } [Parameter] public List<string> Lines { get; set; } } Using either C# or Razor test code, this can be done like this: C# test code Razor test code using var ctx = new TestContext(); // Using C# tuple with hardcoded name var cut1 = ctx.RenderComponent<NonBlazorTypesParams>( (\"Numbers\", 42), (\"Lines\", new List<string> { \"Hello\", \"World\" }) ); // Using C# tuple with refactor safe name var cut2 = ctx.RenderComponent<NonBlazorTypesParams>( (nameof(NonBlazorTypesParams.Numbers), 42), (nameof(NonBlazorTypesParams.Lines), new List<string> { \"Hello\", \"World\" }) ); // Using factory method var cut3 = ctx.RenderComponent<NonBlazorTypesParams>( Parameter(\"Numbers\", 42), Parameter(\"Lines\", new List<string> { \"Hello\", \"World\" }) ); // Using parameter builder var cut4 = ctx.RenderComponent<NonBlazorTypesParams>(parameters => parameters .Add(p => p.Numbers, 42) .Add(p => p.Lines, new List<string> { \"Hello\", \"World\" }) ); All of these examples do the same thing, here is what is going on: The first example passes parameters using C# tuples, (string name, object? value) . The second example also uses C# tuples to pass the parameters, but the name is retrieved in a refactor safe manner using the nameof keyword in C#. The third example uses the Parameter(String, Object) factory method. The last example uses the ComponentParameterCollectionBuilder<TComponent> 's Add method, which takes a parameter selector expression that selects the parameter using a lambda, and forces you to provide the correct type for the value. This makes the builders methods strongly typed and refactor safe. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <NonBlazorTypesParams Numbers=\"42\" Lines=@(new List<string> { \"Hello\", \"World\" }) /> </ComponentUnderTest> </Fixture> This is just regular Blazor parameter passing, which is the same for both Fixture and SnapshotTest razor tests. EventCallback Parameters This example will pass parameters to the following two EventCallback parameters: public class EventCallbackParams : ComponentBase { [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; } [Parameter] public EventCallback OnSomething { get; set; } } Using either C# or Razor test code, this can be done like this: C# test code Razor test code using var ctx = new TestContext(); // Using factory method with hardcoded name var cut1 = ctx.RenderComponent<EventCallbackParams>( EventCallback(\"OnClick\", (MouseEventArgs args) => { /* handle callback */ }), EventCallback(\"OnSomething\", () => { /* handle callback */ }) ); // Using factory method refactor safe name var cut2 = ctx.RenderComponent<EventCallbackParams>( EventCallback(nameof(EventCallbackParams.OnClick), (MouseEventArgs args) => { /* handle callback */ }), EventCallback(nameof(EventCallbackParams.OnSomething), () => { /* handle callback */ }) ); // Using parameter builder var cut3 = ctx.RenderComponent<EventCallbackParams>(parameters => parameters .Add(p => p.OnClick, args => { /* handle callback */ }) .Add(p => p.OnSomething, () => { /* handle callback */ }) ); These examples do the same thing. Here is what is going on: The first and second example uses the EventCallback factory method in ComponentParameterFactory (there are many overloads that take different kinds of Action and Func delegates), to pass a lambda as the event callback to the specified parameter. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's Add method, which takes a parameter selector expression that selects the parameter using a lambda, and forces you to provide the correct type of callback method. This makes the builders methods strongly typed and refactor safe. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <EventCallbackParams OnClick=@(args => { /* handle callback */ }) OnSomething=@(() => { /* handle callback */ }) /> </ComponentUnderTest> </Fixture> This is just regular Blazor parameter passing, which is the same for both Fixture and SnapshotTest razor tests. ChildContent Parameters The ChildContent parameter in Blazor is represented by a RenderFragment . In Blazor, this can be regular HTML markup, it can be Razor markup, e.g. other component declarations, or a mix of the two. If it is another component, then that component can also receive child content, and so forth. The following subsections has different examples of child content being passed to the following component: public class ChildContentParams : ComponentBase { [Parameter] public RenderFragment ChildContent { get; set; } } Passing HTML to the ChildContent Parameter C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent(\"<h1>Hello World</h1>\") ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent(\"<h1>Hello World</h1>\") ); These examples do the same thing, here is what is going on: The first example uses the ChildContent factory method in ComponentParameterFactory , to pass a HTML markup string as the input to the ChildContent parameter. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's AddChildContent method to pass a HTML markup string as the input to the ChildContent parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <h1>Hello World</h1> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, e.g. as child content to the component under test, which is the same for both Fixture and SnapshotTest razor tests. Passing a Component without Parameters to the ChildContent Parameter To pass a component, e.g. the classic <Counter> component, that does not take any parameters itself, to a ChildContent parameter, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent<Counter>() ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent<Counter>() ); These examples do the same thing, here is what is going on: The first example uses the ChildContent<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the component under test's ChildContent parameter. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's AddChildContent<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the component under test's ChildContent parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <Counter /> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where the <Counter /> component is declared inside the component under test. This is the same for both Fixture and SnapshotTest razor tests. Passing a Component with Parameters to the ChildContent Parameter To pass a component with parameters to a component under test, e.g. the <Alert> component with the following parameters, do the following: [Parameter] public string Heading { get; set; } [Parameter] public AlertType Type { get; set; } [Parameter] public RenderFragment ChildContent { get; set; } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent<Alert>( (\"Heading\", \"Alert heading\"), (\"Type\", AlertType.Warning), ChildContent(\"<p>Hello World</p>\") ) ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent<Alert>(alertParameters => alertParameters .Add(p => p.Heading, \"Alert heading\") .Add(p => p.Type, AlertType.Warning) .AddChildContent(\"<p>Hello World</p>\") ) ); These examples do the same thing, here is what is going on: The first example uses the ChildContent<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the component under test. ChildContent<TChildComponent> factory method can take zero or more component parameters as input itself, which will be passed to the TChildComponent component, in this case, the <Alert> component. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's AddChildContent<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the component under test. The AddChildContent<TChildComponent> method takes an optional ComponentParameterCollectionBuilder<TComponent> as input, which can be used to pass parameters to the TChildComponent component, in this case, the <Alert> component. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where the <Alert> component is declared inside the component under test, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. Passing a mix of Razor and HTML to a ChildContent Parameter Some times you need to pass multiple different types of content to a ChildContent parameter, e.g. both some Markup and and a component. This can be done in the following way: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<ChildContentParams>( ChildContent(\"<h1>Below you will find a most interesting alert!</h1>\"), ChildContent<Alert>( (\"Heading\", \"Alert heading\"), (\"Type\", AlertType.Warning), ChildContent(\"<p>Hello World</p>\") ) ); // Using parameter builder var cut2 = ctx.RenderComponent<ChildContentParams>(parameters => parameters .AddChildContent(\"<h1>Below you will find a most interesting alert!</h1>\") .AddChildContent<Alert>(childParams => childParams .Add(p => p.Heading, \"Alert heading\") .Add(p => p.Type, AlertType.Warning) .AddChildContent(\"<p>Hello World</p>\") ) ); Passing a mix of markup and components to a ChildContent parameter is simply done by calling the ComponentParameterCollectionBuilder<TComponent> 's AddChildContent() methods or using the ChildContent() factory methods in ComponentParameterFactory , as seen here. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <ChildContentParams> <h1>Below you will find a most interesting alert!</h1> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </ChildContentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where regular HTML markup and an <Alert> component is declared inside the component under test, and any parameters are passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. RenderFragment Parameters A RenderFragment parameter is very similar to the special ChildContent parameter described in the previous section, since a ChildContent parameter is of type RenderFragment . The only difference is the name, which must be anything other than ChildContent . In Blazor, a RenderFragment parameter can be regular HTML markup, it can be Razor markup, e.g. other component declarations, or it can be a mix of the two. If it is another component, then that component can also receive child content, and so forth. The following subsections has different examples of content being passed to the following component's RenderFragment parameter: public class RenderFragmentParams : ComponentBase { [Parameter] public RenderFragment Content { get; set; } } Passing HTML to a RenderFragment Parameter C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment(\"Content\", \"<h1>Hello World</h1>\") ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add(p => p.Content, \"<h1>Hello World</h1>\") ); These examples do the same thing. Here is what is going on: The first example uses the RenderFragment factory method in ComponentParameterFactory , to pass a HTML markup string as the input to the RenderFragment parameter. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's Add method to pass a HTML markup string as the input to the RenderFragment parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <h1>Hello World</h1> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment parameter passing as markup, for example, in the component under test's <Content> element. This is the same for both Fixture and SnapshotTest razor tests. Passing a Component without Parameters to a RenderFragment Parameter To pass a component such as the classic <Counter> component, which does not take any parameters, to a RenderFragment parameter, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment<Counter>(\"Content\") ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add<Counter>(p => p.Content) ); These examples do the same thing. Here is what is going on: The first example uses the RenderFragment<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's Add<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <Counter /> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor child content parameter passing, where the <Counter /> component is declared inside component under test's <Content> element. This is the same for both Fixture and SnapshotTest razor tests. Passing a Component with Parameters to a RenderFragment Parameter To pass a component with parameters to a RenderFragment parameter, e.g. the <Alert> component with the following parameters, do the following: [Parameter] public string Heading { get; set; } [Parameter] public AlertType Type { get; set; } [Parameter] public RenderFragment ChildContent { get; set; } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment<Alert>(\"Content\", (\"Heading\", \"Alert heading\"), (\"Type\", AlertType.Warning), ChildContent(\"<p>Hello World</p>\") ) ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add<Alert>(p => p.Content, alertParameters => alertParameters .Add(p => p.Heading, \"Alert heading\") .Add(p => p.Type, AlertType.Warning) .AddChildContent(\"<p>Hello World</p>\") ) ); These examples do the same thing. Here is what is going on: The first example uses the RenderFragment<TChildComponent> factory method in ComponentParameterFactory , where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. RenderFragment<TChildComponent> factory method takes the name of the parameter and zero or more component parameters as input, which will be passed to the TChildComponent component, in this case, the <Alert> component. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's Add<TChildComponent> method, where TChildComponent is the (child) component that should be passed to the RenderFragment parameter. The Add<TChildComponent> method takes an optional ComponentParameterCollectionBuilder<TComponent> as input, which can be used to pass parameters to the TChildComponent component, in this case, the <Alert> component. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment parameter passing, where the <Alert> component is declared inside the component under test's <Content> element, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. Passing a mix of Razor and HTML to a RenderFragment Parameter Some times you need to pass multiple different types of content to a RenderFragment parameter, e.g. both some Markup and and a component. This can be done in the following way: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<RenderFragmentParams>( RenderFragment(\"Content\", \"<h1>Below you will find a most interesting alert!</h1>\"), RenderFragment<Alert>(\"Content\", (\"Heading\", \"Alert heading\"), (\"Type\", AlertType.Warning), ChildContent(\"<p>Hello World</p>\") ) ); // Using parameter builder var cut2 = ctx.RenderComponent<RenderFragmentParams>(parameters => parameters .Add(p => p.Content, \"<h1>Below you will find a most interesting alert!</h1>\") .Add<Alert>(p => p.Content, childParams => childParams .Add(p => p.Heading, \"Alert heading\") .Add(p => p.Type, AlertType.Warning) .AddChildContent(\"<p>Hello World</p>\") ) ); Passing a mix of markup and components to a RenderFragment parameter is simply done by calling the ComponentParameterCollectionBuilder<TComponent> 's Add() methods or using the ChildContent() factory methods in ComponentParameterFactory , as seen here. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <RenderFragmentParams> <Content> <h1>Below you will find a most interesting alert!</h1> <Alert Heading=\"Alert heading\" Type=\"AlertType.Warning\"> <p>Hello World</p> </Alert> </Content> </RenderFragmentParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment parameter passing, where regular HTML markup and an <Alert> component is declared inside the component under test's <Content> element, and any parameters is passed to it like normal in Blazor. This is the same for both Fixture and SnapshotTest razor tests. Templates Parameters Template parameters are closely related to RenderFragment parameters described in the previous section. The difference is that a template parameter is of type RenderFragment<TValue> . Like with regular RenderFragment , a RenderFragment<TValue> template parameter can be regular HTML markup, it can be Razor markup, e.g. other component declarations, or it can be a mix of the two. If it is another component, then that component can also receive child content, and so forth. The following examples renders this template component, which has a RenderFragment<TValue> template parameter: @typeparam TItem <div id=\"generic-list\"> @foreach (var item in Items) { @Template(item) } </div> @code { [Parameter] public IEnumerable<TItem> Items { get; set; } [Parameter] public RenderFragment<TItem> Template { get; set; } } Passing HTML based templates To pass a template into a RenderFragment<TValue> parameter that just consists of regular HTML markup, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<TemplateParams<string>>( (\"Items\", new string[] { \"Foo\", \"Bar\", \"Baz\" }), Template<string>(\"Template\", item => $\"<span>{item}</span>\") ); // Using parameter builder var cut2 = ctx.RenderComponent<TemplateParams<string>>(parameters => parameters .Add(p => p.Items, new[] { \"Foo\", \"Bar\", \"Baz\" }) .Add(p => p.Template, item => $\"<span>{item}</span>\") ); These examples do the same thing, i.e. pass a HTML markup template into the component under test. This is done with the help of a Func<TValue, string> delegate which takes whatever the template value is as input, and returns a (markup) string. The delegate is automatically turned into a RenderFragment<TValue> type and passed to the template parameter. The first example passes data to the Items parameter, and then it uses the Template<TValue> factory method in ComponentParameterFactory , that takes the name of the RenderFragment<TValue> template parameter, and the Func<TValue, string> delegate as input. The second example uses the ComponentParameterCollectionBuilder<TComponent> 's Add method to first add the data to Items parameter and then a Func<TValue, string> delegate. The delegate creates a simple markup string in both examples. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <TemplateParams Items=@(new string[]{ \"Foo\", \"Bar\", \"Baz\" }) TItem=\"string\"> <Template> <span>@context</span> </Template> </TemplateParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment<TValue> parameter passing, in this case, to the Template parameter. This is the same for both Fixture and SnapshotTest razor tests. Passing a Component-based template To pass a template into a RenderFragment<TValue> parameter, which is based on a component that receives the template value as input, in this case, the <Item> component listed below, do the following: <span>@Value</span> @code { [Parameter] public string Value { get; set; } } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<TemplateParams<string>>( (\"Items\", new string[] { \"Foo\", \"Bar\", \"Baz\" }), Template<Item, string>(\"Template\", value => new ComponentParameter[] { (\"Value\", value) }) ); // Using parameter builder var cut2 = ctx.RenderComponent<TemplateParams<string>>(parameters => parameters .Add(p => p.Items, new[] { \"Foo\", \"Bar\", \"Baz\" }) .Add<Item, string>(p => p.Template, value => itemParams => itemParams .Add(p => p.Value, value) ) ); These examples do the same thing, i.e. create a template with the <Item> component listed above. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <TemplateParams Items=@(new string[]{ \"Foo\", \"Bar\", \"Baz\" }) TItem=\"string\"> <Template> <Item Value=@context></Item> </Template> </TemplateParams> </ComponentUnderTest> </Fixture> This is just regular Blazor RenderFragment<TValue> parameter passing, in this case, to the Template parameter. This is the same for both Fixture and SnapshotTest razor tests. Unmatched Parameters An unmatched parameter is a parameter passed to a component under test, which does not have an explicit [Parameter] parameter, but instead is captured by a [Parameter(CaptureUnmatchedValues = true)] parameter. In the follow examples, we will pass an unmatched parameter to the following component: public class UnmatchedParams : ComponentBase { [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } } C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<UnmatchedParams>( (\"some-unknown-param\", \"a value\") ); // Using parameter builder var cut2 = ctx.RenderComponent<UnmatchedParams>(parameters => parameters .AddUnmatched(\"some-unknown-param\", \"a value\") ); These examples do the same thing, i.e. pass in the parameter some-unknown-param with the value a value to the component under test. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <UnmatchedParams some-unknown-param=\"a value\" /> </ComponentUnderTest> </Fixture> This is just regular Blazor parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, the parameter some-unknown-param with the value a value is passed to the component under test. Cascading Parameters and Cascading Values Cascading parameters are properties with the [CascadingParameter] attribute. There are two variants: named and unnamed cascading parameters. In Blazor, the <CascadingValue> component is used to provide values to cascading parameters, which we also do in Razor based tests. However, in C# based tests, we need to do it a little differently. The following examples will pass cascading values to the <CascadingParams> component listed below: @code { [CascadingParameter] public bool IsDarkTheme { get; set; } [CascadingParameter(Name = \"LoggedInUser\")] public string UserName { get; set; } [CascadingParameter(Name = \"LoggedInEmail\")] public string Email { get; set; } } Passing Unnamed Cascading Values To pass the unnamed IsDarkTheme cascading parameter to the <CascadingParams> component, do the following: C# test code Razor test code using var ctx = new TestContext(); var isDarkTheme = true; // Using factory method var cut1 = ctx.RenderComponent<CascadingParams>( CascadingValue(isDarkTheme) ); // Using parameter builder var cut2 = ctx.RenderComponent<CascadingParams>(parameters => parameters .AddCascadingValue(isDarkTheme) ); // Using parameter builder and selecting unnamed cascading parameter var cut3 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(p => p.IsDarkTheme, isDarkTheme) ); These examples do the same thing, i.e. passing the variable isDarkTheme to the cascading parameter IsDarkTheme . The first example uses the CascadingValue factory method in ComponentParameterFactory to pass the unnamed parameter value. The second example uses the Add method on the ComponentParameterCollectionBuilder<TComponent> to pass the unnamed parameter value. The last example uses the Add method on the ComponentParameterCollectionBuilder<TComponent> with the parameter selector to explicitly select the desired cascading parameter and pass the unnamed parameter value that way. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <CascadingValue Value=\"true\"> @* isDarkMode *@ <CascadingParams /> </CascadingValue> </ComponentUnderTest> </Fixture> This is just regular Blazor cascading value parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, the <CascadingValue> component is used to pass the unnamed parameter value. Passing Named Cascading Values To pass a named cascading parameter to the <CascadingParams> component, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using factory method var cut1 = ctx.RenderComponent<CascadingParams>( CascadingValue(\"LoggedInUser\", \"Egil Hansen\") ); // Using parameter builder var cut2 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(p => p.UserName, \"Egil Hansen\") ); These examples do the same thing, i.e. pass in value Egil Hansen to the cascading parameter with the name LoggedInUser . Note that the name of the parameter is not the same as the property of the parameter, e.g. LoggedInUser vs. UserName . The first example uses the CascadingValue factory method in ComponentParameterFactory to pass the named parameter value, specifying the cascading parameters name and a value (not the property name). The second example uses the Add method on the ComponentParameterCollectionBuilder<TComponent> with the parameter selector to select the cascading parameter property and pass the parameter value that way. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <CascadingValue Name=\"LoggedInUser\" Value=@(\"Egil Hansen\")> <CascadingParams /> </CascadingValue> </ComponentUnderTest> </Fixture> This is just regular Blazor cascading value parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, the <CascadingValue> component is used to pass a named parameter value, since both the Name and Value parameters are specified. Passing Multiple, Named and Unnamed, Cascading Values To pass all cascading parameters to the <CascadingParams> component, do the following: C# test code Razor test code using var ctx = new TestContext(); var isDarkTheme = true; // Using factory method var cut1 = ctx.RenderComponent<CascadingParams>( CascadingValue(isDarkTheme), CascadingValue(\"LoggedInUser\", \"Egil Hansen\"), CascadingValue(\"LoggedInEmail\", \"egil@example.com\") ); // Using parameter builder var cut2 = ctx.RenderComponent<CascadingParams>(parameters => parameters .AddCascadingValue(isDarkTheme) .Add(p => p.UserName, \"Egil Hansen\") .Add(p => p.Email, \"egil@example.com\") ); // Using parameter builder and selecting unnamed cascading parameter var cut3 = ctx.RenderComponent<CascadingParams>(parameters => parameters .Add(p => p.IsDarkTheme, isDarkTheme) .Add(p => p.UserName, \"Egil Hansen\") .Add(p => p.Email, \"egil@example.com\") ); These examples do the same thing, i.e. passing both the unnamed IsDarkTheme cascading parameter and the two named cascading parameters ( LoggedInUser , LoggedInEmail ). The first example uses the CascadingValue factory method in ComponentParameterFactory to pass the unnamed and named parameter values. The second example uses the Add method on the ComponentParameterCollectionBuilder<TComponent> without a parameter to pass the unnamed parameter value, and Add method with the parameter selector to select each of the named parameters to pass the named parameter values. The last example uses the Add method on the ComponentParameterCollectionBuilder<TComponent> with the parameter selector to select both the named and unnamed cascading parameters and pass values to them that way. <Fixture Test=\"f => {}\"> <ComponentUnderTest> <CascadingValue Value=\"true\"> @* isDarkMode *@ <CascadingValue Name=\"LoggedInUser\" Value=@(\"Egil Hansen\")> <CascadingValue Name=\"LoggedInEmail\" Value=@(\"egil@example.com\")> <CascadingParams /> </CascadingValue> </CascadingValue> </CascadingValue> </ComponentUnderTest> </Fixture> This is just regular Blazor cascading value parameter passing, which is the same for both Fixture and SnapshotTest razor tests. In this case, multiple <CascadingValue> components are used to pass the unnamed and named cascading parameter values to the component. Rendering a Component Under Test Inside Other Components It is possible to nest a component under tests inside other components, if that is required to test it. For example, to nest the <HelloWorld> component inside the <Wrapper> component, do the following: C# test code Razor test code using var ctx = new TestContext(); // Using C# factory methods var wrapper1 = ctx.RenderComponent<Wrapper>( ChildContent<HelloWorld>() ); var cut1 = wrapper1.FindComponent<HelloWorld>(); // Using parameter builder var wrapper2 = ctx.RenderComponent<Wrapper>(parameters => parameters .AddChildContent<HelloWorld>() ); var cut2 = wrapper2.FindComponent<HelloWorld>(); These examples do the same thing, i.e. rendering the <HelloWorld> component inside the <Wrapper> component. What is special in both cases is the use of the FindComponent<HelloWorld>() , which returns a IRenderedComponent<HelloWorld> , which gives access to only the <HelloWorld> components part of the render tree, and the <HelloWorld> components instance. <Fixture Test=\"HelloWorldTest\"> <ComponentUnderTest> <Wrapper> <HelloWorld /> </Wrapper> </ComponentUnderTest> @code { void HelloWorldTest(Fixture fixture) { var cut = fixture.GetComponentUnderTest<HelloWorld>(); } } </Fixture> This is just regular Blazor child content parameter passing, where one component is rendered inside another, i.e. the <HelloWorld> component inside the <Wrapper> component. The special thing in this case is that the GetComponentUnderTest<HelloWorld>() method specifies the <HelloWorld> component as its target instead of the outer <Wrapper> component. This returns a IRenderedComponent<HelloWorld> , which gives access to only the <HelloWorld> components part of the render tree, and the <HelloWorld> components instance. Further Reading Injecting Services into Components Under Test"
  },
  "docs/providing-input/root-render-tree.html": {
    "href": "docs/providing-input/root-render-tree.html",
    "title": "Controlling the Root Render Tree | bUnit",
    "keywords": "Controlling the Root Render Tree The root render tree, the render tree in which components under test are rendered, can be added to, before components are rendered with bUnit's test context. This is mostly useful when a component under test or a component it depends on, must be rendered inside another component, that provides a cascading value to it. For example, when using Blazor’s authentication, it is common to add the CascadingAuthenticationState component higher up the render tree, such that it can provide authentication state to those components below it that needs it. Adding this through the <xref:Bunit.TestContext.RenderTree> property on the TestContext type makes it possible to add it once in a shared setup method, and not having to do so in every test method during the call to RenderComponent() . This can also be useful when writing tests that use a 3rd party component library, that require a special root component to be added to the render tree, but which otherwise doesn’t change between tests. Adding a Component to the Root Render Tree The following example verifies that the PrintCascadingValue component correctly prints out the cascading value passed to it. This value is passed to it by adding the CascadingValue<string> component to the render tree and then rendering the PrintCascadingValue component. The PrintCascadingValue component looks like this: Cascading value: @Value @code { [CascadingParameter] public string Value { get; set; } } Here is the test that adds the CascadingValue<string> component to the render tree and then renders the PrintCascadingValue component. using var ctx = new TestContext(); // Add a cascading value to the test contexts root render tree. ctx.RenderTree.Add<CascadingValue<string>>(parameters => parameters .Add(p => p.Value, \"FOO\") ); // The component will be rendered as a chld of last // component added to the RenderTree property. var cut = ctx.RenderComponent<PrintCascadingValue>(); // Verify that the cascading value was passed correctly. cut.MarkupMatches($\"Cascading value: FOO\"); Note The call to Add can be done in a common setup method, outside the context of the test method listed here, for easy reuse between tests. Add Only if Not Already in Root Render Tree Sometimes common test setup logic exists outside the test class, perhaps abstracted away in other libraries. In those cases, the TryAdd can be used add the component to the render tree, only if it has not already been added. TryAdd returns true if the component was added, false otherwise. ctx.RenderTree.TryAdd<CascadingValue<string>>(parameters => parameters .Add(p => p.Value, \"BAR?\") ); In the listing above, the cascading value BAR? is only added if there is not another CascadingValue<string> component added to the render tree already."
  },
  "docs/test-doubles/emulating-ijsruntime.html": {
    "href": "docs/test-doubles/emulating-ijsruntime.html",
    "title": "Emulating Blazor's IJSRuntime | bUnit",
    "keywords": "Emulating Blazor's IJSRuntime It is common for Blazor components to use IJSRuntime to call JavaScript, and since bUnit does not run JavaScript, emulating IJSRuntime is needed for components that uses it. In that regard, IJSRuntime is no different than other services that a component might depend on. bUnit comes with it's own JSInterop, a tailor built implementation of IJSRuntime that is active by default , allowing you to specify how JavaScript interop calls should be handled, what values they calls should return, and also allowing you to verify that they the calls have happened. The implementation is running in \"strict mode\", which means means it will throw an exception if it receives an invocation it has not been configured to handle. See more about strict vs loose mode in the following section. If you prefer to use the same mocking framework for all mocking in your tests to keep things consistent, general purpose mocking frameworks like Moq , JustMock Lite , or NSubstitute all works nicely with bUnit and can be used to mock IJSRuntime . In general, registering an implementation of IJSRuntime with bUnit's Services collection replaces bUnit's implementation. The following sections shows how to use the built-in implementation of IJSRuntime . Note In the beta versions of bUnit, you had to explicitly add the mock JSRuntime by calling Services.AddMockJSRuntime() . That is no longer needed, and doesn't work any more. Strict vs loose mode bUnit's JSInterop can run in two modes, strict or loose : Loose mode configures the implementation to just return the default value when it receives an invocation that has not been explicitly set up, e.g. if a component calls InvokeAsync<int>(...) the mock will simply return default(int) back to it immediately. Strict mode configures the implementation to throw an exception if it is invoked with a method call it has not been set up to handle explicitly. This is useful if you want to ensure that a component only performs a specific set of IJSRuntime invocations. By default, the bUnit's JSInterop runs in Strict mode. To change the mode, do the following: using var ctx = new TestContext(); ctx.JSInterop.Mode = JSRuntimeMockMode.Loose; Setting up invocations Use the Setup<TResult>(...) and SetupVoid(...) methods to configure the implementation to handle calls from the matching InvokeAsync<TResult>(...) and InvokeVoidAsync(...) methods on IJSRuntime . Use the parameterless Setup<TResult>() method to emulate any call to InvokeAsync<TResult>(...) with a given return type TResult and use the parameterless SetupVoid() to emulate any call to InvokeVoidAsync(...) . When an invocation is set up through of the Setup<TResult>(...) and SetupVoid(...) methods, a JSRuntimePlannedInvocation<TResult> object is returned. This can be used to set a result or an exception, to emulate what can happen during a JavaScript interop call in Blazor. Similarly when the parameterless Setup<TResult>() and SetupVoid() methods are used a JSRuntimeCatchAllPlannedInvocation<TResult> object is returned which can be used to set the result of invocation. Here are two examples: using var ctx = new TestContext(); // Set up an invocation and specify the result value immediately ctx.JSInterop.Setup<string>(\"getPageTitle\").SetResult(\"bUnit is awesome\"); // Set up an invocation without specifying the result var plannedInvocation = ctx.JSInterop.SetupVoid(\"startAnimation\"); // ... other test code // Later in the test, mark the invocation as completed. // SetResult() is not used in this case since InvokeVoidAsync // only completes or throws, it doesn’t return a value. // Any calls to InvokeVoidAsync(...) up till this point will // have received an incompleted Task which the component // is likely waiting until the call to SetCompleted() below. plannedInvocation.SetCompleted(); Verifying invocations All calls to the InvokeAsync<TResult>(...) and InvokeVoidAsync(...) methods in bUnit's JSInterop are stored in its Invocations list, which can be inspected and asserted against. In addition to this, all planned invocations have their own Invocations list which only contain their invocations. Invocations are represented by the JSRuntimeInvocation type which has three properties of interest when verifying an invocation happened as expected: Identifier - the name of the function name/identifier passed to the invoke method. Arguments - a list of arguments passed to the invoke method. CancellationToken - the cancellation token passed to the invoke method (if any). To verify these, just use the assertion methods you normally use. Support for IJSInProcessRuntime and IJSUnmarshalledRuntime bUnit's IJSRuntime supports being cast to the IJSInProcessRuntime and IJSUnmarshalledRuntime types, just like Blazors IJSRuntime . To set up a handler for a Invoke and InvokeUnmarshalled call, just use the regular Setup and SetupVoid methods on bUnit's JSInterop. Support for importing JavaScript Modules Since the .NET 5 release of Blazor, it has been possible to import JavaScript modules directly from components. This is supported by bUnit's JSInterop through the SetupModule methods, that setup calls to InvokeAsync<IJSObjectReference> . The SetupModule methods return a module JSInterop, that can be configured to handle the any JavaScript calls using the Setup and SetupVoid methods. For example, to configure bUnit's JSInterop to handle an import of the JavaScript module hello.js , and a call to the function world() in that model, do the following: using var ctx = new TestContext(); var moduleInterop = ctx.JSInterop.SetupModule(\"hello.js\"); moduleInterop.SetupVoid(\"world\"); Module Interop Mode By default, a module Interop inherits the Mode setting from the root JSInterop in bUnit. However, you can override it explicitly and have it in a different mode from other module Interop or the root JSInterop. Just set the Mode property, e.g.: var moduleInterop = ctx.JSInterop.SetupModule(\"hello.js\"); moduleInterop.Mode = JSRuntimeMockMode.Loose; Support for IJSInProcessObjectReference and IJSUnmarshalledObjectReference bUnit's IJSObjectReference supports being cast to the IJSInProcessObjectReference and IJSUnmarshalledObjectReference types, just like Blazors IJSObjectReference . To set up a handler for a Invoke and InvokeUnmarshalled call, just use the regular Setup and SetupVoid methods on bUnit's JSInterop. First Party JSInterop Component Emulation Blazor comes out of the box with a few components that requires a working JSInterop. bUnit's JSInterop is setup to emulate the JavaScript interactions of those components. The following sections describes how the interaction is emulated for the supported components. JSInterop Emulation The <Virtualize> component require JavaScript to notify it about the available screen space it is being rendered to, and when the users scrolls the viewport, to trigger the loading of new data. bUnit emulates this interaction by telling the <Virtualize> component that the viewport is 1,000,000,000 pixels large. That should ensure that all items is loaded, which makes sense in a testing scenario. To test the <Placeholder> template of the <Virtualize> component, create a items provider that doesn't return all items when queried. FocusAsync JSInterop Emulation Support for the FocusAsync method on ElementReference in Blazor's .NET 5 release works by simply registering the invocations, which can then be verified to have happened. To verify that the FocusAsync has been called in the <ClickToFocus> component: <input @ref=\"exampleInput\" /> <button @onclick=\"ChangeFocus\">Focus the Input Element</button> @code { private ElementReference exampleInput; private async Task ChangeFocus() { await exampleInput.FocusAsync(); } } Do the following: using var ctx = new TestContext(); var cut = RenderComponent<ClickToFocus>(); var inputElement = cut.Find(\"input\"); cut.Find(\"button\").Click(); // Triggers onclick handler that sets focus of input element ctx.JSInterop.VerifyFocusAsyncInvoke() // Verifies that a FocusAsync call has happenend .Arguments[0] // gets the first argument passed to the FocusAsync method .ShouldBeElementReferenceTo(inputElement); // verify that it is an element reference to the input element. Support for IJSInProcessRuntime and IJSUnmarshalledRuntime bUnit's IJSRuntime supports being cast to the IJSInProcessRuntime and IJSUnmarshalledRuntime types, just like Blazors IJSRuntime . To set up a handler for a Invoke and InvokeUnmarshalled call, just use the regular Setup and SetupVoid methods on bUnit's JSInterop."
  },
  "docs/test-doubles/faking-auth.html": {
    "href": "docs/test-doubles/faking-auth.html",
    "title": "Faking Authentication and Authorization | bUnit",
    "keywords": "Faking Authentication and Authorization bUnit comes with test specific implementation of Blazor's authentication and authorization types which make it easy to test components that use Blazor's <AuthorizeView> , <CascadingAuthenticationState> and <AuthorizeRouteView> components, as well as the AuthenticationStateProvider type. The test implementation of Blazor's authentication and authorization can be put into the following states: Authenticating Unauthenticated and unauthorized Authenticated and unauthorized Authenticated and authorized Authenticated and authorized with one or more roles , claims , and/or policies bUnit's authentication and authorization implementation is easily available by calling AddTestAuthorization() on a test context. This adds the necessary services to the Services collection and the CascadingAuthenticationState component to the root render tree . The method returns an instance of the TestAuthorizationContext type that allows you to control the authentication and authorization state for a test. Note If your inherits directly from bUnit's TestContext as described in Writing Tests in C# for Blazor Components , then you need to call the AddTestAuthorization() method like so: this.AddTestAuthorization() . The following sections will show how to set each of these states in a test. Setting Authenticating, Authenticated and Authorized States The examples in the following sections will use the <UserInfo> component listed below. This uses an injected AuthenticationStateProvider , the <CascadingAuthenticationState> , and <AuthorizeView> components to show the user name when a user is authenticated. It also shows the authorization state when the authenticated user is authorized. @using Microsoft.AspNetCore.Components.Authorization @inject AuthenticationStateProvider AuthenticationStateProvider @if (isAuthenticated) { <h1>Welcome @userName</h1> } @if (!isAuthenticated) { <h1>Please log in!</h1> } <AuthorizeView> <Authorized> <p>State: Authorized</p> </Authorized> <Authorizing> <p>State: Authorizing</p> </Authorizing> <NotAuthorized> <p>State: Not authorized</p> </NotAuthorized> </AuthorizeView> @code { bool isAuthenticated = false; string userName; protected override async Task OnParametersSetAsync() { var state = await AuthenticationStateProvider.GetAuthenticationStateAsync(); isAuthenticated = state.User.Identity.IsAuthenticated; userName = state.User.Identity.Name; } } The following subsections will demonstrate how to set the <UserInfo> into all three authentication and authorization states. Unauthenticated and Unauthorized State To set the state to unauthenticated and unauthorized, do the following: // Arrange using var ctx = new TestContext(); ctx.AddTestAuthorization(); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Please log in!</h1> <p>State: Not authorized</p>\"); The highlighted line shows how AddTestAuthorization() is used to add the test specific implementation of Blazor's authentication and authorization types to the Services collection, which makes the authentication state available to other services as well as components used throughout the test that require it. After calling AddTestAuthorization() , the default authentication state is unauthenticated and unauthorized. Authenticating and Authorizing State To set the state to authenticating and authorizing, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorizing(); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Please log in!</h1> <p>State: Authorizing</p>\"); After calling AddTestAuthorization() , the returned TestAuthorizationContext is used to set the authenticating and authorizing state through the SetAuthorizing() method. Authenticated and Unauthorized State To set the state to authenticated and unauthorized, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\", AuthorizationState.Unauthorized); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Welcome TEST USER</h1> <p>State: Not authorized</p>\"); After calling AddTestAuthorization() , the returned TestAuthorizationContext is used to set the authenticated and unauthorized state through the SetAuthorized(String, AuthorizationState) method. Authenticated and Authorized state To set the state to authenticated and authorized, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); // Act var cut = ctx.RenderComponent<UserInfo>(); // Assert cut.MarkupMatches(@\"<h1>Welcome TEST USER</h1> <p>State: Authorized</p>\"); After calling AddTestAuthorization() , the returned TestAuthorizationContext is used to set the authenticated and authorized state through the SetAuthorized(String, AuthorizationState) method. Note, the second parameter, AuthorizationState , is optional, and defaults to AuthorizationState.Authorized , if not specified. Setting Authorization Details The following section will show how to specify roles and/or policies in a test. The examples will use the <UserRights> component listed below. It uses the <AuthorizeView> components to include different content based on the roles , claims , or policies specified in each test. @using Microsoft.AspNetCore.Components.Authorization @using System.Security.Claims @using System.Globalization <AuthorizeView> <h1>Hi @context.User.Identity.Name, you have these claims and rights:</h1> </AuthorizeView> <ul> <AuthorizeView> @foreach (var claim in @context.User.FindAll(x => x.Type != ClaimTypes.Name && x.Type != ClaimTypes.Role)) { <li>@GetClaimName(claim): @claim.Value</li> } </AuthorizeView> <AuthorizeView Roles=\"superuser\"> <li>You have the role SUPER USER</li> </AuthorizeView> <AuthorizeView Roles=\"admin\"> <li>You have the role ADMIN</li> </AuthorizeView> <AuthorizeView Policy=\"content-editor\"> <li>You are a CONTENT EDITOR</li> </AuthorizeView> </ul> @code { private static string GetClaimName(Claim claim) { var claimType = new Uri(claim.Type); var name = claimType.Segments.Last(); return CultureInfo.InvariantCulture.TextInfo.ToTitleCase(name); } } Roles To specify one or more roles for the authenticated and authorized user, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetRoles(\"superuser\"); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>You have the role SUPER USER</li> </ul>\"); The highlighted line shows how the SetRoles(String[]) method is used to specify one role. To specify multiple roles, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetRoles(\"admin\", \"superuser\"); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>You have the role SUPER USER</li> <li>You have the role ADMIN</li> </ul>\"); Policies To specify one or more policies for the authenticated and authorized user, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetPolicies(\"content-editor\"); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>You are a CONTENT EDITOR</li> </ul>\"); The highlighted line shows how the SetPolicies(String[]) method is used to specify one policy. To specify multiple policies, do the following: authContext.SetPolicies(\"content-editor\", \"approver\"); Claims To specify one or more claims for the authenticated and authorized user, do the following: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetClaims( new Claim(ClaimTypes.Email, \"test@example.com\"), new Claim(ClaimTypes.DateOfBirth, \"01-01-1970\") ); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>Emailaddress: test@example.com</li> <li>Dateofbirth: 01-01-1970</li> </ul>\"); The highlighted line shows how the SetClaims(Claim[]) method is used to pass two instances of the Claim types. Example of passing both roles, claims, and policies Let’s try to combine all the possibilities shown in the previous examples into on. The following example specifies two roles, one claim, and one policy for the authenticated and authorized user: // Arrange using var ctx = new TestContext(); var authContext = ctx.AddTestAuthorization(); authContext.SetAuthorized(\"TEST USER\"); authContext.SetRoles(\"admin\", \"superuser\"); authContext.SetPolicies(\"content-editor\"); authContext.SetClaims(new Claim(ClaimTypes.Email, \"test@example.com\")); // Act var cut = ctx.RenderComponent<UserRights>(); // Assert cut.MarkupMatches(@\"<h1>Hi TEST USER, you have these claims and rights:</h1> <ul> <li>Emailaddress: test@example.com</li> <li>You have the role SUPER USER</li> <li>You have the role ADMIN</li> <li>You are a CONTENT EDITOR</li> </ul>\"); With this example done, all auth related test scenarios should be covered. If you find one that is missing, please let us know in the bUnit discussion forum ."
  },
  "docs/test-doubles/index.html": {
    "href": "docs/test-doubles/index.html",
    "title": "Mocking and Faking Component Dependencies | bUnit",
    "keywords": "Mocking or Faking Component Dependencies Mocking or faking a component under tests dependencies (services) can be the difference between being able to write a stable test that is easy to understand, and the opposite. bUnit does not have any particular preferences when it comes to mocking frameworks; all the usual suspects will work with bUnit. For example, Moq, JustMock and NSubstitute all work well with bUnit, so pick the one you are the most comfortable with and use it. bUnit does, however, come with a few specially crafted test doubles for some of Blazor’s built-in services. These are designed to make it easy write tests that of components that uses these services. More are planned for the future too. The built-in test doubles are described on the following pages: Faking Authentication and Authorization Emulating Blazor's IJSRuntime"
  },
  "docs/test-doubles/mocking-httpclient.html": {
    "href": "docs/test-doubles/mocking-httpclient.html",
    "title": "Mocking HttpClient | bUnit",
    "keywords": "Mocking HttpClient Mocking the HttpClient service in .NET Core is a bit more clumbersome than interface-based services like IJSRuntime . There is currently no built-in mock for HttpClient in bUnit, but with the use of RichardSzalay.MockHttp we can easily add one that works with bUnit. To use RichardSzalay.MockHttp, add the following package reference to your test project's .csproj file: <PackageReference Include=\"RichardSzalay.MockHttp\" Version=\"6.0.0\" /> To make it easier to work with RichardSzalay.MockHttp , add the following extension class to your test project. It makes it easier to add the HttpClient mock to bUnit's test context's Services collection, and configure responses to requests: using Bunit; using Microsoft.Extensions.DependencyInjection; using RichardSzalay.MockHttp; using System; using System.Net; using System.Net.Http; using System.Net.Http.Headers; using System.Text.Json; public static class MockHttpClientBunitHelpers { public static MockHttpMessageHandler AddMockHttpClient(this TestServiceProvider services) { var mockHttpHandler = new MockHttpMessageHandler(); var httpClient = mockHttpHandler.ToHttpClient(); httpClient.BaseAddress = new Uri(\"http://localhost\"); services.AddSingleton<HttpClient>(httpClient); return mockHttpHandler; } public static MockedRequest RespondJson<T>(this MockedRequest request, T content) { request.Respond(req => { var response = new HttpResponseMessage(HttpStatusCode.OK); response.Content = new StringContent(JsonSerializer.Serialize(content)); response.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\"); return response; }); return request; } public static MockedRequest RespondJson<T>(this MockedRequest request, Func<T> contentProvider) { request.Respond(req => { var response = new HttpResponseMessage(HttpStatusCode.OK); response.Content = new StringContent(JsonSerializer.Serialize(contentProvider())); response.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\"); return response; }); return request; } } With the helper methods in place, you can do the following in your tests: using var ctx = new TestContext(); var mock = ctx.Services.AddMockHttpClient(); mock.When(\"/getData\").RespondJson(new List<Data>{ ... }); This registers the mock HttpClient in bUnit's test context's Services collection, and then tells the mock that when a request is received for /getData , it should respond with the new List<Data>{ ... } , serialized as JSON. Tip You can add additional RespondXXX methods to the MockHttpClientBunitHelpers class to fit your testing needs."
  },
  "docs/test-doubles/mocking-localizer.html": {
    "href": "docs/test-doubles/mocking-localizer.html",
    "title": "Mocking Localization via IStringLocalizer | bUnit",
    "keywords": "Mocking Localization via IStringLocalizer"
  },
  "docs/test-doubles/mocking-navigation-manager.html": {
    "href": "docs/test-doubles/mocking-navigation-manager.html",
    "title": "Mocking Blazor's NavigationManager | bUnit",
    "keywords": "Mocking Blazor's NavigationManager"
  },
  "docs/verification/async-assertion.html": {
    "href": "docs/verification/async-assertion.html",
    "title": "Assertion of Asynchronous Changes | bUnit",
    "keywords": "Assertion of Asynchronous Changes A test can fail if a component performs asynchronous renders. This may be due to a reason such as waiting for an asynchronous operation to complete before continuing its render life-cycle . For example, if a component is waiting for an async web service to return data to it in the OnInitializedAsync() life-cycle method before rendering it to the render tree. You need to handle this specifically in your tests because tests execute in the test framework's synchronization context and the test renderer executes renders in its own synchronization context. If you do not, you will likely experience tests that sometimes pass, and sometimes fail. bUnit comes with two methods that help to deal with this issue: the WaitForAssertion() method covered on this page, and the WaitForState() method covered on the Awaiting an Asynchronous State Change in a Component Under Test page. Let's start by taking a look at the WaitForAssertion method in more detail. Waiting for Assertion to Pass Using WaitForAssertion The WaitForAssertion(Action, TimeSpan?) method can be used to block and wait in a test method until the provided assert action does not throw an exception, or until the timeout is reached (the default timeout is one second). Note The WaitForAssertion() method will try the assert action pass to it when the WaitForAssertion() method is called and every time the component under test renders. Let us look at an example. Consider the following <AsyncData> component, who awaits an async TextService in its OnInitializedAsync() life-cycle method. When the service returns the data, the component will automatically re-render to update its rendered markup. <p>@text</p> @code { string text = string.Empty; [Parameter] public Task<string> TextService { get; set; } protected override async Task OnInitializedAsync() { text = await TextService; } } To test the <AsyncData> component, do the following: // Arrange using var ctx = new TestContext(); var textService = new TaskCompletionSource<string>(); var cut = ctx.RenderComponent<AsyncData>(parameters => parameters .Add(p => p.TextService, textService.Task) ); // Act - set the awaited result from the text service textService.SetResult(\"Hello World\"); // Wait for assertion to pass cut.WaitForAssertion(() => cut.MarkupMatches(\"<p>Hello World</p>\")); This is what happens in the test: The test uses a TaskCompletionSource<string> to simulate an async web service. In the second highlighted line, the result is provided to the component through the textService . This causes the component to re-render. Finally, in the third highlighted line, the WaitForAssertion() method is used to block the test until the predicate assertion action runs without throwing an exception. Controlling Wait Timeout The timeout, which defaults to one second, can be controlled by passing a TimeSpan as the second argument to the WaitForAssertion() method, e.g.: cut.WaitForAssertion(() => cut.MarkupMatches(\"<p>Hello World</p>\"), TimeSpan.FromSeconds(2)); If the timeout is reached, a WaitForFailedException exception is thrown with the following error message: The assertion did not pass within the timeout period. Setting the timeout to something less than one second does not make tests run faster. The WaitForAssertion() method returns as soon as it observes the predicate assertion running without throwing. So, it is generally only useful to set a different timeout than the default if the asynchronous operations takes longer than one second to complete, which should only be an issue in end-2-end or integration-testing scenarios."
  },
  "docs/verification/index.html": {
    "href": "docs/verification/index.html",
    "title": "Verifying Output from a Component Under Test | bUnit",
    "keywords": "Verifying Output from a Component Under Test This section covers the different ways to verify the result of a test scenario: Verifying Markup from a Component : This covers the different ways bUnit enables verification and assertions against the rendered markup from a component. Verifying the State of a Component Under Test : This covers how to inspect an instance of the component under test. Customizing the Semantic HTML Comparison : This covers how to customize the semantic HTML/markup comparer included in bUnit for more stable tests. Assertion of Asynchronous Changes : This covers how to create stable tests in an asynchronous world."
  },
  "docs/verification/semantic-html-comparison.html": {
    "href": "docs/verification/semantic-html-comparison.html",
    "title": "Customizing the Semantic HTML Comparison | bUnit",
    "keywords": "Customizing the Semantic HTML Comparison This library includes comparison and assert helpers that use the AngleSharp Diffing library to perform semantic HTML comparison. On this page we will go through how the comparison works, and what options you have to affect the comparison process. Note The semantic HTML comparison is available in both C# and Razor tests with the Fixture component, and is always used in Razor tests with the SnapshotTest component. Why Semantic Comparison is Needed for Stable Tests Just performing string comparison of two strings containing HTML markup can break quite easily, even if the two markup strings are semantically equivalent. Some changes that can cause a regular string comparison to fail are as follows: Formatting of markup, e.g. with extra line breaks or indentions and changes to insignificant whitespace. Reordering of attributes. The order of attributes does not matter. Reordering of classes defined in the class=\"...\" attribute. The order of classes does not matter. Change of boolean attributes to be implicit or explicit, e.g. from required=\"required\" to required . Change s to insignificant whitespace inside <style> tags. Changes to HTML comments and comments inside <style> tags. The AngleSharp Diffing library handles all those cases, so your tests are more stable. Customizing Options The AngleSharp Diffing library also allows us to customize the comparison process by adding special attributes to the \"control\" markup , i.e. the expected markup we want to use in verification. Here are the customization options you have available to you: Ignore comments (enabled by default): Comments in markup and inside <style> tags are automatically ignored and not part of the comparison process. Ignore element: Use the diff:ignore attribute to ignore an element, all its attributes and child nodes. For example, to ignore the h1 element, do the following: <header> <h1 class=\"heading-1\" diff:ignore>Hello world</h1> </header> Ignore attribute: To ignore an attribute during comparison, add the :ignore modifier to the attribute (no value is needed). For example, to ignore the class attribute: <header> <h1 class:ignore=\"heading-1\">Hello world</h1> </header> Configure whitespace handling: By default, all nodes and elements are compared using the Normalize whitespace handling option. The Normalize option will trim all text nodes and replace two or more whitespace characters with a single space character. The other options are Preserve , which will leave all whitespace unchanged, and RemoveWhitespaceNodes , which will only remove empty text nodes. To override the default option, use the diff:whitespace attribute, and pass one of the three options to it. For example: <header> <h1 diff:whitespace=\"preserve\">Hello <em> woooorld</em></h1> </header> Note The default for <pre> and <script> elements is the Preserve option. To change that, use the diff:whitespace attribute. For example: <pre diff:whitespace=\"RemoveWhitespaceNodes\">...</pre> Perform case insensitive comparison: By default, all text comparison is case sensitive, but if you want to perform a case insensitive comparison of text inside elements or attributes, use the diff:ignoreCase attributes on elements and :ignoreCase modifier on attributes. For example, to perform a case insensitive comparison of the text in the following h1 element , do the following: <h1 diff:ignoreCase>HellO WoRlD</h1> To perform case insensitive comparison of the text inside the title attribute, do the following: <h1 title:ignoreCase=\"HeaDinG\">...</h1> Use RegEx during comparison: To use a regular expression when comparing the text inside an element or inside an attribute, use the diff:regex on elements and :regex modifier on attributes. For example, to use a regular expression during comparison of the text in the h1 element, add the diff:regex attribute to the element and place the regular expression in the body of the element: <h1 diff:regex diff:ignoreCase>Hello World \\d{4}</h1> To use a regular expression during comparison of the text inside the title attribute, add the :regex modifier to attribute and add the regular expression in the attributes value: <h1 title:regex=\"Heading-\\d{4}\">...</h1> Note The attribute modifiers :ignoreCase and :regex can be combined, for example, as: attr:ignoreCase:regex=\"FOO-\\d{4}\" Examples Let’s look at a few examples where we use the semantic comparison options listed above to modify the comparison. In C#-based tests, we have the MarkupMatches() methods we can use to perform the semantic comparison of the output from a rendered component. For example, we may have a component, <Heading> , that renders the following markup: <h3 id=\"heading-1337\" required> Heading text <small class=\"text-muted mark\"> Secondary text </small> </h3> In this case, we want to verify the markup is rendered correctly, using something such as RegEx to verify the id attribute (it might be generated) and ignoring the <small> element. We can do this like so in C#-based tests with the MarkupMatches() method: // Arrange - renders the Heading component using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); // Assert // Here we specify expected HTML from CUT. var expectedHtml = @\"<h3 id:regex=\"\"heading-\\d{4}\"\" required> Heading text <small diff:ignore></small> </h3>\"; // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); In a Razor based test, using the <Fixture> test type, the example looks like this: <Fixture Test=\"InitialHtmlIsCorrect\"> <ComponentUnderTest> <Heading /> </ComponentUnderTest> <Fragment> <h3 id:regex=\"heading-\\d{4}\" required> Heading text <small diff:ignore></small> </h3> </Fragment> @code { void InitialHtmlIsCorrect(Fixture fixture) { // Arrange - Gets the Heading component var cut = fixture.GetComponentUnderTest<Heading>(); // Assert // Here we get expected HTML from the Fragment element above. var expectedHtml = fixture.GetFragment(); // Here we use the HTML diffing library to assert that the rendered HTML // from CUT is semantically the same as the expected HTML string above. cut.MarkupMatches(expectedHtml); } } </Fixture> In a Snapshot test, using the <SnapshotTest> test type, the example looks like this: <SnapshotTest> <TestInput> <Heading /> </TestInput> <ExpectedOutput> <h3 id:regex=\"heading-\\d{4}\" required> Heading text <small diff:ignore></small> </h3> </ExpectedOutput> </SnapshotTest>"
  },
  "docs/verification/verify-component-state.html": {
    "href": "docs/verification/verify-component-state.html",
    "title": "Verifying the State of a Component Under Test | bUnit",
    "keywords": "Verifying the State of a Component Calling RenderComponent<TComponent>() on a TestContext or calling GetComponentUnderTest<TComponent>() on a Fixture returns an instance of the IRenderedComponent<TComponent> type. The IRenderedComponent<TComponent> type makes it possible to inspect the instance of the component under test ( TComponent ), and trigger re-renders explicitly. Note Since IRenderedComponent<TComponent> inherits from IRenderedFragment , all the markup verification techniques covered on the Verifying Markup from a Component page also applies to the IRenderedComponent<TComponent> type. Inspecting the Component Under Test The Instance property on the IRenderedComponent<TComponent> type provides access to the component under test. For example: using var ctx = new TestContext(); IRenderedComponent<Alert> cut = ctx.RenderComponent<Alert>(); Alert alert = cut.Instance; // Assert against <Alert /> instance Warning While it is possible to set [Parameter] and [CascadingParameter] properties directly through the Instance property on the IRenderedComponent<TComponent> type, doing so does not implicitly trigger a render and the component life-cycle methods are not called. The correct approach is to set parameters through the SetParametersAndRender() methods. See the Triggering a Render Life Cycle on a Component page for more on this. Finding Components in the Render Tree To get the instance of components nested inside the component under test, use the FindComponent<TComponent>() and FindComponents<TComponent>() methods on the IRenderedComponent<TComponent> type. Suppose we have a <TodoList> component with <Task> components nested inside for each task in the todo list. In this case, the <Task> components can be found like this: using var ctx = new TestContext(); var cut = ctx.RenderComponent<TodoList>(parameter => parameter .Add(p => p.Tasks, new [] { \"Task 1\", \"Task 2\" }) ); var tasks = cut.FindComponents<Task>(); Assert.Equal(2, tasks.Count); Both the FindComponent<TComponent>() and FindComponents<TComponent>() methods perform a depth-first search of the render tree, with the first method returning only the first found matching component, and the latter returning all matching components in the render tree. Both the FindComponent<TComponent>() and FindComponents<TComponent>() methods performs a depth-first search of the render tree, with the first method returning only the first found matching component, and the latter returning all matching components in the render tree."
  },
  "docs/verification/verify-markup.html": {
    "href": "docs/verification/verify-markup.html",
    "title": "Verifying Markup from a Component | bUnit",
    "keywords": "Verifying Markup from a Component When a component is rendered in a test, the result is a IRenderedFragment or a IRenderedComponent<TComponent> . Through these, it is possible to access the rendered markup (HTML) of the component and, in the case of IRenderedComponent<TComponent> , the instance of the component. Note An IRenderedComponent<TComponent> inherits from IRenderedFragment . This page will only cover features of the IRenderedFragment type. IRenderedComponent<TComponent> is covered on the Verifying the State of a Component Under Test page. This page covers the following verification approaches: Basic verification of raw markup Semantic comparison of markup Inspecting the individual DOM nodes in the DOM tree Finding expected differences in markup between renders The following sections will cover each of these. Basic Verification of Raw Markup To access the rendered markup of a component, just use the Markup property on IRenderedFragment . This holds the raw HTML from the component as a string . Warning Be aware that all indentions and whitespace in your components ( .razor files) are included in the raw rendered markup, so it is often wise to normalize the markup string a little. For example, via the string Trim() method to make the tests more stable. Otherwise, a change to the formatting in your components might break the tests unnecessarily when it does not need to. To avoid these issues and others related to asserting against raw markup, use the semantic HTML comparer that comes with bUnit, described in the next section. To get the markup as a string, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<HelloWorld>(); var renderedMarkup = cut.Markup; Assert.Equal(\"<h1>Hello world from Blazor</h1>\", renderedMarkup); You can perform standard string assertions against the markup string, like checking whether it contains a value or whether it is empty. Semantic Comparison of Markup Working with raw markup only works well with very simple output, and even then you have to sanitize it to get stable tests. A much better approach is to use the semantic HTML comparer that comes with bUnit. How does the Semantic HTML Comparer Work? The comparer takes two HTML fragments (e.g. in the form of a C# string) as input, and returns true if both HTML fragments result in the same visual rendered output in a web browser. If not, it returns false . For example, a web browser will render this HTML: <span>Foo Bar</span> This will be done in exactly the same way as this HTML: <span> Foo Bar </span> This is why it makes sense to allow tests to pass, even when the rendered HTML markup is not entirely identical to the expected HTML from a normal string comparer's perspective. bUnit's semantic HTML comparer safely ignores things like insignificant whitespace and the order of attributes on elements, as well as many more things. This leads to much more stable tests, as - for example - a reformatted component doesn't break its tests because of insignificant whitespace changes. More details of the semantic comparer can be found on the Customizing the Semantic HTML Comparison page. The MarkupMatches() Method The HTML comparer can be easily accessed through MarkupMatches() extension methods, available in places that represents HTML fragments in bUnit, i.e. on IRenderedFragment and the INode and INodeList types. In the following examples, the <Heading> component listed below will be used as the component under test. <h3 id=\"heading-1337\" required> Heading text <small class=\"text-muted mark\"> Secondary text </small> </h3> To use the MarkupMatches() method to perform a semantic comparison of the output of the <Heading> component through its IRenderedFragment , do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); cut.MarkupMatches(@\"<h3 id=\"\"heading-1337\"\" required> Heading text <small class=\"\"mark text-muted\"\">Secondary text</small> </h3>\"); The highlighted line shows the call to the MarkupMatches() method. This test passes even though the insignificant whitespace is not exactly the same between the expected HTML string and the raw markup produced by the <Heading> component. It even works when the CSS class-list is not in the same order on the <small> element. The MarkupMatches() method is also available on INode and INodeList types, for example: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); var smallElm = cut.Find(\"small\"); smallElm.MarkupMatches(@\"<small class=\"\"mark text-muted\"\">Secondary text</small>\"); Here we use the Find(string cssSelector) method to find the <small> element, and only verify it and its content and attributes. Tip Working with Find() , FindAll() , INode and INodeList is covered later on this page. Text content can also be verified with the MarkupMatches() method, e.g. the text inside the <small> element. It has the advantage over regular string comparison in that it removes insignificant whitespace in the text automatically - even between words - where a normal string Trim() method isn't enough. For example: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Heading>(); var smallElmText = cut.Find(\"small\").TextContent; smallElmText.MarkupMatches(\"Secondary text\"); The semantic HTML comparer can be customized to make a test case even more stable and easier to maintain. For example, it is possible to ignore an element or attribute during comparison, or provide a regular expression to the comparer when comparing a specific element or attribute to make the comparer work with generated data. Learn more about the customizations options on the Customizing the Semantic HTML Comparison page. Inspecting DOM Nodes The rendered markup from a component is available as a DOM node through the Nodes property on IRenderedFragment , as well as the Find(string cssSelector) and FindAll(string cssSelector) extension methods on IRenderedFragment . The Nodes property and the FindAll() method returns an AngleSharp INodeList type, and the Find() method returns an AngleSharp IElement type. The DOM API in AngleSharp follows the W3C DOM API specifications and gives you the same results as state-of-the-art browser’s implementation of the DOM API in JavaScript. Besides the official DOM API, AngleSharp and bUnit adds some useful extension methods on top. This makes working with DOM nodes convenient. Finding Nodes with the Find() and FindAll() methods Users of the famous JavaScript framework jQuery will recognize these two methods: Find(string cssSelector) takes a \"CSS selector\" as input and returns an IElement as output, or throws an exception if none are found. FindAll(string cssSelector) takes a \"CSS selector\" as input and returns a list of IElement elements. Let's see some examples of using the Find(string cssSelector) and FindAll(string cssSelector) methods to query the <FancyTable> component listed below. <table> <caption>Lorem lipsum captium</caption> <tbody> <tr> <td style=\"white-space:nowrap\">Foo</td> <td>Bar</td> </tr> <tr> <td style=\"white-space:nowrap\">Baz</td> <td>Boo</td> </tr> </tbody> </table> To find the <caption> element and the first <td> elements in each row, do the following: using var ctx = new TestContext(); var cut = ctx.RenderComponent<FancyTable>(); var tableCaption = cut.Find(\"caption\"); var tableCells = cut.FindAll(\"td:first-child\"); Once you have one or more elements, you verify against them, such as by inspecting their properties through the DOM API. For example: Assert.Empty(tableCaption.Attributes); Assert.Equal(2, tableCells.Count); Assert.All(tableCells, td => td.HasAttribute(\"style\")); Auto-refreshing Find() Queries An element found with the Find(string cssSelector) method will be updated if the component it came from is re-rendered. However, that does not apply to elements that are found by traversing the DOM tree via the Nodes property on IRenderedFragment , for example, as those nodes do not know when their root component is re-rendered. Consequently, they don’t know when they should be updated. As a result of this, it is always recommended to use the Find(string cssSelector) method when searching for a single element. Alternatively, always reissue the query whenever you need the element . Auto-refreshable FindAll() Queries The FindAll(string cssSelector, bool enableAutoRefresh = false) method has an optional parameter, enableAutoRefresh , which, when set to true , will return a collection of IElement which automatically refreshes itself when the component the elements came from is re-rendered. Finding Expected Differences It can sometimes be easier to verify that an expected change has happened in the rendered markup (and only that), than it can be to specify how all the rendered markup should look after re-render. bUnit comes with a number of ways for finding lists of IDiff ; the representation of a difference between two HTML fragments. All of these are direct methods or extension methods on the IRenderedFragment type or on the INode or INodeList types: GetChangesSinceFirstRender() method on IRenderedFragment . This method returns a list of differences since the initial first render of a component. GetChangesSinceSnapshot() and SaveSnapshot() methods on IRenderedFragment . These two methods combined make it possible to get a list of differences between the last time the SaveSnapshot() method was called and the time a call to the GetChangesSinceSnapshot() method is placed. CompareTo() methods from CompareToExtensions for the IRenderedFragment , INode , and INodeList types. These methods return a list of differences between the two input HTML fragments. In addition to this, there are a number of experimental assertion helpers for IDiff and IEnumerable<IDiff> , making it easier and more concise to declare your assertions. Let's look at a few examples of using the assertion helpers. In the first one, we will use the <Counter> component listed below: <h1>Counter</h1> <p> Current count: @currentCount </p> <button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button> @code { int currentCount = 0; void IncrementCount() { currentCount++; } } Here is an example of using the GetChangesSinceFirstRender() method: using var ctx = new TestContext(); var cut = ctx.RenderComponent<Counter>(); // Act - increment the counter cut.Find(\"button\").Click(); // Assert - find differences between first render and click var diffs = cut.GetChangesSinceFirstRender(); // Only expect there to be one change var diff = diffs.ShouldHaveSingleChange(); // and that change should be a text // change to \"Current count: 1\" diff.ShouldBeTextChange(\"Current count: 1\"); This is what happens in the test: On line 8, GetChangesSinceFirstRender() is used to get a list of differences. On line 11, the ShouldHaveSingleChange() method is used to verify that there is only one change found. On line 14, the ShouldBeTextChange() method is used to verify that the single IDiff is a text change. Testing a more complex life cycle of a component can be done more easily using the GetChangesSinceSnapshot() and SaveSnapshot() methods along with a host of other assert helpers. This example tests the <CheckList> component listed below. The component allows you to add new items to the checklist by typing into the input field and hitting the enter key. Items can be removed from the again list by clicking on them. <input type=\"text\" placeholder=\"Add new item\" @bind=\"newItemValue\" @onkeyup=\"OnTextInput\" /> <ul> @foreach (var item in items) { <li @onclick=\"() => items.Remove(item)\">@item</li> } </ul> @code { private string newItemValue = string.Empty; private List<string> items = new List<string>(); private void OnTextInput(KeyboardEventArgs args) { if(args.Key == \"Enter\") { items.Add(newItemValue); newItemValue = string.Empty; } } } To test the end-to-end life cycle of adding and removing items from the <CheckList> component, do the following: // Arrange using var ctx = new TestContext(); var cut = ctx.RenderComponent<CheckList>(); var inputField = cut.Find(\"input\"); // Add first item inputField.Change(\"First item\"); inputField.KeyUp(key: \"Enter\"); // Assert that first item was added correctly var diffs = cut.GetChangesSinceFirstRender(); diffs.ShouldHaveSingleChange() .ShouldBeAddition(\"<li>First item</li>\"); // Save snapshot of current DOM nodes cut.SaveSnapshot(); // Add a second item inputField.Change(\"Second item\"); inputField.KeyUp(key: \"Enter\"); // Assert that both first and second item was added // since the first render diffs = cut.GetChangesSinceFirstRender(); diffs.ShouldHaveChanges( diff => diff.ShouldBeAddition(\"<li>First item</li>\"), diff => diff.ShouldBeAddition(\"<li>Second item</li>\") ); // Assert that only the second item was added // since the call to SaveSnapshot() diffs = cut.GetChangesSinceSnapshot(); diffs.ShouldHaveSingleChange() .ShouldBeAddition(\"<li>Second item</li>\"); // Save snapshot again of current DOM nodes cut.SaveSnapshot(); // Click last item to remove it from list cut.Find(\"li:last-child\").Click(); // Assert that the second item was removed // since the call to SaveSnapshot() diffs = cut.GetChangesSinceSnapshot(); diffs.ShouldHaveSingleChange() .ShouldBeRemoval(\"<li>Second item</li>\"); This is what happens in the test: First the component is rendered and the input field is found. The first item is added through the input field. The GetChangesSinceFirstRender() , ShouldHaveSingleChange() and ShouldBeAddition() methods are used to verify that the item was correctly added. The SaveSnapshot() is used to save a snapshot of current DOM nodes internally in the cut . This reduces the number of diffs found in the following steps, simplifying verification. A second item is added to the check list. Two verifications are performed at this point, one using the GetChangesSinceFirstRender() method which finds two changes, and one using the GetChangesSinceSnapshot() method, that finds a single change. The first is only done for illustrative purposes. A new snapshot is saved, replacing the previous one with another call to the SaveSnapshot() method. Finally the last item in the list is found and clicked, and the GetChangesSinceSnapshot() method is used to find the changes, a single diff, which is verified as a removal of the second item. As mentioned earlier, the IDiff assertion helpers are still experimental. Any feedback and suggestions for improvements should be directed to the related issue on GitHub."
  },
  "index.html": {
    "href": "index.html",
    "title": "bUnit - a Testing Library for Blazor Components | bUnit",
    "keywords": "bUnit: a Testing Library for Blazor Components bUnit is a testing library for Blazor Components. Its goal is to make it easy to write comprehensive, stable unit tests. With bUnit, you can: Setup and define components under tests using C# or Razor syntax Verify outcome using semantic HTML comparer Interact with and inspect components as well as triggering event handlers Pass parameters, cascading values and inject services into components under test Mock IJSRuntime and Blazors authentication and authorization Perform snapshot testing bUnit builds on top of existing unit testing frameworks such as xUnit, NUnit, and MSTest, which runs the Blazor components tests in just the same way as any normal unit test. bUnit runs a test in milliseconds, compared to browser-based UI tests, where a test usually takes seconds to run. Go to the Documentation pages to learn more. Test Example Let’s write a test for the <Counter> component listed below. This comes with the standard Blazor project template which verifies that the counter corrects increments when the button is clicked: <h1>Counter</h1> <p> Current count: @currentCount </p> <button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button> @code { int currentCount = 0; void IncrementCount() { currentCount++; } } To do this, you can do the following using bUnit and xUnit: [Fact] public void CounterShouldIncrementWhenClicked() { // Arrange: render the Counter.razor component using var ctx = new TestContext(); var cut = ctx.RenderComponent<Counter>(); // Act: find and click the <button> element to increment // the counter in the <p> element cut.Find(\"button\").Click(); // Assert: first find the <p> element, then verify its content cut.Find(\"p\").MarkupMatches(\"<p>Current count: 1</p>\"); } This test uses bUnit’s test context to render the ‘Counter’ component with the ‘RenderComponent’ method. It then finds the button the component rendered and clicks it with the ‘Find’ and ‘Click’ methods. Finally, it finds the paragraph ( <p> ) element and verifies that it matches the expected markup passed to the MarkupMatches method. Go to the Documentation pages to learn more. NuGet Downloads bUnit is available on NuGet in various incarnations. If you are using xUnit as your general purpose testing framework, you can use bunit , which includes everything in one package. If you want to use NUnit or MStest, then pick bunit.core and bunit.web : Name Description NuGet Download Link bUnit.web Adds support for testing Blazor components for the web. This includes bUnit.core. bUnit.xUnit Adds additional support for using bUnit with xUnit, including support for Razor-based tests. bUnit.core Core library that enables rendering a Blazor component in a test context. bUnit.template Template, which currently creates an xUnit based bUnit test projects only Sponsors A huge thank you to the sponsors of my work with bUnit . The higher tier sponsors are: Progress-Telerik Hassan Rezk Habib (@hassanhabib) Milestones to v1.0.0 Going forward, we have a variety of milestones to reach. These are the current goals that should be reached before v1.0.0 is ready: Stabilize the APIs , such that they work equally well with both xUnit, NUnit, and MSTest as the underlying test framework. The general goal is to make it easy for developers to create their required tests successfully. Get the Razor-based testing to stable , e.g. make the discovery and running of tests defined in .razor files stable and efficient. This includes adding support for NUnit and MSTest as test runners. Improve the documentation . It is a good idea to get an experienced technical editor to review the documentation, making sure it is clear and understandable. In addition to this, more ‘How to’ guides are planned in the Update Docs milestone. Join the .NET Foundation. . This project is too large for one person to be the owner and sole maintainer of, so the plan is to apply for membership as soon as possible, most likely close to or after v1.0.0 ships, and get the needed support and guidance to ensure the project long term. In the post-v1.0.0 to v1.0.x time frame, focus will be on improving performance. In particular, it would be nice to reduce the spin-up time of about one second. Contributors Shout outs and a big thank you to all the contributors to the library, both those that raise issues, provide input to issues, and those who send pull requests. Want to help out? You can help in a number of ways: Provide feedback and input through issues , Twitter or bUnit Gitter chat room . Help build the library, just pick an issue and submit pull-requests. Help write documentation. Create blog posts, presentations or video tutorials. If you do, I will be happy to showcase them in the related section on this site. <!--stackedit_data: eyJoaXN0b3J5IjpbMTk0NjU1NjA3N119 -->"
  }
}